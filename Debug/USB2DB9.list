
USB2DB9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000854c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008730  08008730  00018730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008768  08008768  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08008768  08008768  00018768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008770  08008770  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008770  08008770  00018770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08008778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  2000009c  08008814  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20000818  08008814  00020818  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd3a  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bd0  00000000  00000000  0003bdff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b0  00000000  00000000  0003f9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f30  00000000  00000000  00040a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f73c  00000000  00000000  000419b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff5a  00000000  00000000  000610ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a0d67  00000000  00000000  00071046  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111dad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004564  00000000  00000000  00111e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000009c 	.word	0x2000009c
 8000200:	00000000 	.word	0x00000000
 8000204:	08008718 	.word	0x08008718

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000a0 	.word	0x200000a0
 8000220:	08008718 	.word	0x08008718

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000234:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <processMouseMovement>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t processMouseMovement(int8_t movementUnits, uint8_t axis, int limitRate, int dpiDivide)
{
 8000528:	b480      	push	{r7}
 800052a:	b087      	sub	sp, #28
 800052c:	af00      	add	r7, sp, #0
 800052e:	60ba      	str	r2, [r7, #8]
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	4603      	mov	r3, r0
 8000534:	73fb      	strb	r3, [r7, #15]
 8000536:	460b      	mov	r3, r1
 8000538:	73bb      	strb	r3, [r7, #14]
	uint16_t timerTopValue = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	82fb      	strh	r3, [r7, #22]



	// Set the mouse movement direction and record the movement units
	if (movementUnits > 0) {
 800053e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000542:	2b00      	cmp	r3, #0
 8000544:	dd2b      	ble.n	800059e <processMouseMovement+0x76>
		// Moving in the positive direction

		// Apply DPI limiting if required
		if (dpiDivide) {
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d00b      	beq.n	8000564 <processMouseMovement+0x3c>
			movementUnits /= DPI_DIVIDER;
 800054c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000550:	0fda      	lsrs	r2, r3, #31
 8000552:	4413      	add	r3, r2
 8000554:	105b      	asrs	r3, r3, #1
 8000556:	73fb      	strb	r3, [r7, #15]
			if (movementUnits < 1) movementUnits = 1;
 8000558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800055c:	2b00      	cmp	r3, #0
 800055e:	dc01      	bgt.n	8000564 <processMouseMovement+0x3c>
 8000560:	2301      	movs	r3, #1
 8000562:	73fb      	strb	r3, [r7, #15]
		}

		// Add the movement units to the quadrature output buffer
		if (axis == MOUSEX) mouseDistanceX += movementUnits;
 8000564:	7bbb      	ldrb	r3, [r7, #14]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d10c      	bne.n	8000584 <processMouseMovement+0x5c>
 800056a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b4f      	ldr	r3, [pc, #316]	; (80006b0 <processMouseMovement+0x188>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	b21b      	sxth	r3, r3
 8000576:	b29b      	uxth	r3, r3
 8000578:	4413      	add	r3, r2
 800057a:	b29b      	uxth	r3, r3
 800057c:	b21a      	sxth	r2, r3
 800057e:	4b4c      	ldr	r3, [pc, #304]	; (80006b0 <processMouseMovement+0x188>)
 8000580:	801a      	strh	r2, [r3, #0]
 8000582:	e046      	b.n	8000612 <processMouseMovement+0xea>
		else mouseDistanceY += movementUnits;
 8000584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000588:	b29a      	uxth	r2, r3
 800058a:	4b4a      	ldr	r3, [pc, #296]	; (80006b4 <processMouseMovement+0x18c>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	b21b      	sxth	r3, r3
 8000590:	b29b      	uxth	r3, r3
 8000592:	4413      	add	r3, r2
 8000594:	b29b      	uxth	r3, r3
 8000596:	b21a      	sxth	r2, r3
 8000598:	4b46      	ldr	r3, [pc, #280]	; (80006b4 <processMouseMovement+0x18c>)
 800059a:	801a      	strh	r2, [r3, #0]
 800059c:	e039      	b.n	8000612 <processMouseMovement+0xea>
	} else if (movementUnits < 0) {
 800059e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	da2b      	bge.n	80005fe <processMouseMovement+0xd6>
		// Moving in the negative direction

		// Apply DPI limiting if required
		if (dpiDivide) {
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <processMouseMovement+0x9c>
			movementUnits /= DPI_DIVIDER;
 80005ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005b0:	0fda      	lsrs	r2, r3, #31
 80005b2:	4413      	add	r3, r2
 80005b4:	105b      	asrs	r3, r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
			if (movementUnits > -1) movementUnits = -1;
 80005b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db01      	blt.n	80005c4 <processMouseMovement+0x9c>
 80005c0:	23ff      	movs	r3, #255	; 0xff
 80005c2:	73fb      	strb	r3, [r7, #15]
		}

		// Add the movement units to the quadrature output buffer
		if (axis == MOUSEX) mouseDistanceX += -movementUnits;
 80005c4:	7bbb      	ldrb	r3, [r7, #14]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d10c      	bne.n	80005e4 <processMouseMovement+0xbc>
 80005ca:	4b39      	ldr	r3, [pc, #228]	; (80006b0 <processMouseMovement+0x188>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	b21b      	sxth	r3, r3
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	b29b      	uxth	r3, r3
 80005dc:	b21a      	sxth	r2, r3
 80005de:	4b34      	ldr	r3, [pc, #208]	; (80006b0 <processMouseMovement+0x188>)
 80005e0:	801a      	strh	r2, [r3, #0]
 80005e2:	e016      	b.n	8000612 <processMouseMovement+0xea>
		else mouseDistanceY += -movementUnits;
 80005e4:	4b33      	ldr	r3, [pc, #204]	; (80006b4 <processMouseMovement+0x18c>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	b21b      	sxth	r3, r3
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	b21a      	sxth	r2, r3
 80005f8:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <processMouseMovement+0x18c>)
 80005fa:	801a      	strh	r2, [r3, #0]
 80005fc:	e009      	b.n	8000612 <processMouseMovement+0xea>
	} else {
		if (axis == MOUSEX) mouseDistanceX = 0;
 80005fe:	7bbb      	ldrb	r3, [r7, #14]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d103      	bne.n	800060c <processMouseMovement+0xe4>
 8000604:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <processMouseMovement+0x188>)
 8000606:	2200      	movs	r2, #0
 8000608:	801a      	strh	r2, [r3, #0]
 800060a:	e002      	b.n	8000612 <processMouseMovement+0xea>
		else mouseDistanceY = 0;
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <processMouseMovement+0x18c>)
 800060e:	2200      	movs	r2, #0
 8000610:	801a      	strh	r2, [r3, #0]
	}

	// Apply the quadrature output buffer limit
	if (axis == MOUSEX) {
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d10a      	bne.n	800062e <processMouseMovement+0x106>
		if (mouseDistanceX > Q_BUFFERLIMIT) mouseDistanceX = Q_BUFFERLIMIT;
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <processMouseMovement+0x188>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	b21b      	sxth	r3, r3
 800061e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000622:	dd0e      	ble.n	8000642 <processMouseMovement+0x11a>
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <processMouseMovement+0x188>)
 8000626:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800062a:	801a      	strh	r2, [r3, #0]
 800062c:	e009      	b.n	8000642 <processMouseMovement+0x11a>
	} else {
		if (mouseDistanceY > Q_BUFFERLIMIT) mouseDistanceY = Q_BUFFERLIMIT;
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <processMouseMovement+0x18c>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	b21b      	sxth	r3, r3
 8000634:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000638:	dd03      	ble.n	8000642 <processMouseMovement+0x11a>
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <processMouseMovement+0x18c>)
 800063c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000640:	801a      	strh	r2, [r3, #0]
	}

	// Get the current value of the quadrature output buffer
	if (axis == MOUSEX) timerTopValue = mouseDistanceX;
 8000642:	7bbb      	ldrb	r3, [r7, #14]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d104      	bne.n	8000652 <processMouseMovement+0x12a>
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <processMouseMovement+0x188>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	b21b      	sxth	r3, r3
 800064e:	82fb      	strh	r3, [r7, #22]
 8000650:	e003      	b.n	800065a <processMouseMovement+0x132>
	else timerTopValue = mouseDistanceY;
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <processMouseMovement+0x18c>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	b21b      	sxth	r3, r3
 8000658:	82fb      	strh	r3, [r7, #22]

	// Range check the quadrature output buffer
	if (timerTopValue > 127) timerTopValue = 127;
 800065a:	8afb      	ldrh	r3, [r7, #22]
 800065c:	2b7f      	cmp	r3, #127	; 0x7f
 800065e:	d901      	bls.n	8000664 <processMouseMovement+0x13c>
 8000660:	237f      	movs	r3, #127	; 0x7f
 8000662:	82fb      	strh	r3, [r7, #22]
	//
	// So:
	//   timerTopValue = 10000 / timerTopValue; // i.e. 1,000,000 / (timerTopValue * 100)
	//   timerTopValue = timerTopValue / 64;
	//   timerTopValue = timerTopValue - 1;
    if (timerTopValue !=0)
 8000664:	8afb      	ldrh	r3, [r7, #22]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00c      	beq.n	8000684 <processMouseMovement+0x15c>
    {
	timerTopValue = ((10000 / timerTopValue) / 64) - 1;
 800066a:	8afb      	ldrh	r3, [r7, #22]
 800066c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000670:	fb92 f3f3 	sdiv	r3, r2, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	da00      	bge.n	800067a <processMouseMovement+0x152>
 8000678:	333f      	adds	r3, #63	; 0x3f
 800067a:	119b      	asrs	r3, r3, #6
 800067c:	b29b      	uxth	r3, r3
 800067e:	3b01      	subs	r3, #1
 8000680:	82fb      	strh	r3, [r7, #22]
 8000682:	e001      	b.n	8000688 <processMouseMovement+0x160>
    }
    else
	{
    	timerTopValue = 255;
 8000684:	23ff      	movs	r3, #255	; 0xff
 8000686:	82fb      	strh	r3, [r7, #22]
	}
	// If the 'Slow' configuration jumper is shorted; apply the quadrature rate limit
	if (limitRate) {
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d008      	beq.n	80006a0 <processMouseMovement+0x178>
		// 666.67 us / (64 * 4) = 2.6 ticks
		//
		// Timer TOP is 0-255, so subtract 1
		// 10.42 ticks - 1 = 9.42 ticks

		uint32_t rateLimit = ((1000000 / Q_RATELIMIT) / 256) - 1;
 800068e:	2306      	movs	r3, #6
 8000690:	613b      	str	r3, [r7, #16]

		// If the timerTopValue is less than the rate limit, we output
		// at the maximum allowed rate.  This will cause addition lag that
		// is handled by the quadrature output buffer limit above.
		if (timerTopValue < (uint16_t)rateLimit) timerTopValue = (uint16_t)rateLimit;
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	b29b      	uxth	r3, r3
 8000696:	8afa      	ldrh	r2, [r7, #22]
 8000698:	429a      	cmp	r2, r3
 800069a:	d201      	bcs.n	80006a0 <processMouseMovement+0x178>
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	82fb      	strh	r3, [r7, #22]
	}

	// Return the timer TOP value
	return (uint8_t)timerTopValue;
 80006a0:	8afb      	ldrh	r3, [r7, #22]
 80006a2:	b2db      	uxtb	r3, r3
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	371c      	adds	r7, #28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	200000bc 	.word	0x200000bc
 80006b4:	200000be 	.word	0x200000be

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	USBH_HandleTypeDef * usbhost = NULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
	ApplicationTypeDef aState = APPLICATION_DISCONNECT;
 80006c2:	2303      	movs	r3, #3
 80006c4:	74fb      	strb	r3, [r7, #19]
	uint8_t *joymap = 0U;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
	HID_MOUSE_Info_TypeDef    *mousemap;

    uint8_t limitRate = 0U;
 80006ca:	2300      	movs	r3, #0
 80006cc:	72fb      	strb	r3, [r7, #11]
	uint8_t dpiDivide = 0U;
 80006ce:	2300      	movs	r3, #0
 80006d0:	72bb      	strb	r3, [r7, #10]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d2:	f000 fcdb 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d6:	f000 f919 	bl	800090c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f000 fa17 	bl	8000b0c <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80006de:	f007 fca7 	bl	8008030 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80006e2:	f000 f977 	bl	80009d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006e6:	f000 f9c3 	bl	8000a70 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//HAL_TIM_Base_Start_IT(&htim2) ;
//HAL_TIM_Base_Start_IT(&htim3) ;
/* USER CODE END 2 */
 
	HAL_TIM_Base_Start_IT(&htim2) ;
 80006ea:	487f      	ldr	r0, [pc, #508]	; (80008e8 <main+0x230>)
 80006ec:	f003 fa4d 	bl	8003b8a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3) ;
 80006f0:	487e      	ldr	r0, [pc, #504]	; (80008ec <main+0x234>)
 80006f2:	f003 fa4a 	bl	8003b8a <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006f6:	f007 fcc1 	bl	800807c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    aState = USBH_ApplicationState();
 80006fa:	f007 fcf5 	bl	80080e8 <USBH_ApplicationState>
 80006fe:	4603      	mov	r3, r0
 8000700:	74fb      	strb	r3, [r7, #19]
    		if (aState == APPLICATION_READY)
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	2b02      	cmp	r3, #2
 8000706:	d1f6      	bne.n	80006f6 <main+0x3e>
    		{
    			usbhost = USBH_GetHost();
 8000708:	f007 fcf8 	bl	80080fc <USBH_GetHost>
 800070c:	4603      	mov	r3, r0
 800070e:	617b      	str	r3, [r7, #20]
    			//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

    			HID_TypeTypeDef device_type = USBH_HID_GetDeviceType(usbhost);
 8000710:	6978      	ldr	r0, [r7, #20]
 8000712:	f005 f8c4 	bl	800589e <USBH_HID_GetDeviceType>
 8000716:	4603      	mov	r3, r0
 8000718:	727b      	strb	r3, [r7, #9]
    			if (device_type == HID_MOUSE)
 800071a:	7a7b      	ldrb	r3, [r7, #9]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d17f      	bne.n	8000820 <main+0x168>
    			{
    				mousemap = USBH_HID_GetMouseInfo(usbhost);
 8000720:	6978      	ldr	r0, [r7, #20]
 8000722:	f005 fdb3 	bl	800628c <USBH_HID_GetMouseInfo>
 8000726:	6078      	str	r0, [r7, #4]

    				if (mousemap!=NULL)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0e3      	beq.n	80006f6 <main+0x3e>
    							//
    							// X and Y have a range of -127 to +127

    							// If the mouse movement changes direction then disregard any remaining
    							// movement units in the previous direction.
    							if (mousemap->x > 0 && mouseDirectionX == 0) {
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	2b00      	cmp	r3, #0
 8000736:	dd0b      	ble.n	8000750 <main+0x98>
 8000738:	4b6d      	ldr	r3, [pc, #436]	; (80008f0 <main+0x238>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b25b      	sxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d106      	bne.n	8000750 <main+0x98>
    								mouseDistanceX = 0;
 8000742:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <main+0x23c>)
 8000744:	2200      	movs	r2, #0
 8000746:	801a      	strh	r2, [r3, #0]
    								mouseDirectionX = 1;
 8000748:	4b69      	ldr	r3, [pc, #420]	; (80008f0 <main+0x238>)
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	e031      	b.n	80007b4 <main+0xfc>
    							} else if (mousemap->x < 0 && mouseDirectionX == 1) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000756:	2b00      	cmp	r3, #0
 8000758:	da0b      	bge.n	8000772 <main+0xba>
 800075a:	4b65      	ldr	r3, [pc, #404]	; (80008f0 <main+0x238>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b25b      	sxtb	r3, r3
 8000760:	2b01      	cmp	r3, #1
 8000762:	d106      	bne.n	8000772 <main+0xba>
    								mouseDistanceX = 0;
 8000764:	4b63      	ldr	r3, [pc, #396]	; (80008f4 <main+0x23c>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
    								mouseDirectionX = 0;
 800076a:	4b61      	ldr	r3, [pc, #388]	; (80008f0 <main+0x238>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	e020      	b.n	80007b4 <main+0xfc>
    							} else if (mousemap->y > 0 && mouseDirectionY == 0) {
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000778:	2b00      	cmp	r3, #0
 800077a:	dd0b      	ble.n	8000794 <main+0xdc>
 800077c:	4b5e      	ldr	r3, [pc, #376]	; (80008f8 <main+0x240>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b25b      	sxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d106      	bne.n	8000794 <main+0xdc>
    								mouseDistanceY = 0;
 8000786:	4b5d      	ldr	r3, [pc, #372]	; (80008fc <main+0x244>)
 8000788:	2200      	movs	r2, #0
 800078a:	801a      	strh	r2, [r3, #0]
    								mouseDirectionY = 1;
 800078c:	4b5a      	ldr	r3, [pc, #360]	; (80008f8 <main+0x240>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
 8000792:	e00f      	b.n	80007b4 <main+0xfc>
    							} else if (mousemap->y < 0 && mouseDirectionY == 1) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800079a:	2b00      	cmp	r3, #0
 800079c:	da0a      	bge.n	80007b4 <main+0xfc>
 800079e:	4b56      	ldr	r3, [pc, #344]	; (80008f8 <main+0x240>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d105      	bne.n	80007b4 <main+0xfc>
    								mouseDistanceY = 0;
 80007a8:	4b54      	ldr	r3, [pc, #336]	; (80008fc <main+0x244>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	801a      	strh	r2, [r3, #0]
    								mouseDirectionY = 0;
 80007ae:	4b52      	ldr	r3, [pc, #328]	; (80008f8 <main+0x240>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]

    							// Process mouse X and Y movement -------------------------------------
    							//HAL_TIM_Base_Start_IT(&htim2) ;
    							//HAL_TIM_Base_Start_IT(&htim3) ;

    							xTimerTop = processMouseMovement(mousemap->x, MOUSEX, 0U,0U);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ba:	b258      	sxtb	r0, r3
 80007bc:	2300      	movs	r3, #0
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	f7ff feb1 	bl	8000528 <processMouseMovement>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b4d      	ldr	r3, [pc, #308]	; (8000900 <main+0x248>)
 80007cc:	701a      	strb	r2, [r3, #0]
    							yTimerTop = processMouseMovement(mousemap->y, MOUSEY, 0U,0U);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007d4:	b258      	sxtb	r0, r3
 80007d6:	2300      	movs	r3, #0
 80007d8:	2200      	movs	r2, #0
 80007da:	2101      	movs	r1, #1
 80007dc:	f7ff fea4 	bl	8000528 <processMouseMovement>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b47      	ldr	r3, [pc, #284]	; (8000904 <main+0x24c>)
 80007e6:	701a      	strb	r2, [r3, #0]

    							// Process mouse buttons ----------------------------------------------


    		 					HAL_GPIO_WritePin(BTN1_GPIO_Port, BTN1_Pin, mousemap->buttons[2]);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	461a      	mov	r2, r3
 80007f2:	2120      	movs	r1, #32
 80007f4:	4844      	ldr	r0, [pc, #272]	; (8000908 <main+0x250>)
 80007f6:	f000 ff35 	bl	8001664 <HAL_GPIO_WritePin>
    		    				HAL_GPIO_WritePin(BTN2_GPIO_Port, BTN2_Pin, mousemap->buttons[1]);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	461a      	mov	r2, r3
 8000804:	2140      	movs	r1, #64	; 0x40
 8000806:	4840      	ldr	r0, [pc, #256]	; (8000908 <main+0x250>)
 8000808:	f000 ff2c 	bl	8001664 <HAL_GPIO_WritePin>
    		    				HAL_GPIO_WritePin(BTN3_GPIO_Port, BTN3_Pin, mousemap->buttons[0]);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	461a      	mov	r2, r3
 8000816:	2180      	movs	r1, #128	; 0x80
 8000818:	483b      	ldr	r0, [pc, #236]	; (8000908 <main+0x250>)
 800081a:	f000 ff23 	bl	8001664 <HAL_GPIO_WritePin>
 800081e:	e76a      	b.n	80006f6 <main+0x3e>




    			}
    			else if (device_type == HID_UNKNOWN)
 8000820:	7a7b      	ldrb	r3, [r7, #9]
 8000822:	2bff      	cmp	r3, #255	; 0xff
 8000824:	f47f af67 	bne.w	80006f6 <main+0x3e>
    			{
    				joymap = USBH_HID_GetGamepadInfo(usbhost);
 8000828:	6978      	ldr	r0, [r7, #20]
 800082a:	f005 f9ef 	bl	8005c0c <USBH_HID_GetGamepadInfo>
 800082e:	60f8      	str	r0, [r7, #12]

    				if (joymap!=NULL)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	f43f af5f 	beq.w	80006f6 <main+0x3e>
    					//BTN1 =  (*joymap>>6&0x1);
    				    //BTN2 =  (*joymap>>5&0x1);
    					//BTN3 =  (*joymap>>4&0x1);
    					//HAL_GPIO_WritePin(LVQ_GPIO_Port, LVQ_Pin, ;

    					HAL_GPIO_WritePin(RHQ_GPIO_Port, RHQ_Pin, (*joymap&0x1));
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	461a      	mov	r2, r3
 8000844:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000848:	482f      	ldr	r0, [pc, #188]	; (8000908 <main+0x250>)
 800084a:	f000 ff0b 	bl	8001664 <HAL_GPIO_WritePin>
    					HAL_GPIO_WritePin(LVQ_GPIO_Port, LVQ_Pin, (*joymap>>1&0x1));
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	085b      	lsrs	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000862:	4829      	ldr	r0, [pc, #164]	; (8000908 <main+0x250>)
 8000864:	f000 fefe 	bl	8001664 <HAL_GPIO_WritePin>
    					HAL_GPIO_WritePin(BH_GPIO_Port, BH_Pin, (*joymap>>2&0x1));
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	089b      	lsrs	r3, r3, #2
 800086e:	b2db      	uxtb	r3, r3
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	461a      	mov	r2, r3
 8000878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087c:	4822      	ldr	r0, [pc, #136]	; (8000908 <main+0x250>)
 800087e:	f000 fef1 	bl	8001664 <HAL_GPIO_WritePin>
    					HAL_GPIO_WritePin(FV_GPIO_Port, FV_Pin, (*joymap>>3&0x1));
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	08db      	lsrs	r3, r3, #3
 8000888:	b2db      	uxtb	r3, r3
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000896:	481c      	ldr	r0, [pc, #112]	; (8000908 <main+0x250>)
 8000898:	f000 fee4 	bl	8001664 <HAL_GPIO_WritePin>
    					HAL_GPIO_WritePin(BTN1_GPIO_Port, BTN1_Pin, (*joymap>>4&0x1));
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	091b      	lsrs	r3, r3, #4
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	2120      	movs	r1, #32
 80008ae:	4816      	ldr	r0, [pc, #88]	; (8000908 <main+0x250>)
 80008b0:	f000 fed8 	bl	8001664 <HAL_GPIO_WritePin>
    					HAL_GPIO_WritePin(BTN2_GPIO_Port, BTN2_Pin, (*joymap>>5&0x1));
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	095b      	lsrs	r3, r3, #5
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	2140      	movs	r1, #64	; 0x40
 80008c6:	4810      	ldr	r0, [pc, #64]	; (8000908 <main+0x250>)
 80008c8:	f000 fecc 	bl	8001664 <HAL_GPIO_WritePin>
    					HAL_GPIO_WritePin(BTN3_GPIO_Port, BTN3_Pin, (*joymap>>6&0x1));
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	099b      	lsrs	r3, r3, #6
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	480a      	ldr	r0, [pc, #40]	; (8000908 <main+0x250>)
 80008e0:	f000 fec0 	bl	8001664 <HAL_GPIO_WritePin>
  {
 80008e4:	e707      	b.n	80006f6 <main+0x3e>
 80008e6:	bf00      	nop
 80008e8:	2000011c 	.word	0x2000011c
 80008ec:	200000dc 	.word	0x200000dc
 80008f0:	200000b8 	.word	0x200000b8
 80008f4:	200000bc 	.word	0x200000bc
 80008f8:	200000ba 	.word	0x200000ba
 80008fc:	200000be 	.word	0x200000be
 8000900:	20000000 	.word	0x20000000
 8000904:	20000001 	.word	0x20000001
 8000908:	40010c00 	.word	0x40010c00

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b09c      	sub	sp, #112	; 0x70
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000916:	2238      	movs	r2, #56	; 0x38
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f007 fe3c 	bl	8008598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2220      	movs	r2, #32
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f007 fe2e 	bl	8008598 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800093c:	2301      	movs	r3, #1
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000940:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000944:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094a:	2301      	movs	r3, #1
 800094c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800094e:	2300      	movs	r3, #0
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	2302      	movs	r3, #2
 8000954:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800095c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000960:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000962:	2300      	movs	r3, #0
 8000964:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000966:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800096a:	4618      	mov	r0, r3
 800096c:	f002 faae 	bl	8002ecc <HAL_RCC_OscConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000976:	f000 fa3b 	bl	8000df0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097a:	230f      	movs	r3, #15
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097e:	2302      	movs	r3, #2
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	2102      	movs	r1, #2
 8000996:	4618      	mov	r0, r3
 8000998:	f002 fdae 	bl	80034f8 <HAL_RCC_ClockConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009a2:	f000 fa25 	bl	8000df0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80009a6:	2310      	movs	r3, #16
 80009a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 ff8d 	bl	80038d0 <HAL_RCCEx_PeriphCLKConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009bc:	f000 fa18 	bl	8000df0 <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <SystemClock_Config+0xc4>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	601a      	str	r2, [r3, #0]
}
 80009c6:	bf00      	nop
 80009c8:	3770      	adds	r7, #112	; 0x70
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	42420070 	.word	0x42420070

080009d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e8:	463b      	mov	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MX_TIM2_Init+0x98>)
 80009f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_TIM2_Init+0x98>)
 80009fa:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80009fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_TIM2_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_TIM2_Init+0x98>)
 8000a08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_TIM2_Init+0x98>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_TIM2_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a1a:	4814      	ldr	r0, [pc, #80]	; (8000a6c <MX_TIM2_Init+0x98>)
 8000a1c:	f003 f88a 	bl	8003b34 <HAL_TIM_Base_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a26:	f000 f9e3 	bl	8000df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	4619      	mov	r1, r3
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_TIM2_Init+0x98>)
 8000a38:	f003 f9d2 	bl	8003de0 <HAL_TIM_ConfigClockSource>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a42:	f000 f9d5 	bl	8000df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	4619      	mov	r1, r3
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <MX_TIM2_Init+0x98>)
 8000a54:	f003 fba2 	bl	800419c <HAL_TIMEx_MasterConfigSynchronization>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a5e:	f000 f9c7 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000011c 	.word	0x2000011c

08000a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	463b      	mov	r3, r7
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000a8e:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <MX_TIM3_Init+0x98>)
 8000a90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000a94:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000a98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aa6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ab4:	4813      	ldr	r0, [pc, #76]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000ab6:	f003 f83d 	bl	8003b34 <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ac0:	f000 f996 	bl	8000df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000ad2:	f003 f985 	bl	8003de0 <HAL_TIM_ConfigClockSource>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000adc:	f000 f988 	bl	8000df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000aee:	f003 fb55 	bl	800419c <HAL_TIMEx_MasterConfigSynchronization>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000af8:	f000 f97a 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000dc 	.word	0x200000dc
 8000b08:	40000400 	.word	0x40000400

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b26:	f043 0320 	orr.w	r3, r3, #32
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0320 	and.w	r3, r3, #32
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a11      	ldr	r2, [pc, #68]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|RHQ_Pin|LVQ_Pin 
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f64f 41e0 	movw	r1, #64736	; 0xfce0
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <MX_GPIO_Init+0x94>)
 8000b70:	f000 fd78 	bl	8001664 <HAL_GPIO_WritePin>
                          |BTN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin RHQ_Pin LVQ_Pin 
                           BH_Pin FV_Pin BTN3_Pin BTN2_Pin 
                           BTN1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|RHQ_Pin|LVQ_Pin 
 8000b74:	f64f 43e0 	movw	r3, #64736	; 0xfce0
 8000b78:	613b      	str	r3, [r7, #16]
                          |BH_Pin|FV_Pin|BTN3_Pin|BTN2_Pin 
                          |BTN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_GPIO_Init+0x94>)
 8000b8e:	f000 fc0f 	bl	80013b0 <HAL_GPIO_Init>

}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010c00 	.word	0x40010c00

08000ba4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bb4:	d17f      	bne.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x112>
	{

		// Process X output
		if (mouseDistanceX > 0) {
 8000bb6:	4b84      	ldr	r3, [pc, #528]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dd67      	ble.n	8000c90 <HAL_TIM_PeriodElapsedCallback+0xec>
			// Set the output pins according to the current phase BH RHQ FV LVQ

			if (mouseEncoderPhaseX == 0) HAL_GPIO_WritePin(BH_GPIO_Port, BH_Pin, 1);	// Set X1 to 1
 8000bc0:	4b82      	ldr	r3, [pc, #520]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d105      	bne.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x32>
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd0:	487f      	ldr	r0, [pc, #508]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000bd2:	f000 fd47 	bl	8001664 <HAL_GPIO_WritePin>
			if (mouseEncoderPhaseX == 1) HAL_GPIO_WritePin(RHQ_GPIO_Port, RHQ_Pin, 1);	// Set X2 to 1
 8000bd6:	4b7d      	ldr	r3, [pc, #500]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b25b      	sxtb	r3, r3
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d105      	bne.n	8000bec <HAL_TIM_PeriodElapsedCallback+0x48>
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be6:	487a      	ldr	r0, [pc, #488]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000be8:	f000 fd3c 	bl	8001664 <HAL_GPIO_WritePin>
			if (mouseEncoderPhaseX == 2) HAL_GPIO_WritePin(BH_GPIO_Port, BH_Pin, 0);	// Set X1 to 0
 8000bec:	4b77      	ldr	r3, [pc, #476]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d105      	bne.n	8000c02 <HAL_TIM_PeriodElapsedCallback+0x5e>
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfc:	4874      	ldr	r0, [pc, #464]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000bfe:	f000 fd31 	bl	8001664 <HAL_GPIO_WritePin>
			if (mouseEncoderPhaseX == 3) HAL_GPIO_WritePin(RHQ_GPIO_Port, RHQ_Pin, 0);	// Set X2 to 0
 8000c02:	4b72      	ldr	r3, [pc, #456]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d105      	bne.n	8000c18 <HAL_TIM_PeriodElapsedCallback+0x74>
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c12:	486f      	ldr	r0, [pc, #444]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000c14:	f000 fd26 	bl	8001664 <HAL_GPIO_WritePin>

			// Change phase
			if (mouseDirectionX == 0) mouseEncoderPhaseX--; else mouseEncoderPhaseX++;
 8000c18:	4b6e      	ldr	r3, [pc, #440]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d109      	bne.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x92>
 8000c22:	4b6a      	ldr	r3, [pc, #424]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	b25a      	sxtb	r2, r3
 8000c30:	4b66      	ldr	r3, [pc, #408]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e008      	b.n	8000c48 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8000c36:	4b65      	ldr	r3, [pc, #404]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	3301      	adds	r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	b25a      	sxtb	r2, r3
 8000c44:	4b61      	ldr	r3, [pc, #388]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000c46:	701a      	strb	r2, [r3, #0]

			// Decrement the distance left to move
			mouseDistanceX--;
 8000c48:	4b5f      	ldr	r3, [pc, #380]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	3b01      	subs	r3, #1
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	b21a      	sxth	r2, r3
 8000c56:	4b5c      	ldr	r3, [pc, #368]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000c58:	801a      	strh	r2, [r3, #0]

			// Range check the phase
			if ((mouseDirectionX == 1) && (mouseEncoderPhaseX > 3)) mouseEncoderPhaseX = 0;
 8000c5a:	4b5e      	ldr	r3, [pc, #376]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d107      	bne.n	8000c74 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8000c64:	4b59      	ldr	r3, [pc, #356]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	dd02      	ble.n	8000c74 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8000c6e:	4b57      	ldr	r3, [pc, #348]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
			if ((mouseDirectionX == 0) && (mouseEncoderPhaseX < 0)) mouseEncoderPhaseX = 3;
 8000c74:	4b57      	ldr	r3, [pc, #348]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d10b      	bne.n	8000c96 <HAL_TIM_PeriodElapsedCallback+0xf2>
 8000c7e:	4b53      	ldr	r3, [pc, #332]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	b25b      	sxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	da06      	bge.n	8000c96 <HAL_TIM_PeriodElapsedCallback+0xf2>
 8000c88:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	701a      	strb	r2, [r3, #0]
 8000c8e:	e002      	b.n	8000c96 <HAL_TIM_PeriodElapsedCallback+0xf2>
		} else {
			// Reset the phase if the mouse isn't moving
			mouseEncoderPhaseX = 0;
 8000c90:	4b4e      	ldr	r3, [pc, #312]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
		}

		// Set the timer top value for the next interrupt
		if (xTimerTop ==0)
 8000c96:	4b50      	ldr	r3, [pc, #320]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d104      	bne.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x106>
		{
			htim->Instance->ARR = 1;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ca8:	e005      	b.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x112>
		}
		else
		{
			htim->Instance->ARR = xTimerTop;
 8000caa:	4b4b      	ldr	r3, [pc, #300]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
		}

	}

	if (htim->Instance == TIM3)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a48      	ldr	r2, [pc, #288]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d17f      	bne.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x21c>
	{

		// Process Y output
			if (mouseDistanceY > 0) {
 8000cc0:	4b47      	ldr	r3, [pc, #284]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	dd67      	ble.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0x1f6>
				// Set the output pins according to the current phase
				if (mouseEncoderPhaseY == 3) HAL_GPIO_WritePin(FV_GPIO_Port, LVQ_Pin, 0);	// Set Y1 to 0
 8000cca:	4b46      	ldr	r3, [pc, #280]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d105      	bne.n	8000ce0 <HAL_TIM_PeriodElapsedCallback+0x13c>
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cda:	483d      	ldr	r0, [pc, #244]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000cdc:	f000 fcc2 	bl	8001664 <HAL_GPIO_WritePin>
				if (mouseEncoderPhaseY == 2) HAL_GPIO_WritePin(LVQ_GPIO_Port, FV_Pin, 0);	// Set Y2 to 0
 8000ce0:	4b40      	ldr	r3, [pc, #256]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d105      	bne.n	8000cf6 <HAL_TIM_PeriodElapsedCallback+0x152>
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cf0:	4837      	ldr	r0, [pc, #220]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000cf2:	f000 fcb7 	bl	8001664 <HAL_GPIO_WritePin>
				if (mouseEncoderPhaseY == 1) HAL_GPIO_WritePin(FV_GPIO_Port, LVQ_Pin, 1);	// Set Y1 to 1
 8000cf6:	4b3b      	ldr	r3, [pc, #236]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d105      	bne.n	8000d0c <HAL_TIM_PeriodElapsedCallback+0x168>
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d06:	4832      	ldr	r0, [pc, #200]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000d08:	f000 fcac 	bl	8001664 <HAL_GPIO_WritePin>
				if (mouseEncoderPhaseY == 0) HAL_GPIO_WritePin(LVQ_GPIO_Port, FV_Pin, 1);	// Set Y2 to 1
 8000d0c:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d105      	bne.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x17e>
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d1c:	482c      	ldr	r0, [pc, #176]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000d1e:	f000 fca1 	bl	8001664 <HAL_GPIO_WritePin>

				// Change phase
				if (mouseDirectionY == 0) mouseEncoderPhaseY--; else mouseEncoderPhaseY++;
 8000d22:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d109      	bne.n	8000d40 <HAL_TIM_PeriodElapsedCallback+0x19c>
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	3b01      	subs	r3, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	b25a      	sxtb	r2, r3
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	e008      	b.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x1ae>
 8000d40:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b25b      	sxtb	r3, r3
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	b25a      	sxtb	r2, r3
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000d50:	701a      	strb	r2, [r3, #0]

				// Decrement the distance left to move
				mouseDistanceY--;
 8000d52:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000d62:	801a      	strh	r2, [r3, #0]

				// Range check the phase
				if ((mouseDirectionY == 1) && (mouseEncoderPhaseY > 3)) mouseEncoderPhaseY = 0;
 8000d64:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d107      	bne.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0x1da>
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	dd02      	ble.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0x1da>
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
				if ((mouseDirectionY == 0) && (mouseEncoderPhaseY < 0)) mouseEncoderPhaseY = 3;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10b      	bne.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x1fc>
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	da06      	bge.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x1fc>
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000d94:	2203      	movs	r2, #3
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e002      	b.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x1fc>
			} else {
				// Reset the phase if the mouse isn't moving
				mouseEncoderPhaseY = 0;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
			}

			// Set the timer top value for the next interrupt
			if (yTimerTop == 0)
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d104      	bne.n	8000db4 <HAL_TIM_PeriodElapsedCallback+0x210>
			{
				htim->Instance->ARR = 1;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2201      	movs	r2, #1
 8000db0:	62da      	str	r2, [r3, #44]	; 0x2c
			}

	}


}
 8000db2:	e005      	b.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x21c>
				htim->Instance->ARR = yTimerTop;
 8000db4:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200000bc 	.word	0x200000bc
 8000dcc:	200000b9 	.word	0x200000b9
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	200000b8 	.word	0x200000b8
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	40000400 	.word	0x40000400
 8000de0:	200000be 	.word	0x200000be
 8000de4:	200000bb 	.word	0x200000bb
 8000de8:	200000ba 	.word	0x200000ba
 8000dec:	20000001 	.word	0x20000001

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_MspInit+0x60>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_MspInit+0x60>)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010000 	.word	0x40010000

08000e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e70:	d114      	bne.n	8000e9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_TIM_Base_MspInit+0x78>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <HAL_TIM_Base_MspInit+0x78>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	61d3      	str	r3, [r2, #28]
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_TIM_Base_MspInit+0x78>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	201c      	movs	r0, #28
 8000e90:	f000 fa57 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e94:	201c      	movs	r0, #28
 8000e96:	f000 fa70 	bl	800137a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e9a:	e018      	b.n	8000ece <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <HAL_TIM_Base_MspInit+0x7c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d113      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_TIM_Base_MspInit+0x78>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HAL_TIM_Base_MspInit+0x78>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_TIM_Base_MspInit+0x78>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	201d      	movs	r0, #29
 8000ec4:	f000 fa3d 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ec8:	201d      	movs	r0, #29
 8000eca:	f000 fa56 	bl	800137a <HAL_NVIC_EnableIRQ>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40000400 	.word	0x40000400

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <HardFault_Handler+0x4>

08000ef2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <MemManage_Handler+0x4>

08000ef8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <BusFault_Handler+0x4>

08000efe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <UsageFault_Handler+0x4>

08000f04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2c:	f000 f8f4 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <TIM2_IRQHandler+0x10>)
 8000f3a:	f002 fe49 	bl	8003bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000011c 	.word	0x2000011c

08000f48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <TIM3_IRQHandler+0x10>)
 8000f4e:	f002 fe3f 	bl	8003bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000dc 	.word	0x200000dc

08000f5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <OTG_FS_IRQHandler+0x10>)
 8000f62:	f000 fe23 	bl	8001bac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000550 	.word	0x20000550

08000f70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x50>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x16>
		heap_end = &end;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <_sbrk+0x50>)
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <_sbrk+0x54>)
 8000f84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <_sbrk+0x50>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <_sbrk+0x50>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	466a      	mov	r2, sp
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d907      	bls.n	8000faa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f9a:	f007 fae7 	bl	800856c <__errno>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa8:	e006      	b.n	8000fb8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <_sbrk+0x50>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <_sbrk+0x50>)
 8000fb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200000c0 	.word	0x200000c0
 8000fc4:	20000818 	.word	0x20000818

08000fc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <SystemInit+0x70>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a19      	ldr	r2, [pc, #100]	; (8001038 <SystemInit+0x70>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <SystemInit+0x70>)
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	4916      	ldr	r1, [pc, #88]	; (8001038 <SystemInit+0x70>)
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <SystemInit+0x74>)
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <SystemInit+0x70>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a13      	ldr	r2, [pc, #76]	; (8001038 <SystemInit+0x70>)
 8000fea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <SystemInit+0x70>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <SystemInit+0x70>)
 8000ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <SystemInit+0x70>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <SystemInit+0x70>)
 8001006:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800100a:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <SystemInit+0x70>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a09      	ldr	r2, [pc, #36]	; (8001038 <SystemInit+0x70>)
 8001012:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001016:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <SystemInit+0x70>)
 800101a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800101e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <SystemInit+0x70>)
 8001022:	2200      	movs	r2, #0
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <SystemInit+0x78>)
 8001028:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800102c:	609a      	str	r2, [r3, #8]
#endif 
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000
 800103c:	f0ff0000 	.word	0xf0ff0000
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001044:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001046:	e003      	b.n	8001050 <LoopCopyDataInit>

08001048 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 800104a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800104c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800104e:	3104      	adds	r1, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8001054:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001056:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001058:	d3f6      	bcc.n	8001048 <CopyDataInit>
  ldr r2, =_sbss
 800105a:	4a09      	ldr	r2, [pc, #36]	; (8001080 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 800105c:	e002      	b.n	8001064 <LoopFillZerobss>

0800105e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001060:	f842 3b04 	str.w	r3, [r2], #4

08001064 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8001066:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001068:	d3f9      	bcc.n	800105e <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800106a:	f7ff ffad 	bl	8000fc8 <SystemInit>
/* Call the application's entry point.*/
  bl main
 800106e:	f7ff fb23 	bl	80006b8 <main>
  bx lr
 8001072:	4770      	bx	lr
  ldr r3, =_sidata
 8001074:	08008778 	.word	0x08008778
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800107c:	2000009c 	.word	0x2000009c
  ldr r2, =_sbss
 8001080:	2000009c 	.word	0x2000009c
  ldr r3, = _ebss
 8001084:	20000818 	.word	0x20000818

08001088 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC1_2_IRQHandler>
	...

0800108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_Init+0x28>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_Init+0x28>)
 8001096:	f043 0310 	orr.w	r3, r3, #16
 800109a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109c:	2003      	movs	r0, #3
 800109e:	f000 f945 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f808 	bl	80010b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a8:	f7ff fea8 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40022000 	.word	0x40022000

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x54>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x58>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f95d 	bl	8001396 <HAL_SYSTICK_Config>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00e      	b.n	8001104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d80a      	bhi.n	8001102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f4:	f000 f925 	bl	8001342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <HAL_InitTick+0x5c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000004 	.word	0x20000004
 8001110:	2000000c 	.word	0x2000000c
 8001114:	20000008 	.word	0x20000008

08001118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <HAL_IncTick+0x1c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_IncTick+0x20>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a03      	ldr	r2, [pc, #12]	; (8001138 <HAL_IncTick+0x20>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	2000000c 	.word	0x2000000c
 8001138:	2000015c 	.word	0x2000015c

0800113c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b02      	ldr	r3, [pc, #8]	; (800114c <HAL_GetTick+0x10>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	2000015c 	.word	0x2000015c

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff fff0 	bl	800113c <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_Delay+0x40>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffe0 	bl	800113c <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000000c 	.word	0x2000000c

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4906      	ldr	r1, [pc, #24]	; (800122c <__NVIC_EnableIRQ+0x34>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800130c:	f7ff ff90 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff2d 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001354:	f7ff ff42 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff ff90 	bl	8001284 <NVIC_EncodePriority>
 8001364:	4602      	mov	r2, r0
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff5f 	bl	8001230 <__NVIC_SetPriority>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff35 	bl	80011f8 <__NVIC_EnableIRQ>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffa2 	bl	80012e8 <SysTick_Config>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b08b      	sub	sp, #44	; 0x2c
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	e127      	b.n	8001614 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013c4:	2201      	movs	r2, #1
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	429a      	cmp	r2, r3
 80013de:	f040 8116 	bne.w	800160e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b12      	cmp	r3, #18
 80013e8:	d034      	beq.n	8001454 <HAL_GPIO_Init+0xa4>
 80013ea:	2b12      	cmp	r3, #18
 80013ec:	d80d      	bhi.n	800140a <HAL_GPIO_Init+0x5a>
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d02b      	beq.n	800144a <HAL_GPIO_Init+0x9a>
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d804      	bhi.n	8001400 <HAL_GPIO_Init+0x50>
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d031      	beq.n	800145e <HAL_GPIO_Init+0xae>
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d01c      	beq.n	8001438 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013fe:	e048      	b.n	8001492 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001400:	2b03      	cmp	r3, #3
 8001402:	d043      	beq.n	800148c <HAL_GPIO_Init+0xdc>
 8001404:	2b11      	cmp	r3, #17
 8001406:	d01b      	beq.n	8001440 <HAL_GPIO_Init+0x90>
          break;
 8001408:	e043      	b.n	8001492 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800140a:	4a89      	ldr	r2, [pc, #548]	; (8001630 <HAL_GPIO_Init+0x280>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d026      	beq.n	800145e <HAL_GPIO_Init+0xae>
 8001410:	4a87      	ldr	r2, [pc, #540]	; (8001630 <HAL_GPIO_Init+0x280>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d806      	bhi.n	8001424 <HAL_GPIO_Init+0x74>
 8001416:	4a87      	ldr	r2, [pc, #540]	; (8001634 <HAL_GPIO_Init+0x284>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d020      	beq.n	800145e <HAL_GPIO_Init+0xae>
 800141c:	4a86      	ldr	r2, [pc, #536]	; (8001638 <HAL_GPIO_Init+0x288>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01d      	beq.n	800145e <HAL_GPIO_Init+0xae>
          break;
 8001422:	e036      	b.n	8001492 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001424:	4a85      	ldr	r2, [pc, #532]	; (800163c <HAL_GPIO_Init+0x28c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d019      	beq.n	800145e <HAL_GPIO_Init+0xae>
 800142a:	4a85      	ldr	r2, [pc, #532]	; (8001640 <HAL_GPIO_Init+0x290>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d016      	beq.n	800145e <HAL_GPIO_Init+0xae>
 8001430:	4a84      	ldr	r2, [pc, #528]	; (8001644 <HAL_GPIO_Init+0x294>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0xae>
          break;
 8001436:	e02c      	b.n	8001492 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e028      	b.n	8001492 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	3304      	adds	r3, #4
 8001446:	623b      	str	r3, [r7, #32]
          break;
 8001448:	e023      	b.n	8001492 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	3308      	adds	r3, #8
 8001450:	623b      	str	r3, [r7, #32]
          break;
 8001452:	e01e      	b.n	8001492 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	330c      	adds	r3, #12
 800145a:	623b      	str	r3, [r7, #32]
          break;
 800145c:	e019      	b.n	8001492 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001466:	2304      	movs	r3, #4
 8001468:	623b      	str	r3, [r7, #32]
          break;
 800146a:	e012      	b.n	8001492 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d105      	bne.n	8001480 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001474:	2308      	movs	r3, #8
 8001476:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	611a      	str	r2, [r3, #16]
          break;
 800147e:	e008      	b.n	8001492 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001480:	2308      	movs	r3, #8
 8001482:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	615a      	str	r2, [r3, #20]
          break;
 800148a:	e002      	b.n	8001492 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
          break;
 8001490:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2bff      	cmp	r3, #255	; 0xff
 8001496:	d801      	bhi.n	800149c <HAL_GPIO_Init+0xec>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	e001      	b.n	80014a0 <HAL_GPIO_Init+0xf0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3304      	adds	r3, #4
 80014a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2bff      	cmp	r3, #255	; 0xff
 80014a6:	d802      	bhi.n	80014ae <HAL_GPIO_Init+0xfe>
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_Init+0x104>
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	3b08      	subs	r3, #8
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	210f      	movs	r1, #15
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	401a      	ands	r2, r3
 80014c6:	6a39      	ldr	r1, [r7, #32]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	431a      	orrs	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 8096 	beq.w	800160e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014e2:	4b59      	ldr	r3, [pc, #356]	; (8001648 <HAL_GPIO_Init+0x298>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	4a58      	ldr	r2, [pc, #352]	; (8001648 <HAL_GPIO_Init+0x298>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6193      	str	r3, [r2, #24]
 80014ee:	4b56      	ldr	r3, [pc, #344]	; (8001648 <HAL_GPIO_Init+0x298>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014fa:	4a54      	ldr	r2, [pc, #336]	; (800164c <HAL_GPIO_Init+0x29c>)
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4013      	ands	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4b      	ldr	r2, [pc, #300]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_GPIO_Init+0x19e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4a      	ldr	r2, [pc, #296]	; (8001654 <HAL_GPIO_Init+0x2a4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d00d      	beq.n	800154a <HAL_GPIO_Init+0x19a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a49      	ldr	r2, [pc, #292]	; (8001658 <HAL_GPIO_Init+0x2a8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d007      	beq.n	8001546 <HAL_GPIO_Init+0x196>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a48      	ldr	r2, [pc, #288]	; (800165c <HAL_GPIO_Init+0x2ac>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <HAL_GPIO_Init+0x192>
 800153e:	2303      	movs	r3, #3
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x1a0>
 8001542:	2304      	movs	r3, #4
 8001544:	e004      	b.n	8001550 <HAL_GPIO_Init+0x1a0>
 8001546:	2302      	movs	r3, #2
 8001548:	e002      	b.n	8001550 <HAL_GPIO_Init+0x1a0>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_GPIO_Init+0x1a0>
 800154e:	2300      	movs	r3, #0
 8001550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001552:	f002 0203 	and.w	r2, r2, #3
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	4093      	lsls	r3, r2
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001560:	493a      	ldr	r1, [pc, #232]	; (800164c <HAL_GPIO_Init+0x29c>)
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	089b      	lsrs	r3, r3, #2
 8001566:	3302      	adds	r3, #2
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800157a:	4b39      	ldr	r3, [pc, #228]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4938      	ldr	r1, [pc, #224]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
 8001586:	e006      	b.n	8001596 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001588:	4b35      	ldr	r3, [pc, #212]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	43db      	mvns	r3, r3
 8001590:	4933      	ldr	r1, [pc, #204]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 8001592:	4013      	ands	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d006      	beq.n	80015b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	492e      	ldr	r1, [pc, #184]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]
 80015ae:	e006      	b.n	80015be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015b0:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	4929      	ldr	r1, [pc, #164]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015ca:	4b25      	ldr	r3, [pc, #148]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	4924      	ldr	r1, [pc, #144]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
 80015d6:	e006      	b.n	80015e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	43db      	mvns	r3, r3
 80015e0:	491f      	ldr	r1, [pc, #124]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d006      	beq.n	8001600 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	491a      	ldr	r1, [pc, #104]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60cb      	str	r3, [r1, #12]
 80015fe:	e006      	b.n	800160e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	43db      	mvns	r3, r3
 8001608:	4915      	ldr	r1, [pc, #84]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 800160a:	4013      	ands	r3, r2
 800160c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	3301      	adds	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	fa22 f303 	lsr.w	r3, r2, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	f47f aed0 	bne.w	80013c4 <HAL_GPIO_Init+0x14>
  }
}
 8001624:	bf00      	nop
 8001626:	372c      	adds	r7, #44	; 0x2c
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	10210000 	.word	0x10210000
 8001634:	10110000 	.word	0x10110000
 8001638:	10120000 	.word	0x10120000
 800163c:	10310000 	.word	0x10310000
 8001640:	10320000 	.word	0x10320000
 8001644:	10220000 	.word	0x10220000
 8001648:	40021000 	.word	0x40021000
 800164c:	40010000 	.word	0x40010000
 8001650:	40010800 	.word	0x40010800
 8001654:	40010c00 	.word	0x40010c00
 8001658:	40011000 	.word	0x40011000
 800165c:	40011400 	.word	0x40011400
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001680:	e003      	b.n	800168a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	041a      	lsls	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	611a      	str	r2, [r3, #16]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001696:	b08f      	sub	sp, #60	; 0x3c
 8001698:	af0a      	add	r7, sp, #40	; 0x28
 800169a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e054      	b.n	8001750 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d106      	bne.n	80016c6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f006 fd25 	bl	8008110 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2203      	movs	r2, #3
 80016ca:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fe07 	bl	80042f8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	687e      	ldr	r6, [r7, #4]
 80016f2:	466d      	mov	r5, sp
 80016f4:	f106 0410 	add.w	r4, r6, #16
 80016f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001700:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001704:	e885 0003 	stmia.w	r5, {r0, r1}
 8001708:	1d33      	adds	r3, r6, #4
 800170a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800170c:	6838      	ldr	r0, [r7, #0]
 800170e:	f002 fd9b 	bl	8004248 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2101      	movs	r1, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fdfd 	bl	8004318 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	687e      	ldr	r6, [r7, #4]
 8001726:	466d      	mov	r5, sp
 8001728:	f106 0410 	add.w	r4, r6, #16
 800172c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001734:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001738:	e885 0003 	stmia.w	r5, {r0, r1}
 800173c:	1d33      	adds	r3, r6, #4
 800173e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f002 ff01 	bl	8004548 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001758 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af04      	add	r7, sp, #16
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	4608      	mov	r0, r1
 8001762:	4611      	mov	r1, r2
 8001764:	461a      	mov	r2, r3
 8001766:	4603      	mov	r3, r0
 8001768:	70fb      	strb	r3, [r7, #3]
 800176a:	460b      	mov	r3, r1
 800176c:	70bb      	strb	r3, [r7, #2]
 800176e:	4613      	mov	r3, r2
 8001770:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_HCD_HC_Init+0x28>
 800177c:	2302      	movs	r3, #2
 800177e:	e07f      	b.n	8001880 <HAL_HCD_HC_Init+0x128>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	440b      	add	r3, r1
 8001796:	333d      	adds	r3, #61	; 0x3d
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	3338      	adds	r3, #56	; 0x38
 80017ac:	787a      	ldrb	r2, [r7, #1]
 80017ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	3340      	adds	r3, #64	; 0x40
 80017c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017c2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	440b      	add	r3, r1
 80017d2:	3339      	adds	r3, #57	; 0x39
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	333f      	adds	r3, #63	; 0x3f
 80017e8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017ee:	78fa      	ldrb	r2, [r7, #3]
 80017f0:	78bb      	ldrb	r3, [r7, #2]
 80017f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017f6:	b2d8      	uxtb	r0, r3
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	333a      	adds	r3, #58	; 0x3a
 8001806:	4602      	mov	r2, r0
 8001808:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800180a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800180e:	2b00      	cmp	r3, #0
 8001810:	da0a      	bge.n	8001828 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	333b      	adds	r3, #59	; 0x3b
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e009      	b.n	800183c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	333b      	adds	r3, #59	; 0x3b
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	333c      	adds	r3, #60	; 0x3c
 800184c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001850:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	787c      	ldrb	r4, [r7, #1]
 8001858:	78ba      	ldrb	r2, [r7, #2]
 800185a:	78f9      	ldrb	r1, [r7, #3]
 800185c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800185e:	9302      	str	r3, [sp, #8]
 8001860:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	f897 3020 	ldrb.w	r3, [r7, #32]
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	4623      	mov	r3, r4
 800186e:	f002 ffab 	bl	80047c8 <USB_HC_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}

08001888 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_HCD_HC_Halt+0x1e>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e00f      	b.n	80018c6 <HAL_HCD_HC_Halt+0x3e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 f988 	bl	8004bcc <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	4608      	mov	r0, r1
 80018da:	4611      	mov	r1, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	4603      	mov	r3, r0
 80018e0:	70fb      	strb	r3, [r7, #3]
 80018e2:	460b      	mov	r3, r1
 80018e4:	70bb      	strb	r3, [r7, #2]
 80018e6:	4613      	mov	r3, r2
 80018e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	440b      	add	r3, r1
 80018f8:	333b      	adds	r3, #59	; 0x3b
 80018fa:	78ba      	ldrb	r2, [r7, #2]
 80018fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	333f      	adds	r3, #63	; 0x3f
 800190e:	787a      	ldrb	r2, [r7, #1]
 8001910:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001912:	7c3b      	ldrb	r3, [r7, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d114      	bne.n	8001942 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	440b      	add	r3, r1
 8001926:	3342      	adds	r3, #66	; 0x42
 8001928:	2203      	movs	r2, #3
 800192a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800192c:	78fa      	ldrb	r2, [r7, #3]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	333d      	adds	r3, #61	; 0x3d
 800193c:	7f3a      	ldrb	r2, [r7, #28]
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e009      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	3342      	adds	r3, #66	; 0x42
 8001952:	2202      	movs	r2, #2
 8001954:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001956:	787b      	ldrb	r3, [r7, #1]
 8001958:	2b03      	cmp	r3, #3
 800195a:	f200 80d6 	bhi.w	8001b0a <HAL_HCD_HC_SubmitRequest+0x23a>
 800195e:	a201      	add	r2, pc, #4	; (adr r2, 8001964 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001964:	08001975 	.word	0x08001975
 8001968:	08001af5 	.word	0x08001af5
 800196c:	080019e1 	.word	0x080019e1
 8001970:	08001a6b 	.word	0x08001a6b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001974:	7c3b      	ldrb	r3, [r7, #16]
 8001976:	2b01      	cmp	r3, #1
 8001978:	f040 80c9 	bne.w	8001b0e <HAL_HCD_HC_SubmitRequest+0x23e>
 800197c:	78bb      	ldrb	r3, [r7, #2]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f040 80c5 	bne.w	8001b0e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001984:	8b3b      	ldrh	r3, [r7, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	3351      	adds	r3, #81	; 0x51
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	3351      	adds	r3, #81	; 0x51
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10a      	bne.n	80019ca <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	440b      	add	r3, r1
 80019c2:	3342      	adds	r3, #66	; 0x42
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019c8:	e0a1      	b.n	8001b0e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	3342      	adds	r3, #66	; 0x42
 80019da:	2202      	movs	r2, #2
 80019dc:	701a      	strb	r2, [r3, #0]
      break;
 80019de:	e096      	b.n	8001b0e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019e0:	78bb      	ldrb	r3, [r7, #2]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d120      	bne.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	3351      	adds	r3, #81	; 0x51
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10a      	bne.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	3342      	adds	r3, #66	; 0x42
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a10:	e07e      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a12:	78fa      	ldrb	r2, [r7, #3]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	440b      	add	r3, r1
 8001a20:	3342      	adds	r3, #66	; 0x42
 8001a22:	2202      	movs	r2, #2
 8001a24:	701a      	strb	r2, [r3, #0]
      break;
 8001a26:	e073      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	3350      	adds	r3, #80	; 0x50
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10a      	bne.n	8001a54 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3342      	adds	r3, #66	; 0x42
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
      break;
 8001a52:	e05d      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	3342      	adds	r3, #66	; 0x42
 8001a64:	2202      	movs	r2, #2
 8001a66:	701a      	strb	r2, [r3, #0]
      break;
 8001a68:	e052      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a6a:	78bb      	ldrb	r3, [r7, #2]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d120      	bne.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3351      	adds	r3, #81	; 0x51
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10a      	bne.n	8001a9c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a86:	78fa      	ldrb	r2, [r7, #3]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	3342      	adds	r3, #66	; 0x42
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a9a:	e039      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3342      	adds	r3, #66	; 0x42
 8001aac:	2202      	movs	r2, #2
 8001aae:	701a      	strb	r2, [r3, #0]
      break;
 8001ab0:	e02e      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ab2:	78fa      	ldrb	r2, [r7, #3]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	3350      	adds	r3, #80	; 0x50
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10a      	bne.n	8001ade <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3342      	adds	r3, #66	; 0x42
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
      break;
 8001adc:	e018      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	440b      	add	r3, r1
 8001aec:	3342      	adds	r3, #66	; 0x42
 8001aee:	2202      	movs	r2, #2
 8001af0:	701a      	strb	r2, [r3, #0]
      break;
 8001af2:	e00d      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	440b      	add	r3, r1
 8001b02:	3342      	adds	r3, #66	; 0x42
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
      break;
 8001b08:	e002      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001b0a:	bf00      	nop
 8001b0c:	e000      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001b0e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b10:	78fa      	ldrb	r2, [r7, #3]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3344      	adds	r3, #68	; 0x44
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b24:	78fa      	ldrb	r2, [r7, #3]
 8001b26:	8b39      	ldrh	r1, [r7, #24]
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4403      	add	r3, r0
 8001b34:	3348      	adds	r3, #72	; 0x48
 8001b36:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	440b      	add	r3, r1
 8001b46:	335c      	adds	r3, #92	; 0x5c
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b4c:	78fa      	ldrb	r2, [r7, #3]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	334c      	adds	r3, #76	; 0x4c
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b60:	78fa      	ldrb	r2, [r7, #3]
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	440b      	add	r3, r1
 8001b6e:	3339      	adds	r3, #57	; 0x39
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	335d      	adds	r3, #93	; 0x5d
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	3338      	adds	r3, #56	; 0x38
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f002 ff05 	bl	80049ac <USB_HC_StartXfer>
 8001ba2:	4603      	mov	r3, r0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f002 fc80 	bl	80044c8 <USB_GetMode>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	f040 80ef 	bne.w	8001dae <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 fc65 	bl	80044a4 <USB_ReadInterrupts>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80e5 	beq.w	8001dac <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 fc5c 	bl	80044a4 <USB_ReadInterrupts>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bf6:	d104      	bne.n	8001c02 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 fc4c 	bl	80044a4 <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c16:	d104      	bne.n	8001c22 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f002 fc3c 	bl	80044a4 <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c36:	d104      	bne.n	8001c42 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 fc2c 	bl	80044a4 <USB_ReadInterrupts>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d103      	bne.n	8001c5e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 fc1e 	bl	80044a4 <USB_ReadInterrupts>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c72:	d115      	bne.n	8001ca0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c7c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d108      	bne.n	8001ca0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f006 fa7e 	bl	8008190 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 fcd2 	bl	8004644 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 fbfd 	bl	80044a4 <USB_ReadInterrupts>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb4:	d102      	bne.n	8001cbc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f001 f894 	bl	8002de4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f002 fbef 	bl	80044a4 <USB_ReadInterrupts>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d106      	bne.n	8001cde <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f006 fa41 	bl	8008158 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2208      	movs	r2, #8
 8001cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 fbde 	bl	80044a4 <USB_ReadInterrupts>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cf2:	d138      	bne.n	8001d66 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 ff57 	bl	8004bac <USB_HC_ReadInterrupt>
 8001cfe:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e025      	b.n	8001d52 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d018      	beq.n	8001d4c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	015a      	lsls	r2, r3, #5
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4413      	add	r3, r2
 8001d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d30:	d106      	bne.n	8001d40 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4619      	mov	r1, r3
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f8b9 	bl	8001eb0 <HCD_HC_IN_IRQHandler>
 8001d3e:	e005      	b.n	8001d4c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fc4b 	bl	80025e2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d3d4      	bcc.n	8001d06 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f002 fb9a 	bl	80044a4 <USB_ReadInterrupts>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b10      	cmp	r3, #16
 8001d78:	d101      	bne.n	8001d7e <HAL_HCD_IRQHandler+0x1d2>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_HCD_IRQHandler+0x1d4>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d014      	beq.n	8001dae <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0210 	bic.w	r2, r2, #16
 8001d92:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 ff79 	bl	8002c8c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0210 	orr.w	r2, r2, #16
 8001da8:	619a      	str	r2, [r3, #24]
 8001daa:	e000      	b.n	8001dae <HAL_HCD_IRQHandler+0x202>
      return;
 8001dac:	bf00      	nop
    }
  }
}
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_HCD_Start+0x16>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e013      	b.n	8001df2 <HAL_HCD_Start+0x3e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 fa7e 	bl	80042d8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2101      	movs	r1, #1
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fc91 	bl	800470a <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_HCD_Stop+0x16>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e00d      	b.n	8001e2c <HAL_HCD_Stop+0x32>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 ffd3 	bl	8004dc8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 fc38 	bl	80046b6 <USB_ResetPort>
 8001e46:	4603      	mov	r3, r0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	335c      	adds	r3, #92	; 0x5c
 8001e6c:	781b      	ldrb	r3, [r3, #0]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 fc8e 	bl	80047a6 <USB_GetCurrentFrame>
 8001e8a:	4603      	mov	r3, r0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 fc6a 	bl	800477a <USB_GetHostSpeed>
 8001ea6:	4603      	mov	r3, r0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d119      	bne.n	8001f14 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	461a      	mov	r2, r3
 8001eee:	2304      	movs	r3, #4
 8001ef0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	0151      	lsls	r1, r2, #5
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	440a      	add	r2, r1
 8001f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	60d3      	str	r3, [r2, #12]
 8001f12:	e095      	b.n	8002040 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d109      	bne.n	8001f3e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	461a      	mov	r2, r3
 8001f38:	2320      	movs	r3, #32
 8001f3a:	6093      	str	r3, [r2, #8]
 8001f3c:	e080      	b.n	8002040 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	015a      	lsls	r2, r3, #5
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d134      	bne.n	8001fbe <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	0151      	lsls	r1, r2, #5
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	440a      	add	r2, r1
 8001f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	335d      	adds	r3, #93	; 0x5d
 8001f84:	2205      	movs	r2, #5
 8001f86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	2310      	movs	r3, #16
 8001f98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2308      	movs	r3, #8
 8001faa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 fe08 	bl	8004bcc <USB_HC_Halt>
 8001fbc:	e040      	b.n	8002040 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd4:	d134      	bne.n	8002040 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	0151      	lsls	r1, r2, #5
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	440a      	add	r2, r1
 8001fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f002 fde3 	bl	8004bcc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002012:	461a      	mov	r2, r3
 8002014:	2310      	movs	r3, #16
 8002016:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	335d      	adds	r3, #93	; 0x5d
 8002028:	2208      	movs	r2, #8
 800202a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002038:	461a      	mov	r2, r3
 800203a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800203e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002056:	d122      	bne.n	800209e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	015a      	lsls	r2, r3, #5
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4413      	add	r3, r2
 8002060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	0151      	lsls	r1, r2, #5
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	440a      	add	r2, r1
 800206e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f002 fda2 	bl	8004bcc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4413      	add	r3, r2
 8002090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002094:	461a      	mov	r2, r3
 8002096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800209a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800209c:	e29d      	b.n	80025da <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	f040 80c7 	bne.w	8002244 <HCD_HC_IN_IRQHandler+0x394>
    hhcd->hc[ch_num].state = HC_XFRC;
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	335d      	adds	r3, #93	; 0x5d
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	3358      	adds	r3, #88	; 0x58
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ea:	461a      	mov	r2, r3
 80020ec:	2301      	movs	r3, #1
 80020ee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	333f      	adds	r3, #63	; 0x3f
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	333f      	adds	r3, #63	; 0x3f
 8002116:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002118:	2b02      	cmp	r3, #2
 800211a:	d121      	bne.n	8002160 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4413      	add	r3, r2
 8002124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	0151      	lsls	r1, r2, #5
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	440a      	add	r2, r1
 8002132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f002 fd40 	bl	8004bcc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002158:	461a      	mov	r2, r3
 800215a:	2310      	movs	r3, #16
 800215c:	6093      	str	r3, [r2, #8]
 800215e:	e05a      	b.n	8002216 <HCD_HC_IN_IRQHandler+0x366>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	333f      	adds	r3, #63	; 0x3f
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d12a      	bne.n	80021cc <HCD_HC_IN_IRQHandler+0x31c>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	0151      	lsls	r1, r2, #5
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	440a      	add	r2, r1
 800218c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002190:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002194:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	335c      	adds	r3, #92	; 0x5c
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	b2d8      	uxtb	r0, r3
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	335c      	adds	r3, #92	; 0x5c
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4601      	mov	r1, r0
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f005 fff1 	bl	80081ac <HAL_HCD_HC_NotifyURBChange_Callback>
 80021ca:	e024      	b.n	8002216 <HCD_HC_IN_IRQHandler+0x366>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	333f      	adds	r3, #63	; 0x3f
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d119      	bne.n	8002216 <HCD_HC_IN_IRQHandler+0x366>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	335c      	adds	r3, #92	; 0x5c
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	b2d8      	uxtb	r0, r3
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	335c      	adds	r3, #92	; 0x5c
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4601      	mov	r1, r0
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f005 ffcb 	bl	80081ac <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	3350      	adds	r3, #80	; 0x50
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	f083 0301 	eor.w	r3, r3, #1
 800222c:	b2d8      	uxtb	r0, r3
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	440b      	add	r3, r1
 800223c:	3350      	adds	r3, #80	; 0x50
 800223e:	4602      	mov	r2, r0
 8002240:	701a      	strb	r2, [r3, #0]
}
 8002242:	e1ca      	b.n	80025da <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b02      	cmp	r3, #2
 8002258:	f040 80f1 	bne.w	800243e <HCD_HC_IN_IRQHandler+0x58e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	0151      	lsls	r1, r2, #5
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	440a      	add	r2, r1
 8002272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002276:	f023 0302 	bic.w	r3, r3, #2
 800227a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	335d      	adds	r3, #93	; 0x5d
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d10a      	bne.n	80022a8 <HCD_HC_IN_IRQHandler+0x3f8>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	335c      	adds	r3, #92	; 0x5c
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e0b0      	b.n	800240a <HCD_HC_IN_IRQHandler+0x55a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	335d      	adds	r3, #93	; 0x5d
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b05      	cmp	r3, #5
 80022bc:	d10a      	bne.n	80022d4 <HCD_HC_IN_IRQHandler+0x424>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	335c      	adds	r3, #92	; 0x5c
 80022ce:	2205      	movs	r2, #5
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e09a      	b.n	800240a <HCD_HC_IN_IRQHandler+0x55a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	440b      	add	r3, r1
 80022e2:	335d      	adds	r3, #93	; 0x5d
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d00a      	beq.n	8002300 <HCD_HC_IN_IRQHandler+0x450>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	335d      	adds	r3, #93	; 0x5d
 80022fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d156      	bne.n	80023ae <HCD_HC_IN_IRQHandler+0x4fe>
      hhcd->hc[ch_num].ErrCnt++;
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	440b      	add	r3, r1
 800230e:	3358      	adds	r3, #88	; 0x58
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	1c59      	adds	r1, r3, #1
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4403      	add	r3, r0
 8002322:	3358      	adds	r3, #88	; 0x58
 8002324:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	3358      	adds	r3, #88	; 0x58
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d914      	bls.n	8002366 <HCD_HC_IN_IRQHandler+0x4b6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	3358      	adds	r3, #88	; 0x58
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	335c      	adds	r3, #92	; 0x5c
 8002360:	2204      	movs	r2, #4
 8002362:	701a      	strb	r2, [r3, #0]
 8002364:	e009      	b.n	800237a <HCD_HC_IN_IRQHandler+0x4ca>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	335c      	adds	r3, #92	; 0x5c
 8002376:	2202      	movs	r2, #2
 8002378:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002390:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002398:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	e02d      	b.n	800240a <HCD_HC_IN_IRQHandler+0x55a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	440b      	add	r3, r1
 80023bc:	335d      	adds	r3, #93	; 0x5d
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d122      	bne.n	800240a <HCD_HC_IN_IRQHandler+0x55a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	440b      	add	r3, r1
 80023d2:	335c      	adds	r3, #92	; 0x5c
 80023d4:	2202      	movs	r2, #2
 80023d6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023ee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023f6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	461a      	mov	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002416:	461a      	mov	r2, r3
 8002418:	2302      	movs	r3, #2
 800241a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	b2d8      	uxtb	r0, r3
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	335c      	adds	r3, #92	; 0x5c
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	4601      	mov	r1, r0
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f005 feb8 	bl	80081ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800243c:	e0cd      	b.n	80025da <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4413      	add	r3, r2
 8002446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	2b80      	cmp	r3, #128	; 0x80
 8002452:	d13e      	bne.n	80024d2 <HCD_HC_IN_IRQHandler+0x622>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	0151      	lsls	r1, r2, #5
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	440a      	add	r2, r1
 800246a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	440b      	add	r3, r1
 8002482:	3358      	adds	r3, #88	; 0x58
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	1c59      	adds	r1, r3, #1
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4403      	add	r3, r0
 8002496:	3358      	adds	r3, #88	; 0x58
 8002498:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	440b      	add	r3, r1
 80024a8:	335d      	adds	r3, #93	; 0x5d
 80024aa:	2206      	movs	r2, #6
 80024ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 fb87 	bl	8004bcc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	461a      	mov	r2, r3
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	6093      	str	r3, [r2, #8]
}
 80024d0:	e083      	b.n	80025da <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d178      	bne.n	80025da <HCD_HC_IN_IRQHandler+0x72a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	333f      	adds	r3, #63	; 0x3f
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d122      	bne.n	8002544 <HCD_HC_IN_IRQHandler+0x694>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	440b      	add	r3, r1
 800250c:	3358      	adds	r3, #88	; 0x58
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4413      	add	r3, r2
 800251a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	0151      	lsls	r1, r2, #5
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	440a      	add	r2, r1
 8002528:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f002 fb45 	bl	8004bcc <USB_HC_Halt>
 8002542:	e041      	b.n	80025c8 <HCD_HC_IN_IRQHandler+0x718>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	333f      	adds	r3, #63	; 0x3f
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HCD_HC_IN_IRQHandler+0x6c0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	333f      	adds	r3, #63	; 0x3f
 800256a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800256c:	2b02      	cmp	r3, #2
 800256e:	d12b      	bne.n	80025c8 <HCD_HC_IN_IRQHandler+0x718>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	440b      	add	r3, r1
 800257e:	3358      	adds	r3, #88	; 0x58
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	440b      	add	r3, r1
 8002592:	335d      	adds	r3, #93	; 0x5d
 8002594:	2203      	movs	r2, #3
 8002596:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	0151      	lsls	r1, r2, #5
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	440a      	add	r2, r1
 80025ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b2:	f043 0302 	orr.w	r3, r3, #2
 80025b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f002 fb02 	bl	8004bcc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	461a      	mov	r2, r3
 80025d6:	2310      	movs	r3, #16
 80025d8:	6093      	str	r3, [r2, #8]
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4413      	add	r3, r2
 8002604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b04      	cmp	r3, #4
 8002610:	d119      	bne.n	8002646 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261e:	461a      	mov	r2, r3
 8002620:	2304      	movs	r3, #4
 8002622:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	0151      	lsls	r1, r2, #5
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	440a      	add	r2, r1
 800263a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800263e:	f043 0302 	orr.w	r3, r3, #2
 8002642:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002644:	e31e      	b.n	8002c84 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4413      	add	r3, r2
 800264e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b20      	cmp	r3, #32
 800265a:	d141      	bne.n	80026e0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	461a      	mov	r2, r3
 800266a:	2320      	movs	r3, #32
 800266c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	333d      	adds	r3, #61	; 0x3d
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	f040 82ff 	bne.w	8002c84 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	333d      	adds	r3, #61	; 0x3d
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	335c      	adds	r3, #92	; 0x5c
 80026aa:	2202      	movs	r2, #2
 80026ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	0151      	lsls	r1, r2, #5
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	440a      	add	r2, r1
 80026c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 fa77 	bl	8004bcc <USB_HC_Halt>
}
 80026de:	e2d1      	b.n	8002c84 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f2:	2b40      	cmp	r3, #64	; 0x40
 80026f4:	d13f      	bne.n	8002776 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	335d      	adds	r3, #93	; 0x5d
 8002706:	2204      	movs	r2, #4
 8002708:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	440b      	add	r3, r1
 8002718:	333d      	adds	r3, #61	; 0x3d
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	440b      	add	r3, r1
 800272c:	3358      	adds	r3, #88	; 0x58
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	0151      	lsls	r1, r2, #5
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	440a      	add	r2, r1
 8002748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f002 fa35 	bl	8004bcc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	461a      	mov	r2, r3
 8002770:	2340      	movs	r3, #64	; 0x40
 8002772:	6093      	str	r3, [r2, #8]
}
 8002774:	e286      	b.n	8002c84 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800278c:	d122      	bne.n	80027d4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	0151      	lsls	r1, r2, #5
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	440a      	add	r2, r1
 80027a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 fa07 	bl	8004bcc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	461a      	mov	r2, r3
 80027cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d0:	6093      	str	r3, [r2, #8]
}
 80027d2:	e257      	b.n	8002c84 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d135      	bne.n	8002856 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	440b      	add	r3, r1
 80027f8:	3358      	adds	r3, #88	; 0x58
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	0151      	lsls	r1, r2, #5
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	440a      	add	r2, r1
 8002814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002818:	f043 0302 	orr.w	r3, r3, #2
 800281c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f002 f9cf 	bl	8004bcc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283a:	461a      	mov	r2, r3
 800283c:	2301      	movs	r3, #1
 800283e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	335d      	adds	r3, #93	; 0x5d
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
}
 8002854:	e216      	b.n	8002c84 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b08      	cmp	r3, #8
 800286a:	d12b      	bne.n	80028c4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	461a      	mov	r2, r3
 800287a:	2308      	movs	r3, #8
 800287c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	0151      	lsls	r1, r2, #5
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	440a      	add	r2, r1
 8002894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f002 f98f 	bl	8004bcc <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	440b      	add	r3, r1
 80028bc:	335d      	adds	r3, #93	; 0x5d
 80028be:	2205      	movs	r2, #5
 80028c0:	701a      	strb	r2, [r3, #0]
}
 80028c2:	e1df      	b.n	8002c84 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d135      	bne.n	8002946 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	440b      	add	r3, r1
 80028e8:	3358      	adds	r3, #88	; 0x58
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	335d      	adds	r3, #93	; 0x5d
 80028fe:	2203      	movs	r2, #3
 8002900:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	0151      	lsls	r1, r2, #5
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	440a      	add	r2, r1
 8002918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f002 f94d 	bl	8004bcc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4413      	add	r3, r2
 800293a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293e:	461a      	mov	r2, r3
 8002940:	2310      	movs	r3, #16
 8002942:	6093      	str	r3, [r2, #8]
}
 8002944:	e19e      	b.n	8002c84 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4413      	add	r3, r2
 800294e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002958:	2b80      	cmp	r3, #128	; 0x80
 800295a:	d12b      	bne.n	80029b4 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	0151      	lsls	r1, r2, #5
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	440a      	add	r2, r1
 8002972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002976:	f043 0302 	orr.w	r3, r3, #2
 800297a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f002 f920 	bl	8004bcc <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	335d      	adds	r3, #93	; 0x5d
 800299c:	2206      	movs	r2, #6
 800299e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	461a      	mov	r2, r3
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	6093      	str	r3, [r2, #8]
}
 80029b2:	e167      	b.n	8002c84 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ca:	d135      	bne.n	8002a38 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	0151      	lsls	r1, r2, #5
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	440a      	add	r2, r1
 80029e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e6:	f043 0302 	orr.w	r3, r3, #2
 80029ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f002 f8e8 	bl	8004bcc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	440b      	add	r3, r1
 8002a30:	335d      	adds	r3, #93	; 0x5d
 8002a32:	2208      	movs	r2, #8
 8002a34:	701a      	strb	r2, [r3, #0]
}
 8002a36:	e125      	b.n	8002c84 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	f040 811a 	bne.w	8002c84 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	0151      	lsls	r1, r2, #5
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	440a      	add	r2, r1
 8002a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a6a:	f023 0302 	bic.w	r3, r3, #2
 8002a6e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	440b      	add	r3, r1
 8002a7e:	335d      	adds	r3, #93	; 0x5d
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d137      	bne.n	8002af6 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	440b      	add	r3, r1
 8002a94:	335c      	adds	r3, #92	; 0x5c
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	440b      	add	r3, r1
 8002aa8:	333f      	adds	r3, #63	; 0x3f
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d00b      	beq.n	8002ac8 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	440b      	add	r3, r1
 8002abe:	333f      	adds	r3, #63	; 0x3f
 8002ac0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	f040 80c5 	bne.w	8002c52 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3351      	adds	r3, #81	; 0x51
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	f083 0301 	eor.w	r3, r3, #1
 8002ade:	b2d8      	uxtb	r0, r3
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	3351      	adds	r3, #81	; 0x51
 8002af0:	4602      	mov	r2, r0
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	e0ad      	b.n	8002c52 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	335d      	adds	r3, #93	; 0x5d
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d10a      	bne.n	8002b22 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	335c      	adds	r3, #92	; 0x5c
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	e097      	b.n	8002c52 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	335d      	adds	r3, #93	; 0x5d
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d10a      	bne.n	8002b4e <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	335c      	adds	r3, #92	; 0x5c
 8002b48:	2202      	movs	r2, #2
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	e081      	b.n	8002c52 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	335d      	adds	r3, #93	; 0x5d
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d10a      	bne.n	8002b7a <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	335c      	adds	r3, #92	; 0x5c
 8002b74:	2205      	movs	r2, #5
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	e06b      	b.n	8002c52 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	335d      	adds	r3, #93	; 0x5d
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b06      	cmp	r3, #6
 8002b8e:	d00a      	beq.n	8002ba6 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	335d      	adds	r3, #93	; 0x5d
 8002ba0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d155      	bne.n	8002c52 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3358      	adds	r3, #88	; 0x58
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	1c59      	adds	r1, r3, #1
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4403      	add	r3, r0
 8002bc8:	3358      	adds	r3, #88	; 0x58
 8002bca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	3358      	adds	r3, #88	; 0x58
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d914      	bls.n	8002c0c <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	3358      	adds	r3, #88	; 0x58
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	335c      	adds	r3, #92	; 0x5c
 8002c06:	2204      	movs	r2, #4
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e009      	b.n	8002c20 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	335c      	adds	r3, #92	; 0x5c
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c36:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c3e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2302      	movs	r3, #2
 8002c62:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	b2d8      	uxtb	r0, r3
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	440b      	add	r3, r1
 8002c76:	335c      	adds	r3, #92	; 0x5c
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4601      	mov	r1, r0
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f005 fa94 	bl	80081ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c84:	bf00      	nop
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	0c5b      	lsrs	r3, r3, #17
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cc0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d003      	beq.n	8002cd0 <HCD_RXQLVL_IRQHandler+0x44>
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	f000 8082 	beq.w	8002dd2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002cce:	e083      	b.n	8002dd8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d07f      	beq.n	8002dd6 <HCD_RXQLVL_IRQHandler+0x14a>
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3344      	adds	r3, #68	; 0x44
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d074      	beq.n	8002dd6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3344      	adds	r3, #68	; 0x44
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	b292      	uxth	r2, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	f001 fba4 	bl	8004454 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	3344      	adds	r3, #68	; 0x44
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	18d1      	adds	r1, r2, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4403      	add	r3, r0
 8002d30:	3344      	adds	r3, #68	; 0x44
 8002d32:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	440b      	add	r3, r1
 8002d42:	334c      	adds	r3, #76	; 0x4c
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	18d1      	adds	r1, r2, r3
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4403      	add	r3, r0
 8002d58:	334c      	adds	r3, #76	; 0x4c
 8002d5a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HCD_RXQLVL_IRQHandler+0x154>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d031      	beq.n	8002dd6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d88:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d90:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	440b      	add	r3, r1
 8002db2:	3350      	adds	r3, #80	; 0x50
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	f083 0301 	eor.w	r3, r3, #1
 8002dba:	b2d8      	uxtb	r0, r3
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	3350      	adds	r3, #80	; 0x50
 8002dcc:	4602      	mov	r2, r0
 8002dce:	701a      	strb	r2, [r3, #0]
      break;
 8002dd0:	e001      	b.n	8002dd6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e000      	b.n	8002dd8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002dd6:	bf00      	nop
  }
}
 8002dd8:	bf00      	nop
 8002dda:	3728      	adds	r7, #40	; 0x28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	1ff80000 	.word	0x1ff80000

08002de4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e10:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d10b      	bne.n	8002e34 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d102      	bne.n	8002e2c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f005 f9a4 	bl	8008174 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f043 0302 	orr.w	r3, r3, #2
 8002e32:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d132      	bne.n	8002ea4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f043 0308 	orr.w	r3, r3, #8
 8002e44:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d126      	bne.n	8002e9e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d113      	bne.n	8002e80 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e62:	d106      	bne.n	8002e72 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2102      	movs	r1, #2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f001 fbea 	bl	8004644 <USB_InitFSLSPClkSel>
 8002e70:	e011      	b.n	8002e96 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2101      	movs	r1, #1
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f001 fbe3 	bl	8004644 <USB_InitFSLSPClkSel>
 8002e7e:	e00a      	b.n	8002e96 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d106      	bne.n	8002e96 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e94:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f005 f995 	bl	80081c6 <HAL_HCD_PortEnabled_Callback>
 8002e9c:	e002      	b.n	8002ea4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f005 f99f 	bl	80081e2 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d103      	bne.n	8002eb6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f043 0320 	orr.w	r3, r3, #32
 8002eb4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	6013      	str	r3, [r2, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e304      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8087 	beq.w	8002ffa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eec:	4b92      	ldr	r3, [pc, #584]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d00c      	beq.n	8002f12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ef8:	4b8f      	ldr	r3, [pc, #572]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d112      	bne.n	8002f2a <HAL_RCC_OscConfig+0x5e>
 8002f04:	4b8c      	ldr	r3, [pc, #560]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f10:	d10b      	bne.n	8002f2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f12:	4b89      	ldr	r3, [pc, #548]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d06c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x12c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d168      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e2de      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x76>
 8002f34:	4b80      	ldr	r3, [pc, #512]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a7f      	ldr	r2, [pc, #508]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	e02e      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd4>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x98>
 8002f4a:	4b7b      	ldr	r3, [pc, #492]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7a      	ldr	r2, [pc, #488]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b78      	ldr	r3, [pc, #480]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a77      	ldr	r2, [pc, #476]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e01d      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd4>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0xbc>
 8002f6e:	4b72      	ldr	r3, [pc, #456]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a71      	ldr	r2, [pc, #452]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b6f      	ldr	r3, [pc, #444]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6e      	ldr	r2, [pc, #440]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd4>
 8002f88:	4b6b      	ldr	r3, [pc, #428]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6a      	ldr	r2, [pc, #424]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b68      	ldr	r3, [pc, #416]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a67      	ldr	r2, [pc, #412]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fe f8c8 	bl	800113c <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fe f8c4 	bl	800113c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e292      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b5d      	ldr	r3, [pc, #372]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xe4>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f8b4 	bl	800113c <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe f8b0 	bl	800113c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e27e      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x10c>
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d063      	beq.n	80030ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003006:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003012:	4b49      	ldr	r3, [pc, #292]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b08      	cmp	r3, #8
 800301c:	d11c      	bne.n	8003058 <HAL_RCC_OscConfig+0x18c>
 800301e:	4b46      	ldr	r3, [pc, #280]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d116      	bne.n	8003058 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302a:	4b43      	ldr	r3, [pc, #268]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_RCC_OscConfig+0x176>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e252      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4939      	ldr	r1, [pc, #228]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	e03a      	b.n	80030ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003060:	4b36      	ldr	r3, [pc, #216]	; (800313c <HAL_RCC_OscConfig+0x270>)
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003066:	f7fe f869 	bl	800113c <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306e:	f7fe f865 	bl	800113c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e233      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308c:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4927      	ldr	r1, [pc, #156]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	e015      	b.n	80030ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a2:	4b26      	ldr	r3, [pc, #152]	; (800313c <HAL_RCC_OscConfig+0x270>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fe f848 	bl	800113c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b0:	f7fe f844 	bl	800113c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e212      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d03a      	beq.n	8003150 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d019      	beq.n	8003116 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e8:	f7fe f828 	bl	800113c <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f0:	f7fe f824 	bl	800113c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e1f2      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800310e:	2001      	movs	r0, #1
 8003110:	f000 fbc0 	bl	8003894 <RCC_Delay>
 8003114:	e01c      	b.n	8003150 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311c:	f7fe f80e 	bl	800113c <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003122:	e00f      	b.n	8003144 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003124:	f7fe f80a 	bl	800113c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d908      	bls.n	8003144 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e1d8      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	42420000 	.word	0x42420000
 8003140:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	4b9b      	ldr	r3, [pc, #620]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e9      	bne.n	8003124 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80a6 	beq.w	80032aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003162:	4b94      	ldr	r3, [pc, #592]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10d      	bne.n	800318a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	4b91      	ldr	r3, [pc, #580]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	4a90      	ldr	r2, [pc, #576]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003178:	61d3      	str	r3, [r2, #28]
 800317a:	4b8e      	ldr	r3, [pc, #568]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003186:	2301      	movs	r3, #1
 8003188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318a:	4b8b      	ldr	r3, [pc, #556]	; (80033b8 <HAL_RCC_OscConfig+0x4ec>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d118      	bne.n	80031c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003196:	4b88      	ldr	r3, [pc, #544]	; (80033b8 <HAL_RCC_OscConfig+0x4ec>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a87      	ldr	r2, [pc, #540]	; (80033b8 <HAL_RCC_OscConfig+0x4ec>)
 800319c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a2:	f7fd ffcb 	bl	800113c <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031aa:	f7fd ffc7 	bl	800113c <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b64      	cmp	r3, #100	; 0x64
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e195      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031bc:	4b7e      	ldr	r3, [pc, #504]	; (80033b8 <HAL_RCC_OscConfig+0x4ec>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d106      	bne.n	80031de <HAL_RCC_OscConfig+0x312>
 80031d0:	4b78      	ldr	r3, [pc, #480]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4a77      	ldr	r2, [pc, #476]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6213      	str	r3, [r2, #32]
 80031dc:	e02d      	b.n	800323a <HAL_RCC_OscConfig+0x36e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0x334>
 80031e6:	4b73      	ldr	r3, [pc, #460]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4a72      	ldr	r2, [pc, #456]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	6213      	str	r3, [r2, #32]
 80031f2:	4b70      	ldr	r3, [pc, #448]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4a6f      	ldr	r2, [pc, #444]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031f8:	f023 0304 	bic.w	r3, r3, #4
 80031fc:	6213      	str	r3, [r2, #32]
 80031fe:	e01c      	b.n	800323a <HAL_RCC_OscConfig+0x36e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	2b05      	cmp	r3, #5
 8003206:	d10c      	bne.n	8003222 <HAL_RCC_OscConfig+0x356>
 8003208:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a69      	ldr	r2, [pc, #420]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	4b67      	ldr	r3, [pc, #412]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4a66      	ldr	r2, [pc, #408]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6213      	str	r3, [r2, #32]
 8003220:	e00b      	b.n	800323a <HAL_RCC_OscConfig+0x36e>
 8003222:	4b64      	ldr	r3, [pc, #400]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4a63      	ldr	r2, [pc, #396]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6213      	str	r3, [r2, #32]
 800322e:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	4a60      	ldr	r2, [pc, #384]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003234:	f023 0304 	bic.w	r3, r3, #4
 8003238:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d015      	beq.n	800326e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003242:	f7fd ff7b 	bl	800113c <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	e00a      	b.n	8003260 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324a:	f7fd ff77 	bl	800113c <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f241 3288 	movw	r2, #5000	; 0x1388
 8003258:	4293      	cmp	r3, r2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e143      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003260:	4b54      	ldr	r3, [pc, #336]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0ee      	beq.n	800324a <HAL_RCC_OscConfig+0x37e>
 800326c:	e014      	b.n	8003298 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326e:	f7fd ff65 	bl	800113c <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003274:	e00a      	b.n	800328c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7fd ff61 	bl	800113c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e12d      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328c:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ee      	bne.n	8003276 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d105      	bne.n	80032aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329e:	4b45      	ldr	r3, [pc, #276]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	4a44      	ldr	r2, [pc, #272]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80032a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 808c 	beq.w	80033cc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80032b4:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c0:	d10e      	bne.n	80032e0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80032c2:	4b3c      	ldr	r3, [pc, #240]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d108      	bne.n	80032e0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80032ce:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80032d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032da:	d101      	bne.n	80032e0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e103      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d14e      	bne.n	8003386 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80032e8:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80032f4:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0ef      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003308:	4b2c      	ldr	r3, [pc, #176]	; (80033bc <HAL_RCC_OscConfig+0x4f0>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7fd ff15 	bl	800113c <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003316:	f7fd ff11 	bl	800113c <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b64      	cmp	r3, #100	; 0x64
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0df      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003328:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003334:	4b1f      	ldr	r3, [pc, #124]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003340:	491c      	ldr	r1, [pc, #112]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003342:	4313      	orrs	r3, r2
 8003344:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003346:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4918      	ldr	r1, [pc, #96]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003354:	4313      	orrs	r3, r2
 8003356:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003358:	4b18      	ldr	r3, [pc, #96]	; (80033bc <HAL_RCC_OscConfig+0x4f0>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fd feed 	bl	800113c <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003366:	f7fd fee9 	bl	800113c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b64      	cmp	r3, #100	; 0x64
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e0b7      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x49a>
 8003384:	e022      	b.n	80033cc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800338c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003390:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HAL_RCC_OscConfig+0x4f0>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7fd fed0 	bl	800113c <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800339e:	e00f      	b.n	80033c0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80033a0:	f7fd fecc 	bl	800113c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d908      	bls.n	80033c0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e09a      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40007000 	.word	0x40007000
 80033bc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80033c0:	4b4b      	ldr	r3, [pc, #300]	; (80034f0 <HAL_RCC_OscConfig+0x624>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e9      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8088 	beq.w	80034e6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033d6:	4b46      	ldr	r3, [pc, #280]	; (80034f0 <HAL_RCC_OscConfig+0x624>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d068      	beq.n	80034b4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d14d      	bne.n	8003486 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ea:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <HAL_RCC_OscConfig+0x628>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fd fea4 	bl	800113c <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fd fea0 	bl	800113c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e06e      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340a:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <HAL_RCC_OscConfig+0x624>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341e:	d10f      	bne.n	8003440 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003420:	4b33      	ldr	r3, [pc, #204]	; (80034f0 <HAL_RCC_OscConfig+0x624>)
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	4931      	ldr	r1, [pc, #196]	; (80034f0 <HAL_RCC_OscConfig+0x624>)
 800342a:	4313      	orrs	r3, r2
 800342c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800342e:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <HAL_RCC_OscConfig+0x624>)
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	f023 020f 	bic.w	r2, r3, #15
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	492d      	ldr	r1, [pc, #180]	; (80034f0 <HAL_RCC_OscConfig+0x624>)
 800343c:	4313      	orrs	r3, r2
 800343e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003440:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <HAL_RCC_OscConfig+0x624>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	430b      	orrs	r3, r1
 8003452:	4927      	ldr	r1, [pc, #156]	; (80034f0 <HAL_RCC_OscConfig+0x624>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003458:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <HAL_RCC_OscConfig+0x628>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fd fe6d 	bl	800113c <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003466:	f7fd fe69 	bl	800113c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e037      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_RCC_OscConfig+0x624>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x59a>
 8003484:	e02f      	b.n	80034e6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_RCC_OscConfig+0x628>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fd fe56 	bl	800113c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fd fe52 	bl	800113c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e020      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <HAL_RCC_OscConfig+0x624>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x5c8>
 80034b2:	e018      	b.n	80034e6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e013      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_OscConfig+0x624>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d106      	bne.n	80034e2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	42420060 	.word	0x42420060

080034f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0d0      	b.n	80036ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800350c:	4b6a      	ldr	r3, [pc, #424]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d910      	bls.n	800353c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b67      	ldr	r3, [pc, #412]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 0207 	bic.w	r2, r3, #7
 8003522:	4965      	ldr	r1, [pc, #404]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352a:	4b63      	ldr	r3, [pc, #396]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0b8      	b.n	80036ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d020      	beq.n	800358a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003554:	4b59      	ldr	r3, [pc, #356]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a58      	ldr	r2, [pc, #352]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800355e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800356c:	4b53      	ldr	r3, [pc, #332]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4a52      	ldr	r2, [pc, #328]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003576:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003578:	4b50      	ldr	r3, [pc, #320]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	494d      	ldr	r1, [pc, #308]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	4313      	orrs	r3, r2
 8003588:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d040      	beq.n	8003618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	4b47      	ldr	r3, [pc, #284]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d115      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e07f      	b.n	80036ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b6:	4b41      	ldr	r3, [pc, #260]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e073      	b.n	80036ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c6:	4b3d      	ldr	r3, [pc, #244]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e06b      	b.n	80036ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035d6:	4b39      	ldr	r3, [pc, #228]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f023 0203 	bic.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4936      	ldr	r1, [pc, #216]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e8:	f7fd fda8 	bl	800113c <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f0:	f7fd fda4 	bl	800113c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e053      	b.n	80036ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	4b2d      	ldr	r3, [pc, #180]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 020c 	and.w	r2, r3, #12
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	429a      	cmp	r2, r3
 8003616:	d1eb      	bne.n	80035f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003618:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d210      	bcs.n	8003648 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 0207 	bic.w	r2, r3, #7
 800362e:	4922      	ldr	r1, [pc, #136]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e032      	b.n	80036ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003654:	4b19      	ldr	r3, [pc, #100]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4916      	ldr	r1, [pc, #88]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	490e      	ldr	r1, [pc, #56]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	4313      	orrs	r3, r2
 8003684:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003686:	f000 f821 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 800368a:	4601      	mov	r1, r0
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003698:	5cd3      	ldrb	r3, [r2, r3]
 800369a:	fa21 f303 	lsr.w	r3, r1, r3
 800369e:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1cc>)
 80036a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_ClockConfig+0x1d0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fd fd06 	bl	80010b8 <HAL_InitTick>

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40022000 	.word	0x40022000
 80036bc:	40021000 	.word	0x40021000
 80036c0:	08008758 	.word	0x08008758
 80036c4:	20000004 	.word	0x20000004
 80036c8:	20000008 	.word	0x20000008

080036cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036d0:	b091      	sub	sp, #68	; 0x44
 80036d2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80036d4:	4b6a      	ldr	r3, [pc, #424]	; (8003880 <HAL_RCC_GetSysClockFreq+0x1b4>)
 80036d6:	f107 0414 	add.w	r4, r7, #20
 80036da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036dc:	c407      	stmia	r4!, {r0, r1, r2}
 80036de:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80036e0:	4b68      	ldr	r3, [pc, #416]	; (8003884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036e2:	1d3c      	adds	r4, r7, #4
 80036e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
 80036ee:	2300      	movs	r3, #0
 80036f0:	633b      	str	r3, [r7, #48]	; 0x30
 80036f2:	2300      	movs	r3, #0
 80036f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f6:	2300      	movs	r3, #0
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003706:	4b60      	ldr	r3, [pc, #384]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800370c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b04      	cmp	r3, #4
 8003714:	d002      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x50>
 8003716:	2b08      	cmp	r3, #8
 8003718:	d003      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0x56>
 800371a:	e0a7      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800371c:	4b5b      	ldr	r3, [pc, #364]	; (800388c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800371e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003720:	e0a7      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003724:	0c9b      	lsrs	r3, r3, #18
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800372e:	4413      	add	r3, r2
 8003730:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 808d 	beq.w	800385c <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003742:	4b51      	ldr	r3, [pc, #324]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800374e:	4413      	add	r3, r2
 8003750:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003754:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003756:	4b4c      	ldr	r3, [pc, #304]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d06a      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003762:	4b49      	ldr	r3, [pc, #292]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	3301      	adds	r3, #1
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003770:	4b45      	ldr	r3, [pc, #276]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	3302      	adds	r3, #2
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	4619      	mov	r1, r3
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	f04f 0400 	mov.w	r4, #0
 800378c:	fb03 f502 	mul.w	r5, r3, r2
 8003790:	fb01 f004 	mul.w	r0, r1, r4
 8003794:	4428      	add	r0, r5
 8003796:	fba1 5603 	umull	r5, r6, r1, r3
 800379a:	1983      	adds	r3, r0, r6
 800379c:	461e      	mov	r6, r3
 800379e:	4629      	mov	r1, r5
 80037a0:	4632      	mov	r2, r6
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	f04f 0400 	mov.w	r4, #0
 80037aa:	0154      	lsls	r4, r2, #5
 80037ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037b0:	014b      	lsls	r3, r1, #5
 80037b2:	4619      	mov	r1, r3
 80037b4:	4622      	mov	r2, r4
 80037b6:	1b49      	subs	r1, r1, r5
 80037b8:	eb62 0206 	sbc.w	r2, r2, r6
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	f04f 0400 	mov.w	r4, #0
 80037c4:	0194      	lsls	r4, r2, #6
 80037c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037ca:	018b      	lsls	r3, r1, #6
 80037cc:	1a5b      	subs	r3, r3, r1
 80037ce:	eb64 0402 	sbc.w	r4, r4, r2
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	00e2      	lsls	r2, r4, #3
 80037dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037e0:	00d9      	lsls	r1, r3, #3
 80037e2:	460b      	mov	r3, r1
 80037e4:	4614      	mov	r4, r2
 80037e6:	195b      	adds	r3, r3, r5
 80037e8:	eb44 0406 	adc.w	r4, r4, r6
 80037ec:	f04f 0100 	mov.w	r1, #0
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	0262      	lsls	r2, r4, #9
 80037f6:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037fa:	0259      	lsls	r1, r3, #9
 80037fc:	460b      	mov	r3, r1
 80037fe:	4614      	mov	r4, r2
 8003800:	4698      	mov	r8, r3
 8003802:	46a1      	mov	r9, r4
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	4619      	mov	r1, r3
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	f04f 0400 	mov.w	r4, #0
 8003812:	fb03 f502 	mul.w	r5, r3, r2
 8003816:	fb01 f004 	mul.w	r0, r1, r4
 800381a:	4428      	add	r0, r5
 800381c:	fba1 3403 	umull	r3, r4, r1, r3
 8003820:	1902      	adds	r2, r0, r4
 8003822:	4614      	mov	r4, r2
 8003824:	461a      	mov	r2, r3
 8003826:	4623      	mov	r3, r4
 8003828:	4640      	mov	r0, r8
 800382a:	4649      	mov	r1, r9
 800382c:	f7fc fcfa 	bl	8000224 <__aeabi_uldivmod>
 8003830:	4603      	mov	r3, r0
 8003832:	460c      	mov	r4, r1
 8003834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003836:	e007      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383a:	4a14      	ldr	r2, [pc, #80]	; (800388c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800383c:	fb02 f203 	mul.w	r2, r2, r3
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003848:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800384c:	461a      	mov	r2, r3
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	4293      	cmp	r3, r2
 8003852:	d108      	bne.n	8003866 <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 8003854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	63fb      	str	r3, [r7, #60]	; 0x3c
 800385a:	e004      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	4a0c      	ldr	r2, [pc, #48]	; (8003890 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8003866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003868:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800386a:	e002      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800386c:	4b07      	ldr	r3, [pc, #28]	; (800388c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800386e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003874:	4618      	mov	r0, r3
 8003876:	3744      	adds	r7, #68	; 0x44
 8003878:	46bd      	mov	sp, r7
 800387a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800387e:	bf00      	nop
 8003880:	08008730 	.word	0x08008730
 8003884:	08008740 	.word	0x08008740
 8003888:	40021000 	.word	0x40021000
 800388c:	007a1200 	.word	0x007a1200
 8003890:	003d0900 	.word	0x003d0900

08003894 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <RCC_Delay+0x34>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <RCC_Delay+0x38>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	0a5b      	lsrs	r3, r3, #9
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
 80038ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038b0:	bf00      	nop
  }
  while (Delay --);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1e5a      	subs	r2, r3, #1
 80038b6:	60fa      	str	r2, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f9      	bne.n	80038b0 <RCC_Delay+0x1c>
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000004 	.word	0x20000004
 80038cc:	10624dd3 	.word	0x10624dd3

080038d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d07d      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80038f0:	2300      	movs	r3, #0
 80038f2:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f4:	4b8b      	ldr	r3, [pc, #556]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10d      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003900:	4b88      	ldr	r3, [pc, #544]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	4a87      	ldr	r2, [pc, #540]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	61d3      	str	r3, [r2, #28]
 800390c:	4b85      	ldr	r3, [pc, #532]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003918:	2301      	movs	r3, #1
 800391a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391c:	4b82      	ldr	r3, [pc, #520]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d118      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003928:	4b7f      	ldr	r3, [pc, #508]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a7e      	ldr	r2, [pc, #504]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800392e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003932:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003934:	f7fd fc02 	bl	800113c <HAL_GetTick>
 8003938:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393a:	e008      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393c:	f7fd fbfe 	bl	800113c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b64      	cmp	r3, #100	; 0x64
 8003948:	d901      	bls.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0e5      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394e:	4b76      	ldr	r3, [pc, #472]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800395a:	4b72      	ldr	r3, [pc, #456]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003962:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d02e      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	429a      	cmp	r2, r3
 8003976:	d027      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003978:	4b6a      	ldr	r3, [pc, #424]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003980:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003982:	4b6a      	ldr	r3, [pc, #424]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003988:	4b68      	ldr	r3, [pc, #416]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800398e:	4a65      	ldr	r2, [pc, #404]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d014      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399e:	f7fd fbcd 	bl	800113c <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a4:	e00a      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a6:	f7fd fbc9 	bl	800113c <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d901      	bls.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0ae      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039bc:	4b59      	ldr	r3, [pc, #356]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ee      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039c8:	4b56      	ldr	r3, [pc, #344]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4953      	ldr	r1, [pc, #332]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039da:	7efb      	ldrb	r3, [r7, #27]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d105      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e0:	4b50      	ldr	r3, [pc, #320]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	4a4f      	ldr	r2, [pc, #316]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039f8:	4b4a      	ldr	r3, [pc, #296]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4947      	ldr	r1, [pc, #284]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003a16:	4b43      	ldr	r3, [pc, #268]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	4940      	ldr	r1, [pc, #256]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003a34:	4b3b      	ldr	r3, [pc, #236]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	4938      	ldr	r1, [pc, #224]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003a46:	4b37      	ldr	r3, [pc, #220]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d105      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003a52:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d148      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003a68:	4b2e      	ldr	r3, [pc, #184]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d138      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003a74:	4b2b      	ldr	r3, [pc, #172]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003a80:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e042      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003a94:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	4920      	ldr	r1, [pc, #128]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003aa6:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	491c      	ldr	r1, [pc, #112]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abe:	f7fd fb3d 	bl	800113c <HAL_GetTick>
 8003ac2:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ac6:	f7fd fb39 	bl	800113c <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b64      	cmp	r3, #100	; 0x64
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e020      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ad8:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003ae4:	e009      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d001      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e00f      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	4904      	ldr	r1, [pc, #16]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	42420440 	.word	0x42420440
 8003b30:	42420070 	.word	0x42420070

08003b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e01d      	b.n	8003b82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd f980 	bl	8000e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4610      	mov	r0, r2
 8003b74:	f000 fa10 	bl	8003f98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b085      	sub	sp, #20
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b06      	cmp	r3, #6
 8003bb2:	d007      	beq.n	8003bc4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0202 	mvn.w	r2, #2
 8003bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f9a4 	bl	8003f60 <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f997 	bl	8003f4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f9a6 	bl	8003f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d122      	bne.n	8003c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d11b      	bne.n	8003c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0204 	mvn.w	r2, #4
 8003c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f97a 	bl	8003f60 <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f96d 	bl	8003f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f97c 	bl	8003f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d122      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0208 	mvn.w	r2, #8
 8003ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2204      	movs	r2, #4
 8003caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f950 	bl	8003f60 <HAL_TIM_IC_CaptureCallback>
 8003cc0:	e005      	b.n	8003cce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f943 	bl	8003f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f952 	bl	8003f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	d122      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d11b      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0210 	mvn.w	r2, #16
 8003cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f926 	bl	8003f60 <HAL_TIM_IC_CaptureCallback>
 8003d14:	e005      	b.n	8003d22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f919 	bl	8003f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f928 	bl	8003f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d10e      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d107      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0201 	mvn.w	r2, #1
 8003d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fc ff28 	bl	8000ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	2b80      	cmp	r3, #128	; 0x80
 8003d60:	d10e      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6c:	2b80      	cmp	r3, #128	; 0x80
 8003d6e:	d107      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa5b 	bl	8004236 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d10e      	bne.n	8003dac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b40      	cmp	r3, #64	; 0x40
 8003d9a:	d107      	bne.n	8003dac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f8ec 	bl	8003f84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d10e      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d107      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0220 	mvn.w	r2, #32
 8003dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fa26 	bl	8004224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_TIM_ConfigClockSource+0x18>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e0a6      	b.n	8003f46 <HAL_TIM_ConfigClockSource+0x166>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d067      	beq.n	8003f00 <HAL_TIM_ConfigClockSource+0x120>
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	d80b      	bhi.n	8003e4c <HAL_TIM_ConfigClockSource+0x6c>
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d073      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0x140>
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d802      	bhi.n	8003e42 <HAL_TIM_ConfigClockSource+0x62>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d06f      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003e40:	e078      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d06c      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0x140>
 8003e46:	2b30      	cmp	r3, #48	; 0x30
 8003e48:	d06a      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003e4a:	e073      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e4c:	2b70      	cmp	r3, #112	; 0x70
 8003e4e:	d00d      	beq.n	8003e6c <HAL_TIM_ConfigClockSource+0x8c>
 8003e50:	2b70      	cmp	r3, #112	; 0x70
 8003e52:	d804      	bhi.n	8003e5e <HAL_TIM_ConfigClockSource+0x7e>
 8003e54:	2b50      	cmp	r3, #80	; 0x50
 8003e56:	d033      	beq.n	8003ec0 <HAL_TIM_ConfigClockSource+0xe0>
 8003e58:	2b60      	cmp	r3, #96	; 0x60
 8003e5a:	d041      	beq.n	8003ee0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003e5c:	e06a      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e62:	d066      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x152>
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e68:	d017      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003e6a:	e063      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6899      	ldr	r1, [r3, #8]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f000 f96f 	bl	800415e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	609a      	str	r2, [r3, #8]
      break;
 8003e98:	e04c      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6899      	ldr	r1, [r3, #8]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f000 f958 	bl	800415e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ebc:	609a      	str	r2, [r3, #8]
      break;
 8003ebe:	e039      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f000 f8cf 	bl	8004070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2150      	movs	r1, #80	; 0x50
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 f926 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003ede:	e029      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	6859      	ldr	r1, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	461a      	mov	r2, r3
 8003eee:	f000 f8ed 	bl	80040cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2160      	movs	r1, #96	; 0x60
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f916 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003efe:	e019      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f000 f8af 	bl	8004070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2140      	movs	r1, #64	; 0x40
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f906 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003f1e:	e009      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f000 f8fd 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003f30:	e000      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003f32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr
	...

08003f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a2d      	ldr	r2, [pc, #180]	; (8004060 <TIM_Base_SetConfig+0xc8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00f      	beq.n	8003fd0 <TIM_Base_SetConfig+0x38>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb6:	d00b      	beq.n	8003fd0 <TIM_Base_SetConfig+0x38>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a2a      	ldr	r2, [pc, #168]	; (8004064 <TIM_Base_SetConfig+0xcc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d007      	beq.n	8003fd0 <TIM_Base_SetConfig+0x38>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a29      	ldr	r2, [pc, #164]	; (8004068 <TIM_Base_SetConfig+0xd0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_Base_SetConfig+0x38>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a28      	ldr	r2, [pc, #160]	; (800406c <TIM_Base_SetConfig+0xd4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d108      	bne.n	8003fe2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <TIM_Base_SetConfig+0xc8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00f      	beq.n	800400a <TIM_Base_SetConfig+0x72>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff0:	d00b      	beq.n	800400a <TIM_Base_SetConfig+0x72>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <TIM_Base_SetConfig+0xcc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d007      	beq.n	800400a <TIM_Base_SetConfig+0x72>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1a      	ldr	r2, [pc, #104]	; (8004068 <TIM_Base_SetConfig+0xd0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d003      	beq.n	800400a <TIM_Base_SetConfig+0x72>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a19      	ldr	r2, [pc, #100]	; (800406c <TIM_Base_SetConfig+0xd4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d108      	bne.n	800401c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a07      	ldr	r2, [pc, #28]	; (8004060 <TIM_Base_SetConfig+0xc8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d103      	bne.n	8004050 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	615a      	str	r2, [r3, #20]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40000400 	.word	0x40000400
 8004068:	40000800 	.word	0x40000800
 800406c:	40000c00 	.word	0x40000c00

08004070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	f023 0201 	bic.w	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800409a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f023 030a 	bic.w	r3, r3, #10
 80040ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	621a      	str	r2, [r3, #32]
}
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr

080040cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f023 0210 	bic.w	r2, r3, #16
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	031b      	lsls	r3, r3, #12
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004108:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	621a      	str	r2, [r3, #32]
}
 8004120:	bf00      	nop
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr

0800412a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800412a:	b480      	push	{r7}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	f043 0307 	orr.w	r3, r3, #7
 800414c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	609a      	str	r2, [r3, #8]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800415e:	b480      	push	{r7}
 8004160:	b087      	sub	sp, #28
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004178:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	021a      	lsls	r2, r3, #8
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	431a      	orrs	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4313      	orrs	r3, r2
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	609a      	str	r2, [r3, #8]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e032      	b.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ec:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr

08004224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr

08004236 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004248:	b084      	sub	sp, #16
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	f107 001c 	add.w	r0, r7, #28
 8004256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	2b01      	cmp	r3, #1
 800425e:	d122      	bne.n	80042a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428a:	2b01      	cmp	r3, #1
 800428c:	d105      	bne.n	800429a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f922 	bl	80044e4 <USB_CoreReset>
 80042a0:	4603      	mov	r3, r0
 80042a2:	73fb      	strb	r3, [r7, #15]
 80042a4:	e010      	b.n	80042c8 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f916 	bl	80044e4 <USB_CoreReset>
 80042b8:	4603      	mov	r3, r0
 80042ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042d4:	b004      	add	sp, #16
 80042d6:	4770      	bx	lr

080042d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f043 0201 	orr.w	r2, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f023 0201 	bic.w	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d106      	bne.n	8004344 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	60da      	str	r2, [r3, #12]
 8004342:	e00b      	b.n	800435c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	e001      	b.n	800435c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e003      	b.n	8004364 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800435c:	2032      	movs	r0, #50	; 0x32
 800435e:	f7fc fef7 	bl	8001150 <HAL_Delay>

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	019b      	lsls	r3, r3, #6
 800437e:	f043 0220 	orr.w	r2, r3, #32
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3301      	adds	r3, #1
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a08      	ldr	r2, [pc, #32]	; (80043b0 <USB_FlushTxFifo+0x44>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e006      	b.n	80043a6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d0f0      	beq.n	8004386 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr
 80043b0:	00030d40 	.word	0x00030d40

080043b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2210      	movs	r2, #16
 80043c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3301      	adds	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a08      	ldr	r2, [pc, #32]	; (80043f0 <USB_FlushRxFifo+0x3c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e006      	b.n	80043e6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b10      	cmp	r3, #16
 80043e2:	d0f0      	beq.n	80043c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr
 80043f0:	00030d40 	.word	0x00030d40

080043f4 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b089      	sub	sp, #36	; 0x24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	4611      	mov	r1, r2
 8004400:	461a      	mov	r2, r3
 8004402:	460b      	mov	r3, r1
 8004404:	71fb      	strb	r3, [r7, #7]
 8004406:	4613      	mov	r3, r2
 8004408:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004412:	88bb      	ldrh	r3, [r7, #4]
 8004414:	3303      	adds	r3, #3
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800441a:	2300      	movs	r3, #0
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	e00f      	b.n	8004440 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	031a      	lsls	r2, r3, #12
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	4413      	add	r3, r2
 8004428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442c:	461a      	mov	r2, r3
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	3304      	adds	r3, #4
 8004438:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	3301      	adds	r3, #1
 800443e:	61bb      	str	r3, [r7, #24]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	429a      	cmp	r2, r3
 8004446:	d3eb      	bcc.n	8004420 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3724      	adds	r7, #36	; 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004454:	b480      	push	{r7}
 8004456:	b089      	sub	sp, #36	; 0x24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	4613      	mov	r3, r2
 8004460:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	3303      	adds	r3, #3
 800446e:	089b      	lsrs	r3, r3, #2
 8004470:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	e00b      	b.n	8004490 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	601a      	str	r2, [r3, #0]
    pDest++;
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	3304      	adds	r3, #4
 8004488:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	3301      	adds	r3, #1
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	429a      	cmp	r2, r3
 8004496:	d3ef      	bcc.n	8004478 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004498:	69fb      	ldr	r3, [r7, #28]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3724      	adds	r7, #36	; 0x24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4013      	ands	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80044bc:	68fb      	ldr	r3, [r7, #12]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f003 0301 	and.w	r3, r3, #1
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr
	...

080044e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3301      	adds	r3, #1
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a12      	ldr	r2, [pc, #72]	; (8004544 <USB_CoreReset+0x60>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e01b      	b.n	800453a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	daf2      	bge.n	80044f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f043 0201 	orr.w	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3301      	adds	r3, #1
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a08      	ldr	r2, [pc, #32]	; (8004544 <USB_CoreReset+0x60>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d901      	bls.n	800452c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e006      	b.n	800453a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b01      	cmp	r3, #1
 8004536:	d0f0      	beq.n	800451a <USB_CoreReset+0x36>

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr
 8004544:	00030d40 	.word	0x00030d40

08004548 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004548:	b084      	sub	sp, #16
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	f107 001c 	add.w	r0, r7, #28
 8004556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004564:	461a      	mov	r2, r3
 8004566:	2300      	movs	r3, #0
 8004568:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004590:	f023 0304 	bic.w	r3, r3, #4
 8004594:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004596:	2110      	movs	r1, #16
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff fee7 	bl	800436c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff ff08 	bl	80043b4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	e015      	b.n	80045d6 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b6:	461a      	mov	r2, r3
 80045b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045bc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ca:	461a      	mov	r2, r3
 80045cc:	2300      	movs	r3, #0
 80045ce:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3301      	adds	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d3e5      	bcc.n	80045aa <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80045de:	2101      	movs	r1, #1
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f892 	bl	800470a <USB_DriveVbus>

  HAL_Delay(200U);
 80045e6:	20c8      	movs	r0, #200	; 0xc8
 80045e8:	f7fc fdb2 	bl	8001150 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045f8:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2280      	movs	r2, #128	; 0x80
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a0d      	ldr	r2, [pc, #52]	; (8004638 <USB_HostInit+0xf0>)
 8004604:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a0c      	ldr	r2, [pc, #48]	; (800463c <USB_HostInit+0xf4>)
 800460a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f043 0210 	orr.w	r2, r3, #16
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	4b08      	ldr	r3, [pc, #32]	; (8004640 <USB_HostInit+0xf8>)
 8004620:	4313      	orrs	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004632:	b004      	add	sp, #16
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	00600080 	.word	0x00600080
 800463c:	004000e0 	.word	0x004000e0
 8004640:	a3200008 	.word	0xa3200008

08004644 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004662:	f023 0303 	bic.w	r3, r3, #3
 8004666:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	68f9      	ldr	r1, [r7, #12]
 8004678:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d107      	bne.n	8004696 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800468c:	461a      	mov	r2, r3
 800468e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004692:	6053      	str	r3, [r2, #4]
 8004694:	e009      	b.n	80046aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004696:	78fb      	ldrb	r3, [r7, #3]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d106      	bne.n	80046aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046a2:	461a      	mov	r2, r3
 80046a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80046a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80046d6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80046e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80046e6:	2064      	movs	r0, #100	; 0x64
 80046e8:	f7fc fd32 	bl	8001150 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80046f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80046fa:	200a      	movs	r0, #10
 80046fc:	f7fc fd28 	bl	8001150 <HAL_Delay>

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	460b      	mov	r3, r1
 8004714:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800472e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <USB_DriveVbus+0x44>
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d106      	bne.n	800474e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800474c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004758:	d109      	bne.n	800476e <USB_DriveVbus+0x64>
 800475a:	78fb      	ldrb	r3, [r7, #3]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d106      	bne.n	800476e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800476c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr

0800477a <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	0c5b      	lsrs	r3, r3, #17
 8004798:	f003 0303 	and.w	r3, r3, #3
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr

080047a6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	b29b      	uxth	r3, r3
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
	...

080047c8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	4608      	mov	r0, r1
 80047d2:	4611      	mov	r1, r2
 80047d4:	461a      	mov	r2, r3
 80047d6:	4603      	mov	r3, r0
 80047d8:	70fb      	strb	r3, [r7, #3]
 80047da:	460b      	mov	r3, r1
 80047dc:	70bb      	strb	r3, [r7, #2]
 80047de:	4613      	mov	r3, r2
 80047e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f6:	461a      	mov	r2, r3
 80047f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047fc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80047fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004802:	2b03      	cmp	r3, #3
 8004804:	d867      	bhi.n	80048d6 <USB_HC_Init+0x10e>
 8004806:	a201      	add	r2, pc, #4	; (adr r2, 800480c <USB_HC_Init+0x44>)
 8004808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480c:	0800481d 	.word	0x0800481d
 8004810:	08004899 	.word	0x08004899
 8004814:	0800481d 	.word	0x0800481d
 8004818:	0800485b 	.word	0x0800485b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4413      	add	r3, r2
 8004824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004828:	461a      	mov	r2, r3
 800482a:	f240 439d 	movw	r3, #1181	; 0x49d
 800482e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004830:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004834:	2b00      	cmp	r3, #0
 8004836:	da51      	bge.n	80048dc <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4413      	add	r3, r2
 8004840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	0151      	lsls	r1, r2, #5
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	440a      	add	r2, r1
 800484e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004856:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004858:	e040      	b.n	80048dc <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4413      	add	r3, r2
 8004862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004866:	461a      	mov	r2, r3
 8004868:	f240 639d 	movw	r3, #1693	; 0x69d
 800486c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800486e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004872:	2b00      	cmp	r3, #0
 8004874:	da34      	bge.n	80048e0 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004876:	78fb      	ldrb	r3, [r7, #3]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4413      	add	r3, r2
 800487e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	78fa      	ldrb	r2, [r7, #3]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	440a      	add	r2, r1
 800488c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004894:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004896:	e023      	b.n	80048e0 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a4:	461a      	mov	r2, r3
 80048a6:	f240 2325 	movw	r3, #549	; 0x225
 80048aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80048ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	da17      	bge.n	80048e4 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	78fa      	ldrb	r2, [r7, #3]
 80048c4:	0151      	lsls	r1, r2, #5
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	440a      	add	r2, r1
 80048ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048ce:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80048d2:	60d3      	str	r3, [r2, #12]
      }
      break;
 80048d4:	e006      	b.n	80048e4 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
      break;
 80048da:	e004      	b.n	80048e6 <USB_HC_Init+0x11e>
      break;
 80048dc:	bf00      	nop
 80048de:	e002      	b.n	80048e6 <USB_HC_Init+0x11e>
      break;
 80048e0:	bf00      	nop
 80048e2:	e000      	b.n	80048e6 <USB_HC_Init+0x11e>
      break;
 80048e4:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	2101      	movs	r1, #1
 80048f6:	fa01 f303 	lsl.w	r3, r1, r3
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004900:	4313      	orrs	r3, r2
 8004902:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004910:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004914:	2b00      	cmp	r3, #0
 8004916:	da03      	bge.n	8004920 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	e001      	b.n	8004924 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004924:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d103      	bne.n	8004934 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800492c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e001      	b.n	8004938 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004938:	787b      	ldrb	r3, [r7, #1]
 800493a:	059b      	lsls	r3, r3, #22
 800493c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004940:	78bb      	ldrb	r3, [r7, #2]
 8004942:	02db      	lsls	r3, r3, #11
 8004944:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004948:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800494a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800494e:	049b      	lsls	r3, r3, #18
 8004950:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004954:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004956:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004958:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800495c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	0159      	lsls	r1, r3, #5
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	440b      	add	r3, r1
 800496a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004974:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004976:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800497a:	2b03      	cmp	r3, #3
 800497c:	d10f      	bne.n	800499e <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4413      	add	r3, r2
 8004986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	0151      	lsls	r1, r2, #5
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	440a      	add	r2, r1
 8004994:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004998:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800499c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800499e:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop

080049ac <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	785b      	ldrb	r3, [r3, #1]
 80049be:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80049c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049c4:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d018      	beq.n	8004a00 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	8912      	ldrh	r2, [r2, #8]
 80049d6:	4413      	add	r3, r2
 80049d8:	3b01      	subs	r3, #1
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	8912      	ldrh	r2, [r2, #8]
 80049de:	fbb3 f3f2 	udiv	r3, r3, r2
 80049e2:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80049e4:	8bfa      	ldrh	r2, [r7, #30]
 80049e6:	8a7b      	ldrh	r3, [r7, #18]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d90b      	bls.n	8004a04 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80049ec:	8a7b      	ldrh	r3, [r7, #18]
 80049ee:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80049f0:	8bfb      	ldrh	r3, [r7, #30]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	8912      	ldrh	r2, [r2, #8]
 80049f6:	fb02 f203 	mul.w	r2, r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	611a      	str	r2, [r3, #16]
 80049fe:	e001      	b.n	8004a04 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8004a00:	2301      	movs	r3, #1
 8004a02:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	78db      	ldrb	r3, [r3, #3]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d006      	beq.n	8004a1a <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004a0c:	8bfb      	ldrh	r3, [r7, #30]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	8912      	ldrh	r2, [r2, #8]
 8004a12:	fb02 f203 	mul.w	r2, r2, r3
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004a22:	8bfb      	ldrh	r3, [r7, #30]
 8004a24:	04d9      	lsls	r1, r3, #19
 8004a26:	4b5f      	ldr	r3, [pc, #380]	; (8004ba4 <USB_HC_StartXfer+0x1f8>)
 8004a28:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a2a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	7a9b      	ldrb	r3, [r3, #10]
 8004a30:	075b      	lsls	r3, r3, #29
 8004a32:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a36:	6979      	ldr	r1, [r7, #20]
 8004a38:	0148      	lsls	r0, r1, #5
 8004a3a:	69b9      	ldr	r1, [r7, #24]
 8004a3c:	4401      	add	r1, r0
 8004a3e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004a42:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a44:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bf0c      	ite	eq
 8004a56:	2301      	moveq	r3, #1
 8004a58:	2300      	movne	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a7c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	7c7b      	ldrb	r3, [r7, #17]
 8004a8e:	075b      	lsls	r3, r3, #29
 8004a90:	6979      	ldr	r1, [r7, #20]
 8004a92:	0148      	lsls	r0, r1, #5
 8004a94:	69b9      	ldr	r1, [r7, #24]
 8004a96:	4401      	add	r1, r0
 8004a98:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a3e      	ldr	r2, [pc, #248]	; (8004ba8 <USB_HC_StartXfer+0x1fc>)
 8004ab0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ab2:	4b3d      	ldr	r3, [pc, #244]	; (8004ba8 <USB_HC_StartXfer+0x1fc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aba:	4a3b      	ldr	r2, [pc, #236]	; (8004ba8 <USB_HC_StartXfer+0x1fc>)
 8004abc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	78db      	ldrb	r3, [r3, #3]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d006      	beq.n	8004ad4 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004ac6:	4b38      	ldr	r3, [pc, #224]	; (8004ba8 <USB_HC_StartXfer+0x1fc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ace:	4a36      	ldr	r2, [pc, #216]	; (8004ba8 <USB_HC_StartXfer+0x1fc>)
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e005      	b.n	8004ae0 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004ad4:	4b34      	ldr	r3, [pc, #208]	; (8004ba8 <USB_HC_StartXfer+0x1fc>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004adc:	4a32      	ldr	r2, [pc, #200]	; (8004ba8 <USB_HC_StartXfer+0x1fc>)
 8004ade:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ae0:	4b31      	ldr	r3, [pc, #196]	; (8004ba8 <USB_HC_StartXfer+0x1fc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ae8:	4a2f      	ldr	r2, [pc, #188]	; (8004ba8 <USB_HC_StartXfer+0x1fc>)
 8004aea:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af8:	461a      	mov	r2, r3
 8004afa:	4b2b      	ldr	r3, [pc, #172]	; (8004ba8 <USB_HC_StartXfer+0x1fc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	78db      	ldrb	r3, [r3, #3]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d148      	bne.n	8004b9a <USB_HC_StartXfer+0x1ee>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d044      	beq.n	8004b9a <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	79db      	ldrb	r3, [r3, #7]
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d831      	bhi.n	8004b7c <USB_HC_StartXfer+0x1d0>
 8004b18:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <USB_HC_StartXfer+0x174>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004b31 	.word	0x08004b31
 8004b24:	08004b55 	.word	0x08004b55
 8004b28:	08004b31 	.word	0x08004b31
 8004b2c:	08004b55 	.word	0x08004b55
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	3303      	adds	r3, #3
 8004b36:	089b      	lsrs	r3, r3, #2
 8004b38:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004b3a:	89fa      	ldrh	r2, [r7, #14]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d91c      	bls.n	8004b80 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f043 0220 	orr.w	r2, r3, #32
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	619a      	str	r2, [r3, #24]
          }
          break;
 8004b52:	e015      	b.n	8004b80 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	3303      	adds	r3, #3
 8004b5a:	089b      	lsrs	r3, r3, #2
 8004b5c:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004b5e:	89fa      	ldrh	r2, [r7, #14]
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d90a      	bls.n	8004b84 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	619a      	str	r2, [r3, #24]
          }
          break;
 8004b7a:	e003      	b.n	8004b84 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8004b7c:	bf00      	nop
 8004b7e:	e002      	b.n	8004b86 <USB_HC_StartXfer+0x1da>
          break;
 8004b80:	bf00      	nop
 8004b82:	e000      	b.n	8004b86 <USB_HC_StartXfer+0x1da>
          break;
 8004b84:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68d9      	ldr	r1, [r3, #12]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	785a      	ldrb	r2, [r3, #1]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff fc2d 	bl	80043f4 <USB_WritePacket>
    }

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3720      	adds	r7, #32
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	1ff80000 	.word	0x1ff80000
 8004ba8:	200000c4 	.word	0x200000c4

08004bac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	b29b      	uxth	r3, r3
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr

08004bcc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	0c9b      	lsrs	r3, r3, #18
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <USB_HC_Halt+0x3a>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d16c      	bne.n	8004ce0 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c24:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d143      	bne.n	8004cba <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c50:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c70:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c90:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	3301      	adds	r3, #1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c9e:	d81d      	bhi.n	8004cdc <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cb6:	d0ec      	beq.n	8004c92 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004cb8:	e080      	b.n	8004dbc <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	0151      	lsls	r1, r2, #5
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	440a      	add	r2, r1
 8004cd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cd8:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004cda:	e06f      	b.n	8004dbc <USB_HC_Halt+0x1f0>
          break;
 8004cdc:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004cde:	e06d      	b.n	8004dbc <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cfe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d143      	bne.n	8004d98 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d2e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d4e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d6e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	3301      	adds	r3, #1
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d7c:	d81d      	bhi.n	8004dba <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d94:	d0ec      	beq.n	8004d70 <USB_HC_Halt+0x1a4>
 8004d96:	e011      	b.n	8004dbc <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	e000      	b.n	8004dbc <USB_HC_Halt+0x1f0>
          break;
 8004dba:	bf00      	nop
    }
  }

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7ff fa8d 	bl	80042f8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004dde:	2110      	movs	r1, #16
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff fac3 	bl	800436c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7ff fae4 	bl	80043b4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004dec:	2300      	movs	r3, #0
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	e01f      	b.n	8004e32 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e08:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e10:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e18:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e26:	461a      	mov	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b0f      	cmp	r3, #15
 8004e36:	d9dc      	bls.n	8004df2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	e034      	b.n	8004ea8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e54:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e5c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e64:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e72:	461a      	mov	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e84:	d80c      	bhi.n	8004ea0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e9c:	d0ec      	beq.n	8004e78 <USB_StopHost+0xb0>
 8004e9e:	e000      	b.n	8004ea2 <USB_StopHost+0xda>
        break;
 8004ea0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b0f      	cmp	r3, #15
 8004eac:	d9c7      	bls.n	8004e3e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ec2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff fa07 	bl	80042d8 <USB_EnableGlobalInt>

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <USBH_HID_InterfaceInit>:
   	  	  	  	   	   	   	        is used as an index of HID_Handle index as well.

  phost->pActiveClass->interfaces - this variable hold all successfully initialised interfaces.
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8004ed4:	b5b0      	push	{r4, r5, r7, lr}
 8004ed6:	b08a      	sub	sp, #40	; 0x28
 8004ed8:	af04      	add	r7, sp, #16
 8004eda:	6078      	str	r0, [r7, #4]
	  USBH_StatusTypeDef status = USBH_BUSY;
 8004edc:	2301      	movs	r3, #1
 8004ede:	75fb      	strb	r3, [r7, #23]
	  static HID_HandleTypeDef *HID_Handle;
	  USBH_InterfaceDescTypeDef *Itf_Desc;

	  uint8_t iface_num = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	753b      	strb	r3, [r7, #20]
	  uint8_t i = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	75bb      	strb	r3, [r7, #22]
	  uint8_t max_ep;
	  uint8_t num = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	757b      	strb	r3, [r7, #21]


	  switch(phost->pActiveClass->iface_init)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004ef2:	7f9b      	ldrb	r3, [r3, #30]
 8004ef4:	2b05      	cmp	r3, #5
 8004ef6:	f200 824f 	bhi.w	8005398 <USBH_HID_InterfaceInit+0x4c4>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <USBH_HID_InterfaceInit+0x2c>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f19 	.word	0x08004f19
 8004f04:	08004f81 	.word	0x08004f81
 8004f08:	08005067 	.word	0x08005067
 8004f0c:	080050e7 	.word	0x080050e7
 8004f10:	080051cf 	.word	0x080051cf
 8004f14:	08005355 	.word	0x08005355
	  {
	  	  case IFACE_INIT:
		  {

			  phost->pActiveClass->iface_initnum = 0U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004f1e:	2200      	movs	r2, #0
 8004f20:	775a      	strb	r2, [r3, #29]

			  //init all possible HID_Handlers even if not all will be used.

			  for (;i<USBH_MAX_NUM_INTERFACES;i++)
 8004f22:	e01f      	b.n	8004f64 <USBH_HID_InterfaceInit+0x90>
			  {
				  phost->pActiveClass->pData[i] = (HID_HandleTypeDef *)USBH_malloc (sizeof(HID_HandleTypeDef));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8004f2a:	7dbd      	ldrb	r5, [r7, #22]
 8004f2c:	206c      	movs	r0, #108	; 0x6c
 8004f2e:	f003 fb23 	bl	8008578 <malloc>
 8004f32:	4603      	mov	r3, r0
 8004f34:	461a      	mov	r2, r3
 8004f36:	f105 0308 	add.w	r3, r5, #8
 8004f3a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
				  HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[i];
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004f44:	7dba      	ldrb	r2, [r7, #22]
 8004f46:	3208      	adds	r2, #8
 8004f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f4c:	4aae      	ldr	r2, [pc, #696]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 8004f4e:	6013      	str	r3, [r2, #0]
				  memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8004f50:	4bad      	ldr	r3, [pc, #692]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	226c      	movs	r2, #108	; 0x6c
 8004f56:	2100      	movs	r1, #0
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f003 fb1d 	bl	8008598 <memset>
			  for (;i<USBH_MAX_NUM_INTERFACES;i++)
 8004f5e:	7dbb      	ldrb	r3, [r7, #22]
 8004f60:	3301      	adds	r3, #1
 8004f62:	75bb      	strb	r3, [r7, #22]
 8004f64:	7dbb      	ldrb	r3, [r7, #22]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d9dc      	bls.n	8004f24 <USBH_HID_InterfaceInit+0x50>
			  }
			  phost->pActiveClass->interfaces = 0U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004f70:	2200      	movs	r2, #0
 8004f72:	771a      	strb	r2, [r3, #28]

			  phost->pActiveClass->iface_init = IFACE_READHID;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	779a      	strb	r2, [r3, #30]

		  }
	  	  break;
 8004f7e:	e20b      	b.n	8005398 <USBH_HID_InterfaceInit+0x4c4>

	  	  case IFACE_READHID:
	  	  {
	  		iface_num = phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum].bInterfaceNumber;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004f86:	7f5b      	ldrb	r3, [r3, #29]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	231a      	movs	r3, #26
 8004f8e:	fb03 f301 	mul.w	r3, r3, r1
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	753b      	strb	r3, [r7, #20]
	  		USBH_SelectInterface(phost, iface_num);
 8004f9c:	7d3b      	ldrb	r3, [r7, #20]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f001 ff0b 	bl	8006dbc <USBH_SelectInterface>

	  	  if (USBH_HID_GetHIDDescriptor (phost, USB_HID_DESC_SIZE,phost->pActiveClass->iface_initnum)== USBH_OK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004fac:	7f5b      	ldrb	r3, [r3, #29]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2109      	movs	r1, #9
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fbce 	bl	8005754 <USBH_HID_GetHIDDescriptor>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 81e9 	bne.w	8005392 <USBH_HID_InterfaceInit+0x4be>
	  	    {
	  		    HID_Handle = phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	f8d2 2378 	ldr.w	r2, [r2, #888]	; 0x378
 8004fcc:	7f52      	ldrb	r2, [r2, #29]
 8004fce:	3208      	adds	r2, #8
 8004fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fd4:	4a8c      	ldr	r2, [pc, #560]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 8004fd6:	6013      	str	r3, [r2, #0]
	  		    HID_Handle->state     = HID_INIT;
 8004fd8:	4b8b      	ldr	r3, [pc, #556]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	709a      	strb	r2, [r3, #2]
	  		    HID_Handle->ctl_state = HID_REQ_INIT;
 8004fe0:	4b89      	ldr	r3, [pc, #548]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	715a      	strb	r2, [r3, #5]
	  		    HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8004fee:	4618      	mov	r0, r3
 8004ff0:	4b85      	ldr	r3, [pc, #532]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	221a      	movs	r2, #26
 8004ff8:	fb02 f200 	mul.w	r2, r2, r0
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f202 324a 	addw	r2, r2, #842	; 0x34a
 8005002:	7812      	ldrb	r2, [r2, #0]
 8005004:	769a      	strb	r2, [r3, #26]
	  		    HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800500c:	4618      	mov	r0, r3
 800500e:	4b7e      	ldr	r3, [pc, #504]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	221a      	movs	r2, #26
 8005016:	fb02 f200 	mul.w	r2, r2, r0
 800501a:	440a      	add	r2, r1
 800501c:	f502 7253 	add.w	r2, r2, #844	; 0x34c
 8005020:	8812      	ldrh	r2, [r2, #0]
 8005022:	831a      	strh	r2, [r3, #24]
	  		    HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bInterval ;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800502a:	4619      	mov	r1, r3
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	231a      	movs	r3, #26
 8005030:	fb03 f301 	mul.w	r3, r3, r1
 8005034:	4413      	add	r3, r2
 8005036:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800503a:	781a      	ldrb	r2, [r3, #0]
 800503c:	4b72      	ldr	r3, [pc, #456]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	b292      	uxth	r2, r2
 8005042:	839a      	strh	r2, [r3, #28]

	  	      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 8005044:	4b70      	ldr	r3, [pc, #448]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f000 fbe8 	bl	800582a <USBH_HID_ParseHIDDesc>
	  	      phost->pActiveClass->iface_init = IFACE_READHIDRPTDESC;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005060:	2202      	movs	r2, #2
 8005062:	779a      	strb	r2, [r3, #30]
	  	    }



	  	  }
	  	  break;
 8005064:	e195      	b.n	8005392 <USBH_HID_InterfaceInit+0x4be>


	  	case IFACE_READHIDRPTDESC:
	  		  	  {
	  		  		HID_Handle = phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	f8d2 2378 	ldr.w	r2, [r2, #888]	; 0x378
 8005072:	7f52      	ldrb	r2, [r2, #29]
 8005074:	3208      	adds	r2, #8
 8005076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507a:	4a63      	ldr	r2, [pc, #396]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 800507c:	6013      	str	r3, [r2, #0]
	  		  		iface_num = phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum].bInterfaceNumber;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005084:	7f5b      	ldrb	r3, [r3, #29]
 8005086:	4619      	mov	r1, r3
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	231a      	movs	r3, #26
 800508c:	fb03 f301 	mul.w	r3, r3, r1
 8005090:	4413      	add	r3, r2
 8005092:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	753b      	strb	r3, [r7, #20]
	  		  		USBH_SelectInterface(phost, iface_num);
 800509a:	7d3b      	ldrb	r3, [r7, #20]
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f001 fe8c 	bl	8006dbc <USBH_SelectInterface>

	  		  	  if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength,phost->pActiveClass->iface_initnum)== USBH_OK)
 80050a4:	4b58      	ldr	r3, [pc, #352]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80050b0:	7f5b      	ldrb	r3, [r3, #29]
 80050b2:	461a      	mov	r2, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fb30 	bl	800571a <USBH_HID_GetHIDReportDescriptor>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f040 816a 	bne.w	8005396 <USBH_HID_InterfaceInit+0x4c2>
	  		  	    {

	  		  		   parse_report_descriptor(phost->device.Data, HID_Handle->HID_Desc.wItemLength,&(HID_Handle->HID_Desc.RptDesc));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 80050c8:	4b4f      	ldr	r3, [pc, #316]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 80050ce:	4b4e      	ldr	r3, [pc, #312]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3330      	adds	r3, #48	; 0x30
 80050d4:	461a      	mov	r2, r3
 80050d6:	f001 fad1 	bl	800667c <parse_report_descriptor>

	  		  		   phost->pActiveClass->iface_init = IFACE_INITSUBCLASS;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80050e0:	2203      	movs	r2, #3
 80050e2:	779a      	strb	r2, [r3, #30]
	  		  	    }
	  		  	  }
	  		  	  break;
 80050e4:	e157      	b.n	8005396 <USBH_HID_InterfaceInit+0x4c2>

		case IFACE_INITSUBCLASS:
		  	{
		  		HID_Handle = phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	f8d2 2378 	ldr.w	r2, [r2, #888]	; 0x378
 80050f2:	7f52      	ldrb	r2, [r2, #29]
 80050f4:	3208      	adds	r2, #8
 80050f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050fa:	4a43      	ldr	r2, [pc, #268]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 80050fc:	6013      	str	r3, [r2, #0]

		  		Itf_Desc = &phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum];
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005104:	7f5b      	ldrb	r3, [r3, #29]
 8005106:	461a      	mov	r2, r3
 8005108:	231a      	movs	r3, #26
 800510a:	fb03 f302 	mul.w	r3, r3, r2
 800510e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	4413      	add	r3, r2
 8005116:	3306      	adds	r3, #6
 8005118:	60fb      	str	r3, [r7, #12]


		  		if((Itf_Desc->bInterfaceClass == 0x03 && Itf_Desc->bInterfaceSubClass == 0x01 && Itf_Desc->bInterfaceProtocol == HID_KEYBRD_BOOT_CODE) \
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	795b      	ldrb	r3, [r3, #5]
 800511e:	2b03      	cmp	r3, #3
 8005120:	d107      	bne.n	8005132 <USBH_HID_InterfaceInit+0x25e>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	799b      	ldrb	r3, [r3, #6]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d103      	bne.n	8005132 <USBH_HID_InterfaceInit+0x25e>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	79db      	ldrb	r3, [r3, #7]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d008      	beq.n	8005144 <USBH_HID_InterfaceInit+0x270>
		  			|| (	HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD  )	)
 8005132:	4b35      	ldr	r3, [pc, #212]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d10a      	bne.n	800515a <USBH_HID_InterfaceInit+0x286>

		  		{
		  			HID_Handle->Init =  USBH_HID_KeybdInit;
 8005144:	4b30      	ldr	r3, [pc, #192]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a30      	ldr	r2, [pc, #192]	; (800520c <USBH_HID_InterfaceInit+0x338>)
 800514a:	669a      	str	r2, [r3, #104]	; 0x68
		  			phost->pActiveClass->interfaces++;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005152:	7f1a      	ldrb	r2, [r3, #28]
 8005154:	3201      	adds	r2, #1
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	771a      	strb	r2, [r3, #28]
		  		}

		  		if((Itf_Desc->bInterfaceClass == 0x03 && Itf_Desc->bInterfaceSubClass == 0x01 && Itf_Desc->bInterfaceProtocol == HID_MOUSE_BOOT_CODE) \
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	795b      	ldrb	r3, [r3, #5]
 800515e:	2b03      	cmp	r3, #3
 8005160:	d107      	bne.n	8005172 <USBH_HID_InterfaceInit+0x29e>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	799b      	ldrb	r3, [r3, #6]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d103      	bne.n	8005172 <USBH_HID_InterfaceInit+0x29e>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	79db      	ldrb	r3, [r3, #7]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d008      	beq.n	8005184 <USBH_HID_InterfaceInit+0x2b0>
		  			  			|| (	HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE )	)
 8005172:	4b25      	ldr	r3, [pc, #148]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10a      	bne.n	800519a <USBH_HID_InterfaceInit+0x2c6>

		  		{
		  			HID_Handle->Init =  USBH_HID_MouseInit;
 8005184:	4b20      	ldr	r3, [pc, #128]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a21      	ldr	r2, [pc, #132]	; (8005210 <USBH_HID_InterfaceInit+0x33c>)
 800518a:	669a      	str	r2, [r3, #104]	; 0x68
		  			phost->pActiveClass->interfaces++;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005192:	7f1a      	ldrb	r2, [r3, #28]
 8005194:	3201      	adds	r2, #1
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	771a      	strb	r2, [r3, #28]
		  		}


		  		if(HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK	)
 800519a:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d10a      	bne.n	80051c2 <USBH_HID_InterfaceInit+0x2ee>
		  		{
		  			HID_Handle->Init =  USBH_HID_GamepadInit;
 80051ac:	4b16      	ldr	r3, [pc, #88]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a18      	ldr	r2, [pc, #96]	; (8005214 <USBH_HID_InterfaceInit+0x340>)
 80051b2:	669a      	str	r2, [r3, #104]	; 0x68
		  			phost->pActiveClass->interfaces++;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80051ba:	7f1a      	ldrb	r2, [r3, #28]
 80051bc:	3201      	adds	r2, #1
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	771a      	strb	r2, [r3, #28]
		  		}



		  		phost->pActiveClass->iface_init = IFACE_INITENDPNT;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80051c8:	2204      	movs	r2, #4
 80051ca:	779a      	strb	r2, [r3, #30]
		  	}
		  	break;
 80051cc:	e0e4      	b.n	8005398 <USBH_HID_InterfaceInit+0x4c4>

	  	case IFACE_INITENDPNT:
	  	{
	  		HID_Handle = phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	f8d2 2378 	ldr.w	r2, [r2, #888]	; 0x378
 80051da:	7f52      	ldrb	r2, [r2, #29]
 80051dc:	3208      	adds	r2, #8
 80051de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e2:	4a09      	ldr	r2, [pc, #36]	; (8005208 <USBH_HID_InterfaceInit+0x334>)
 80051e4:	6013      	str	r3, [r2, #0]

	  		 /* Check fo available number of endpoints*/
	  		    /* Find the number of EPs in the Interface Descriptor*/
	  		    /* Choose the lower number in order not to overrun the buffer allocated*/
	  		    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80051ec:	4619      	mov	r1, r3
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	231a      	movs	r3, #26
 80051f2:	fb03 f301 	mul.w	r3, r3, r1
 80051f6:	4413      	add	r3, r2
 80051f8:	f203 3342 	addw	r3, r3, #834	; 0x342
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	bf28      	it	cs
 8005202:	2302      	movcs	r3, #2
 8005204:	74fb      	strb	r3, [r7, #19]
	  		              phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
	  		                  USBH_MAX_NUM_ENDPOINTS);


	  		    /* Decode endpoint IN and OUT address from interface descriptor*/
	  		    for ( ;num < max_ep; num++)
 8005206:	e09a      	b.n	800533e <USBH_HID_InterfaceInit+0x46a>
 8005208:	200000c8 	.word	0x200000c8
 800520c:	08006149 	.word	0x08006149
 8005210:	080061f5 	.word	0x080061f5
 8005214:	08005b95 	.word	0x08005b95
	  		    {
	  		      if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800521e:	4618      	mov	r0, r3
 8005220:	7d7b      	ldrb	r3, [r7, #21]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	3301      	adds	r3, #1
 8005226:	00d9      	lsls	r1, r3, #3
 8005228:	231a      	movs	r3, #26
 800522a:	fb03 f300 	mul.w	r3, r3, r0
 800522e:	440b      	add	r3, r1
 8005230:	4413      	add	r3, r2
 8005232:	f203 3342 	addw	r3, r3, #834	; 0x342
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	b25b      	sxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	da3e      	bge.n	80052bc <USBH_HID_InterfaceInit+0x3e8>
	  		      {
	  		        HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005244:	461c      	mov	r4, r3
 8005246:	7d7a      	ldrb	r2, [r7, #21]
 8005248:	4b56      	ldr	r3, [pc, #344]	; (80053a4 <USBH_HID_InterfaceInit+0x4d0>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	3201      	adds	r2, #1
 8005250:	00d0      	lsls	r0, r2, #3
 8005252:	221a      	movs	r2, #26
 8005254:	fb02 f204 	mul.w	r2, r2, r4
 8005258:	4402      	add	r2, r0
 800525a:	440a      	add	r2, r1
 800525c:	f202 3242 	addw	r2, r2, #834	; 0x342
 8005260:	7812      	ldrb	r2, [r2, #0]
 8005262:	711a      	strb	r2, [r3, #4]
	  		        HID_Handle->InPipe  =\
	  		          USBH_AllocPipe(phost, HID_Handle->InEp);
 8005264:	4b4f      	ldr	r3, [pc, #316]	; (80053a4 <USBH_HID_InterfaceInit+0x4d0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	791a      	ldrb	r2, [r3, #4]
	  		        HID_Handle->InPipe  =\
 800526a:	4b4e      	ldr	r3, [pc, #312]	; (80053a4 <USBH_HID_InterfaceInit+0x4d0>)
 800526c:	681c      	ldr	r4, [r3, #0]
	  		          USBH_AllocPipe(phost, HID_Handle->InEp);
 800526e:	4611      	mov	r1, r2
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f002 fe82 	bl	8007f7a <USBH_AllocPipe>
 8005276:	4603      	mov	r3, r0
	  		        HID_Handle->InPipe  =\
 8005278:	7063      	strb	r3, [r4, #1]

	  		        /* Open pipe for IN endpoint*/
	  		        USBH_OpenPipe  (phost,
	  		                        HID_Handle->InPipe,
 800527a:	4b4a      	ldr	r3, [pc, #296]	; (80053a4 <USBH_HID_InterfaceInit+0x4d0>)
 800527c:	681b      	ldr	r3, [r3, #0]
	  		        USBH_OpenPipe  (phost,
 800527e:	7859      	ldrb	r1, [r3, #1]
	  		                        HID_Handle->InEp,
 8005280:	4b48      	ldr	r3, [pc, #288]	; (80053a4 <USBH_HID_InterfaceInit+0x4d0>)
 8005282:	681b      	ldr	r3, [r3, #0]
	  		        USBH_OpenPipe  (phost,
 8005284:	7918      	ldrb	r0, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
	  		                        phost->device.address,
	  		                        phost->device.speed,
	  		                        USB_EP_TYPE_INTR,
	  		                        HID_Handle->length);
 8005292:	4a44      	ldr	r2, [pc, #272]	; (80053a4 <USBH_HID_InterfaceInit+0x4d0>)
 8005294:	6812      	ldr	r2, [r2, #0]
	  		        USBH_OpenPipe  (phost,
 8005296:	8b12      	ldrh	r2, [r2, #24]
 8005298:	9202      	str	r2, [sp, #8]
 800529a:	2203      	movs	r2, #3
 800529c:	9201      	str	r2, [sp, #4]
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	4623      	mov	r3, r4
 80052a2:	4602      	mov	r2, r0
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f002 fe39 	bl	8007f1c <USBH_OpenPipe>

	  		        USBH_LL_SetToggle (phost, HID_Handle->InPipe, 0U);
 80052aa:	4b3e      	ldr	r3, [pc, #248]	; (80053a4 <USBH_HID_InterfaceInit+0x4d0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	2200      	movs	r2, #0
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f003 f8ef 	bl	8008498 <USBH_LL_SetToggle>
 80052ba:	e03d      	b.n	8005338 <USBH_HID_InterfaceInit+0x464>

	  		      }
	  		      else
	  		      {
	  		        HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80052c2:	461c      	mov	r4, r3
 80052c4:	7d7a      	ldrb	r2, [r7, #21]
 80052c6:	4b37      	ldr	r3, [pc, #220]	; (80053a4 <USBH_HID_InterfaceInit+0x4d0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	3201      	adds	r2, #1
 80052ce:	00d0      	lsls	r0, r2, #3
 80052d0:	221a      	movs	r2, #26
 80052d2:	fb02 f204 	mul.w	r2, r2, r4
 80052d6:	4402      	add	r2, r0
 80052d8:	440a      	add	r2, r1
 80052da:	f202 3242 	addw	r2, r2, #834	; 0x342
 80052de:	7812      	ldrb	r2, [r2, #0]
 80052e0:	70da      	strb	r2, [r3, #3]
	  		        HID_Handle->OutPipe  =\
	  		          USBH_AllocPipe(phost, HID_Handle->OutEp);
 80052e2:	4b30      	ldr	r3, [pc, #192]	; (80053a4 <USBH_HID_InterfaceInit+0x4d0>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	78da      	ldrb	r2, [r3, #3]
	  		        HID_Handle->OutPipe  =\
 80052e8:	4b2e      	ldr	r3, [pc, #184]	; (80053a4 <USBH_HID_InterfaceInit+0x4d0>)
 80052ea:	681c      	ldr	r4, [r3, #0]
	  		          USBH_AllocPipe(phost, HID_Handle->OutEp);
 80052ec:	4611      	mov	r1, r2
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f002 fe43 	bl	8007f7a <USBH_AllocPipe>
 80052f4:	4603      	mov	r3, r0
	  		        HID_Handle->OutPipe  =\
 80052f6:	7023      	strb	r3, [r4, #0]

	  		        /* Open pipe for OUT endpoint*/
	  		        USBH_OpenPipe  (phost,
	  		                        HID_Handle->OutPipe,
 80052f8:	4b2a      	ldr	r3, [pc, #168]	; (80053a4 <USBH_HID_InterfaceInit+0x4d0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
	  		        USBH_OpenPipe  (phost,
 80052fc:	7819      	ldrb	r1, [r3, #0]
	  		                        HID_Handle->OutEp,
 80052fe:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <USBH_HID_InterfaceInit+0x4d0>)
 8005300:	681b      	ldr	r3, [r3, #0]
	  		        USBH_OpenPipe  (phost,
 8005302:	78d8      	ldrb	r0, [r3, #3]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
	  		                        phost->device.address,
	  		                        phost->device.speed,
	  		                        USB_EP_TYPE_INTR,
	  		                        HID_Handle->length);
 8005310:	4a24      	ldr	r2, [pc, #144]	; (80053a4 <USBH_HID_InterfaceInit+0x4d0>)
 8005312:	6812      	ldr	r2, [r2, #0]
	  		        USBH_OpenPipe  (phost,
 8005314:	8b12      	ldrh	r2, [r2, #24]
 8005316:	9202      	str	r2, [sp, #8]
 8005318:	2203      	movs	r2, #3
 800531a:	9201      	str	r2, [sp, #4]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	4623      	mov	r3, r4
 8005320:	4602      	mov	r2, r0
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f002 fdfa 	bl	8007f1c <USBH_OpenPipe>

	  		        USBH_LL_SetToggle (phost, HID_Handle->OutPipe, 0U);
 8005328:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <USBH_HID_InterfaceInit+0x4d0>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2200      	movs	r2, #0
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f003 f8b0 	bl	8008498 <USBH_LL_SetToggle>
	  		    for ( ;num < max_ep; num++)
 8005338:	7d7b      	ldrb	r3, [r7, #21]
 800533a:	3301      	adds	r3, #1
 800533c:	757b      	strb	r3, [r7, #21]
 800533e:	7d7a      	ldrb	r2, [r7, #21]
 8005340:	7cfb      	ldrb	r3, [r7, #19]
 8005342:	429a      	cmp	r2, r3
 8005344:	f4ff af68 	bcc.w	8005218 <USBH_HID_InterfaceInit+0x344>
	  		      }

	  		    }

	  		phost->pActiveClass->iface_init = IFACE_SELECTIFACE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800534e:	2205      	movs	r2, #5
 8005350:	779a      	strb	r2, [r3, #30]
	  	}
	  	break;
 8005352:	e021      	b.n	8005398 <USBH_HID_InterfaceInit+0x4c4>


	  	case IFACE_SELECTIFACE:
	  		  	{
	  		  	    //Check if we have any other interfaces to phost->device.CfgDesc.bNumInterfaces
	  		  		if (++phost->pActiveClass->iface_initnum<phost->device.CfgDesc.bNumInterfaces)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800535a:	7f5a      	ldrb	r2, [r3, #29]
 800535c:	3201      	adds	r2, #1
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	775a      	strb	r2, [r3, #29]
 8005362:	7f5a      	ldrb	r2, [r3, #29]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800536a:	429a      	cmp	r2, r3
 800536c:	d20e      	bcs.n	800538c <USBH_HID_InterfaceInit+0x4b8>
	  		  		{
	  		  		   //Have we reached maximum of interfaces? USBH_MAX_NUM_INTERFACES
	  		  		   if (phost->pActiveClass->iface_initnum<=USBH_MAX_NUM_INTERFACES)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005374:	7f5b      	ldrb	r3, [r3, #29]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d805      	bhi.n	8005386 <USBH_HID_InterfaceInit+0x4b2>
	  		  		   {
	  		  			phost->pActiveClass->iface_init = IFACE_READHID;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005380:	2201      	movs	r2, #1
 8005382:	779a      	strb	r2, [r3, #30]
	  		  		else
	  		  		{
	  		  		  status = USBH_OK;
	  		  		}
	  		  	}
	  		  	break;
 8005384:	e008      	b.n	8005398 <USBH_HID_InterfaceInit+0x4c4>
	  		  			status = USBH_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	75fb      	strb	r3, [r7, #23]
	  		  	break;
 800538a:	e005      	b.n	8005398 <USBH_HID_InterfaceInit+0x4c4>
	  		  		  status = USBH_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	75fb      	strb	r3, [r7, #23]
	  		  	break;
 8005390:	e002      	b.n	8005398 <USBH_HID_InterfaceInit+0x4c4>
	  	  break;
 8005392:	bf00      	nop
 8005394:	e000      	b.n	8005398 <USBH_HID_InterfaceInit+0x4c4>
	  		  	  break;
 8005396:	bf00      	nop
	  }

  return status;
 8005398:	7dfb      	ldrb	r3, [r7, #23]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bdb0      	pop	{r4, r5, r7, pc}
 80053a2:	bf00      	nop
 80053a4:	200000c8 	.word	0x200000c8

080053a8 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef static USBH_HID_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]

	HID_HandleTypeDef *HID_Handle ;

	uint8_t i = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	73fb      	strb	r3, [r7, #15]
	for( ;i <= (USBH_MAX_NUM_INTERFACES - 1); i++)
 80053b4:	e055      	b.n	8005462 <USBH_HID_InterfaceDeInit+0xba>
	{

		HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[i];
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80053bc:	7bfa      	ldrb	r2, [r7, #15]
 80053be:	3208      	adds	r2, #8
 80053c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c4:	60bb      	str	r3, [r7, #8]

		if(HID_Handle->InPipe != 0x00U)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	785b      	ldrb	r3, [r3, #1]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00e      	beq.n	80053ec <USBH_HID_InterfaceDeInit+0x44>
		{
			USBH_ClosePipe  (phost, HID_Handle->InPipe);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	785b      	ldrb	r3, [r3, #1]
 80053d2:	4619      	mov	r1, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f002 fdc0 	bl	8007f5a <USBH_ClosePipe>
			USBH_FreePipe  (phost, HID_Handle->InPipe);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f002 fde8 	bl	8007fb6 <USBH_FreePipe>
			HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2200      	movs	r2, #0
 80053ea:	705a      	strb	r2, [r3, #1]
  }

  if(HID_Handle->OutPipe != 0x00U)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <USBH_HID_InterfaceDeInit+0x6a>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f002 fdad 	bl	8007f5a <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->OutPipe);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f002 fdd5 	bl	8007fb6 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2200      	movs	r2, #0
 8005410:	701a      	strb	r2, [r3, #0]
  }

  if(phost->pActiveClass->pData[i])
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005418:	7bfa      	ldrb	r2, [r7, #15]
 800541a:	3208      	adds	r2, #8
 800541c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01b      	beq.n	800545c <USBH_HID_InterfaceDeInit+0xb4>
  {
    USBH_free (phost->pActiveClass->pData[i]);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800542a:	7bfa      	ldrb	r2, [r7, #15]
 800542c:	3208      	adds	r2, #8
 800542e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005432:	4618      	mov	r0, r3
 8005434:	f003 f8a8 	bl	8008588 <free>
    free(phost->pActiveClass->pData[i]);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800543e:	7bfa      	ldrb	r2, [r7, #15]
 8005440:	3208      	adds	r2, #8
 8005442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005446:	4618      	mov	r0, r3
 8005448:	f003 f89e 	bl	8008588 <free>
    phost->pActiveClass->pData[i] = 0U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005452:	7bfa      	ldrb	r2, [r7, #15]
 8005454:	3208      	adds	r2, #8
 8005456:	2100      	movs	r1, #0
 8005458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for( ;i <= (USBH_MAX_NUM_INTERFACES - 1); i++)
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	3301      	adds	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d9a6      	bls.n	80053b6 <USBH_HID_InterfaceDeInit+0xe>
  }
}
		phost->pActiveClass->iface_init = 0U;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800546e:	2200      	movs	r2, #0
 8005470:	779a      	strb	r2, [r3, #30]
		phost->pActiveClass->iface_initnum = 0U;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005478:	2200      	movs	r2, #0
 800547a:	775a      	strb	r2, [r3, #29]
		phost->pActiveClass->interfaces = 0U;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005482:	2200      	movs	r2, #0
 8005484:	771a      	strb	r2, [r3, #28]


  return USBH_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <USBH_HID_NextInterface>:
  * @param  phost: Host handle
  * @retval USBH Status
  */

USBH_StatusTypeDef static USBH_HID_NextInterface(USBH_HandleTypeDef *phost)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	phost->device.current_interface++;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800549e:	3301      	adds	r3, #1
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

	if(phost->device.current_interface >= phost->pActiveClass->interfaces)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 2320 	ldrb.w	r2, [r3, #800]	; 0x320
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80054b4:	7f1b      	ldrb	r3, [r3, #28]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d303      	bcc.n	80054c2 <USBH_HID_NextInterface+0x32>
	{
		phost->device.current_interface = 0;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
	}
}
 80054c2:	bf00      	nop
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr

080054ce <USBH_HID_DefaultInterface>:

USBH_StatusTypeDef static USBH_HID_DefaultInterface(USBH_HandleTypeDef *phost)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
		phost->device.current_interface = 0;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
}
 80054de:	bf00      	nop
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr
	...

080054ec <USBH_HID_ClassRequest>:


static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]

  USBH_HID_DefaultInterface(phost);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff ffea 	bl	80054ce <USBH_HID_DefaultInterface>

  USBH_StatusTypeDef status         = USBH_BUSY;
 80054fa:	2301      	movs	r3, #1
 80054fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 80054fe:	2301      	movs	r3, #1
 8005500:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	f892 2320 	ldrb.w	r2, [r2, #800]	; 0x320
 800550e:	3208      	adds	r2, #8
 8005510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005514:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	795b      	ldrb	r3, [r3, #5]
 800551a:	2b05      	cmp	r3, #5
 800551c:	d832      	bhi.n	8005584 <USBH_HID_ClassRequest+0x98>
 800551e:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <USBH_HID_ClassRequest+0x38>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	0800553d 	.word	0x0800553d
 8005528:	08005585 	.word	0x08005585
 800552c:	0800553d 	.word	0x0800553d
 8005530:	0800553d 	.word	0x0800553d
 8005534:	0800553d 	.word	0x0800553d
 8005538:	08005567 	.word	0x08005567
  case HID_REQ_INIT:
  case HID_REQ_GET_HID_DESC:
  case HID_REQ_GET_REPORT_DESC:
  case HID_REQ_SET_IDLE:

    classReqStatus = USBH_HID_SetIdle (phost, 0U, 0U);
 800553c:	2200      	movs	r2, #0
 800553e:	2100      	movs	r1, #0
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f924 	bl	800578e <USBH_HID_SetIdle>
 8005546:	4603      	mov	r3, r0
 8005548:	73bb      	strb	r3, [r7, #14]

    /* set Idle */
    if (classReqStatus == USBH_OK)
 800554a:	7bbb      	ldrb	r3, [r7, #14]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d103      	bne.n	8005558 <USBH_HID_ClassRequest+0x6c>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2205      	movs	r2, #5
 8005554:	715a      	strb	r2, [r3, #5]
      if(classReqStatus == USBH_NOT_SUPPORTED)
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
      }
    }
    break;
 8005556:	e017      	b.n	8005588 <USBH_HID_ClassRequest+0x9c>
      if(classReqStatus == USBH_NOT_SUPPORTED)
 8005558:	7bbb      	ldrb	r3, [r7, #14]
 800555a:	2b03      	cmp	r3, #3
 800555c:	d114      	bne.n	8005588 <USBH_HID_ClassRequest+0x9c>
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2205      	movs	r2, #5
 8005562:	715a      	strb	r2, [r3, #5]
    break;
 8005564:	e010      	b.n	8005588 <USBH_HID_ClassRequest+0x9c>

  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
	  classReqStatus = USBH_HID_SetProtocol (phost, 0U);
 8005566:	2100      	movs	r1, #0
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f938 	bl	80057de <USBH_HID_SetProtocol>
 800556e:	4603      	mov	r3, r0
 8005570:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 8005572:	7bbb      	ldrb	r3, [r7, #14]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d109      	bne.n	800558c <USBH_HID_ClassRequest+0xa0>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2201      	movs	r2, #1
 800557c:	715a      	strb	r2, [r3, #5]

      /* all requests performed*/
      //

      status = USBH_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	73fb      	strb	r3, [r7, #15]
    }
    break;
 8005582:	e003      	b.n	800558c <USBH_HID_ClassRequest+0xa0>

  case HID_REQ_IDLE:
  default:
    break;
 8005584:	bf00      	nop
 8005586:	e002      	b.n	800558e <USBH_HID_ClassRequest+0xa2>
    break;
 8005588:	bf00      	nop
 800558a:	e000      	b.n	800558e <USBH_HID_ClassRequest+0xa2>
    break;
 800558c:	bf00      	nop
  }

  return status;
 800558e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	73fb      	strb	r3, [r7, #15]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	f892 2320 	ldrb.w	r2, [r2, #800]	; 0x320
 80055b0:	3208      	adds	r2, #8
 80055b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b6:	60bb      	str	r3, [r7, #8]

  switch (HID_Handle->state)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	789b      	ldrb	r3, [r3, #2]
 80055bc:	2b06      	cmp	r3, #6
 80055be:	d87a      	bhi.n	80056b6 <USBH_HID_Process+0x11e>
 80055c0:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <USBH_HID_Process+0x30>)
 80055c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c6:	bf00      	nop
 80055c8:	080055e5 	.word	0x080055e5
 80055cc:	080056b7 	.word	0x080056b7
 80055d0:	080056b7 	.word	0x080056b7
 80055d4:	080056b7 	.word	0x080056b7
 80055d8:	08005617 	.word	0x08005617
 80055dc:	08005601 	.word	0x08005601
 80055e0:	08005645 	.word	0x08005645
  {
  case HID_INIT:
    HID_Handle->Init(phost);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	4798      	blx	r3
    HID_Handle->state = HID_SYNC;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2205      	movs	r2, #5
 80055f0:	709a      	strb	r2, [r3, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80055f8:	2102      	movs	r1, #2
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	4798      	blx	r3
    break;
 80055fe:	e05f      	b.n	80056c0 <USBH_HID_Process+0x128>


  case HID_SYNC:
    /* Sync with start of Even Frame */
    if(phost->Timer & 1U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d055      	beq.n	80056ba <USBH_HID_Process+0x122>
    {
      HID_Handle->state = HID_GET_DATA;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2204      	movs	r2, #4
 8005612:	709a      	strb	r2, [r3, #2]
    }


    break;
 8005614:	e051      	b.n	80056ba <USBH_HID_Process+0x122>

  case HID_GET_DATA:
    USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6959      	ldr	r1, [r3, #20]
                              (uint8_t)HID_Handle->length,
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	8b1b      	ldrh	r3, [r3, #24]
    USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800561e:	b2da      	uxtb	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	785b      	ldrb	r3, [r3, #1]
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f002 fc5a 	bl	8007ede <USBH_InterruptReceiveData>
                              HID_Handle->InPipe);

    HID_Handle->state = HID_POLL;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2206      	movs	r2, #6
 800562e:	709a      	strb	r2, [r3, #2]
    HID_Handle->timer = phost->Timer;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	621a      	str	r2, [r3, #32]
    HID_Handle->DataReady = 0U;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    break;
 8005642:	e03d      	b.n	80056c0 <USBH_HID_Process+0x128>

  case HID_POLL:
    if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_DONE)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f002 ff03 	bl	8008456 <USBH_LL_GetURBState>
 8005650:	4603      	mov	r3, r0
 8005652:	2b01      	cmp	r3, #1
 8005654:	d116      	bne.n	8005684 <USBH_HID_Process+0xec>
    {
      if(HID_Handle->DataReady == 0U)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800565c:	2b00      	cmp	r3, #0
 800565e:	d12e      	bne.n	80056be <USBH_HID_Process+0x126>
      {
        USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f103 0008 	add.w	r0, r3, #8
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6959      	ldr	r1, [r3, #20]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	8b1b      	ldrh	r3, [r3, #24]
 800566e:	461a      	mov	r2, r3
 8005670:	f000 f9a1 	bl	80059b6 <USBH_HID_FifoWrite>
        HID_Handle->DataReady = 1U;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        USBH_HID_EventCallback(phost);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f9ed 	bl	8005a5c <USBH_HID_EventCallback>
          HID_Handle->state = HID_GET_DATA;
          USBH_HID_NextInterface(phost);
        }
      }
    }
    break;
 8005682:	e01c      	b.n	80056be <USBH_HID_Process+0x126>
      if(USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f002 fee3 	bl	8008456 <USBH_LL_GetURBState>
 8005690:	4603      	mov	r3, r0
 8005692:	2b05      	cmp	r3, #5
 8005694:	d113      	bne.n	80056be <USBH_HID_Process+0x126>
        if(USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	7e9b      	ldrb	r3, [r3, #26]
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f002 f831 	bl	8007704 <USBH_ClrFeature>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <USBH_HID_Process+0x126>
          HID_Handle->state = HID_GET_DATA;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2204      	movs	r2, #4
 80056ac:	709a      	strb	r2, [r3, #2]
          USBH_HID_NextInterface(phost);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff feee 	bl	8005490 <USBH_HID_NextInterface>
    break;
 80056b4:	e003      	b.n	80056be <USBH_HID_Process+0x126>

  default:
    break;
 80056b6:	bf00      	nop
 80056b8:	e002      	b.n	80056c0 <USBH_HID_Process+0x128>
    break;
 80056ba:	bf00      	nop
 80056bc:	e000      	b.n	80056c0 <USBH_HID_Process+0x128>
    break;
 80056be:	bf00      	nop
  }

  return status;
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop

080056cc <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	f892 2320 	ldrb.w	r2, [r2, #800]	; 0x320
 80056e0:	3208      	adds	r2, #8
 80056e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e6:	60fb      	str	r3, [r7, #12]

  if(HID_Handle->state == HID_POLL)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	789b      	ldrb	r3, [r3, #2]
 80056ec:	2b06      	cmp	r3, #6
 80056ee:	d10f      	bne.n	8005710 <USBH_HID_SOFProcess+0x44>
  {
    if(( phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	8b92      	ldrh	r2, [r2, #28]
 8005700:	4293      	cmp	r3, r2
 8005702:	d305      	bcc.n	8005710 <USBH_HID_SOFProcess+0x44>
    {
      HID_Handle->state = HID_GET_DATA;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2204      	movs	r2, #4
 8005708:	709a      	strb	r2, [r3, #2]
      USBH_HID_NextInterface(phost);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff fec0 	bl	8005490 <USBH_HID_NextInterface>
    }
  }
  return USBH_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor (USBH_HandleTypeDef *phost,
                                                    uint16_t length, uint8_t iface_idx)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b086      	sub	sp, #24
 800571e:	af02      	add	r7, sp, #8
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	807b      	strh	r3, [r7, #2]
 8005726:	4613      	mov	r3, r2
 8005728:	707b      	strb	r3, [r7, #1]

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
							  iface_idx,
                              phost->device.Data,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005730:	7879      	ldrb	r1, [r7, #1]
 8005732:	887a      	ldrh	r2, [r7, #2]
 8005734:	9201      	str	r2, [sp, #4]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	460b      	mov	r3, r1
 800573a:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800573e:	2101      	movs	r1, #1
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 ff3a 	bl	80075ba <USBH_GetDescriptor>
 8005746:	4603      	mov	r3, r0
 8005748:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800574a:	7bfb      	ldrb	r3, [r7, #15]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <USBH_HID_GetHIDDescriptor>:
  * @param  Length : HID Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor (USBH_HandleTypeDef *phost,
                                              uint16_t length, uint8_t iface_idx)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af02      	add	r7, sp, #8
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	807b      	strh	r3, [r7, #2]
 8005760:	4613      	mov	r3, r2
 8005762:	707b      	strb	r3, [r7, #1]

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID,
							  iface_idx,
                              phost->device.Data,
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800576a:	7879      	ldrb	r1, [r7, #1]
 800576c:	887a      	ldrh	r2, [r7, #2]
 800576e:	9201      	str	r2, [sp, #4]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	460b      	mov	r3, r1
 8005774:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8005778:	2101      	movs	r1, #1
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 ff1d 	bl	80075ba <USBH_GetDescriptor>
 8005780:	4603      	mov	r3, r0
 8005782:	73fb      	strb	r3, [r7, #15]
                              length);

  return status;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle (USBH_HandleTypeDef *phost,
                                     uint8_t duration,
                                     uint8_t reportId)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b082      	sub	sp, #8
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	460b      	mov	r3, r1
 8005798:	70fb      	strb	r3, [r7, #3]
 800579a:	4613      	mov	r3, r2
 800579c:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2221      	movs	r2, #33	; 0x21
 80057a2:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	220a      	movs	r2, #10
 80057a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	78bb      	ldrb	r3, [r7, #2]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	4313      	orrs	r3, r2
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80057ca:	2200      	movs	r2, #0
 80057cc:	2100      	movs	r1, #0
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f002 f973 	bl	8007aba <USBH_CtlReq>
 80057d4:	4603      	mov	r3, r0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	460b      	mov	r3, r1
 80057e8:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2221      	movs	r2, #33	; 0x21
 80057ee:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	220b      	movs	r2, #11
 80057f4:	745a      	strb	r2, [r3, #17]
  if(protocol)
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	825a      	strh	r2, [r3, #18]
 8005802:	e002      	b.n	800580a <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005816:	2200      	movs	r2, #0
 8005818:	2100      	movs	r1, #0
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f002 f94d 	bl	8007aba <USBH_CtlReq>
 8005820:	4603      	mov	r3, r0

}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc (HID_DescTypeDef *desc, uint8_t *buf)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]

  desc->bLength                  = *(uint8_t  *) (buf + 0);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781a      	ldrb	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	701a      	strb	r2, [r3, #0]
  desc->bDescriptorType          = *(uint8_t  *) (buf + 1);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	785a      	ldrb	r2, [r3, #1]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	705a      	strb	r2, [r3, #1]
  desc->bcdHID                   =  LE16  (buf + 2);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	3302      	adds	r3, #2
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	b29a      	uxth	r2, r3
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	3303      	adds	r3, #3
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	b29b      	uxth	r3, r3
 8005858:	4313      	orrs	r3, r2
 800585a:	b29a      	uxth	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	805a      	strh	r2, [r3, #2]
  desc->bCountryCode             = *(uint8_t  *) (buf + 4);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	791a      	ldrb	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	711a      	strb	r2, [r3, #4]
  desc->bNumDescriptors          = *(uint8_t  *) (buf + 5);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	795a      	ldrb	r2, [r3, #5]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	715a      	strb	r2, [r3, #5]
  desc->bReportDescriptorType    = *(uint8_t  *) (buf + 6);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	799a      	ldrb	r2, [r3, #6]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	719a      	strb	r2, [r3, #6]
  desc->wItemLength              =  LE16  (buf + 7);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	3307      	adds	r3, #7
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	b29a      	uxth	r2, r3
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	b29b      	uxth	r3, r3
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	b29b      	uxth	r3, r3
 800588c:	4313      	orrs	r3, r2
 800588e:	b29a      	uxth	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	811a      	strh	r2, [r3, #8]
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr

0800589e <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 80058a6:	23ff      	movs	r3, #255	; 0xff
 80058a8:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if(phost->gState == HOST_CLASS)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b0b      	cmp	r3, #11
 80058b2:	d117      	bne.n	80058e4 <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80058ba:	4619      	mov	r1, r3
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	231a      	movs	r3, #26
 80058c0:	fb03 f301 	mul.w	r3, r3, r1
 80058c4:	4413      	add	r3, r2
 80058c6:	f203 3345 	addw	r3, r3, #837	; 0x345
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	73bb      	strb	r3, [r7, #14]
    if(InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80058ce:	7bbb      	ldrb	r3, [r7, #14]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d102      	bne.n	80058da <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 80058d4:	2302      	movs	r3, #2
 80058d6:	73fb      	strb	r3, [r7, #15]
 80058d8:	e004      	b.n	80058e4 <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if(InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 80058da:	7bbb      	ldrb	r3, [r7, #14]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d101      	bne.n	80058e4 <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 80058e0:	2301      	movs	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr

080058f0 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef * f, uint8_t * buf, uint16_t size)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80fb      	strh	r3, [r7, #6]
     f->head = 0U;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	809a      	strh	r2, [r3, #4]
     f->tail = 0U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	80da      	strh	r2, [r3, #6]
     f->lock = 0U;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	729a      	strb	r2, [r3, #10]
     f->size = size;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	88fa      	ldrh	r2, [r7, #6]
 8005914:	811a      	strh	r2, [r3, #8]
     f->buf = buf;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	601a      	str	r2, [r3, #0]
}
 800591c:	bf00      	nop
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr

08005926 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8005926:	b480      	push	{r7}
 8005928:	b087      	sub	sp, #28
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	4613      	mov	r3, r2
 8005932:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t * p;
  p = (uint8_t*) buf;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	613b      	str	r3, [r7, #16]

  if(f->lock == 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	7a9b      	ldrb	r3, [r3, #10]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d131      	bne.n	80059a4 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	729a      	strb	r2, [r3, #10]
    for(i = 0U; i < nbytes; i++)
 8005946:	2300      	movs	r3, #0
 8005948:	82fb      	strh	r3, [r7, #22]
 800594a:	e027      	b.n	800599c <USBH_HID_FifoRead+0x76>
    {
      if( f->tail != f->head)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	88da      	ldrh	r2, [r3, #6]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	889b      	ldrh	r3, [r3, #4]
 8005954:	429a      	cmp	r2, r3
 8005956:	d019      	beq.n	800598c <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	88d2      	ldrh	r2, [r2, #6]
 8005960:	441a      	add	r2, r3
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1c59      	adds	r1, r3, #1
 8005966:	6139      	str	r1, [r7, #16]
 8005968:	7812      	ldrb	r2, [r2, #0]
 800596a:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	88db      	ldrh	r3, [r3, #6]
 8005970:	3301      	adds	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	80da      	strh	r2, [r3, #6]
        if( f->tail == f->size)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	88da      	ldrh	r2, [r3, #6]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	891b      	ldrh	r3, [r3, #8]
 8005980:	429a      	cmp	r2, r3
 8005982:	d108      	bne.n	8005996 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	80da      	strh	r2, [r3, #6]
 800598a:	e004      	b.n	8005996 <USBH_HID_FifoRead+0x70>
        }
      } else
      {
        f->lock = 0U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	729a      	strb	r2, [r3, #10]
        return i;
 8005992:	8afb      	ldrh	r3, [r7, #22]
 8005994:	e00a      	b.n	80059ac <USBH_HID_FifoRead+0x86>
    for(i = 0U; i < nbytes; i++)
 8005996:	8afb      	ldrh	r3, [r7, #22]
 8005998:	3301      	adds	r3, #1
 800599a:	82fb      	strh	r3, [r7, #22]
 800599c:	8afa      	ldrh	r2, [r7, #22]
 800599e:	88fb      	ldrh	r3, [r7, #6]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d3d3      	bcc.n	800594c <USBH_HID_FifoRead+0x26>
      }
    }
  }
  f->lock = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80059aa:	88fb      	ldrh	r3, [r7, #6]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr

080059b6 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b087      	sub	sp, #28
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	60f8      	str	r0, [r7, #12]
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	4613      	mov	r3, r2
 80059c2:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;
  p = (uint8_t*) buf;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	613b      	str	r3, [r7, #16]
  if(f->lock == 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	7a9b      	ldrb	r3, [r3, #10]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d13c      	bne.n	8005a4a <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	729a      	strb	r2, [r3, #10]
    for(i = 0U; i < nbytes; i++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	82fb      	strh	r3, [r7, #22]
 80059da:	e032      	b.n	8005a42 <USBH_HID_FifoWrite+0x8c>
    {
      if( (f->head + 1U == f->tail) ||
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	889b      	ldrh	r3, [r3, #4]
 80059e0:	3301      	adds	r3, #1
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	88d2      	ldrh	r2, [r2, #6]
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00a      	beq.n	8005a00 <USBH_HID_FifoWrite+0x4a>
         ( (f->head + 1U == f->size) && (f->tail == 0U)))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	889b      	ldrh	r3, [r3, #4]
 80059ee:	3301      	adds	r3, #1
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	8912      	ldrh	r2, [r2, #8]
      if( (f->head + 1U == f->tail) ||
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d108      	bne.n	8005a0a <USBH_HID_FifoWrite+0x54>
         ( (f->head + 1U == f->size) && (f->tail == 0U)))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	88db      	ldrh	r3, [r3, #6]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d104      	bne.n	8005a0a <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	729a      	strb	r2, [r3, #10]
        return i;
 8005a06:	8afb      	ldrh	r3, [r7, #22]
 8005a08:	e023      	b.n	8005a52 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	613a      	str	r2, [r7, #16]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	6812      	ldr	r2, [r2, #0]
 8005a14:	68f9      	ldr	r1, [r7, #12]
 8005a16:	8889      	ldrh	r1, [r1, #4]
 8005a18:	440a      	add	r2, r1
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	7013      	strb	r3, [r2, #0]
        f->head++;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	889b      	ldrh	r3, [r3, #4]
 8005a22:	3301      	adds	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	809a      	strh	r2, [r3, #4]
        if( f->head == f->size)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	889a      	ldrh	r2, [r3, #4]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	891b      	ldrh	r3, [r3, #8]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d102      	bne.n	8005a3c <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	809a      	strh	r2, [r3, #4]
    for(i = 0U; i < nbytes; i++)
 8005a3c:	8afb      	ldrh	r3, [r7, #22]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	82fb      	strh	r3, [r7, #22]
 8005a42:	8afa      	ldrh	r2, [r7, #22]
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d3c8      	bcc.n	80059dc <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }
  f->lock = 0U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	729a      	strb	r2, [r3, #10]
  return nbytes;
 8005a50:	88fb      	ldrh	r3, [r7, #6]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr

08005a5c <USBH_HID_EventCallback>:
* @brief  The function is a callback about HID Data events
*  @param  phost: Selected device
* @retval None
*/
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]

}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr

08005a6e <collect_bits>:
static uint8_t* gamepad_report_data;

static uint8_t gamepad_info;


static uint16_t collect_bits(uint8_t *p, uint16_t offset, uint8_t size, int is_signed) {
 8005a6e:	b480      	push	{r7}
 8005a70:	b089      	sub	sp, #36	; 0x24
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	607b      	str	r3, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	817b      	strh	r3, [r7, #10]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	727b      	strb	r3, [r7, #9]
  // mask unused bits of first byte
  uint8_t mask = 0xff << (offset&7);
 8005a80:	897b      	ldrh	r3, [r7, #10]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	22ff      	movs	r2, #255	; 0xff
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	75fb      	strb	r3, [r7, #23]
  uint8_t byte = offset/8;
 8005a8e:	897b      	ldrh	r3, [r7, #10]
 8005a90:	08db      	lsrs	r3, r3, #3
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	77fb      	strb	r3, [r7, #31]
  uint8_t bits = size;
 8005a96:	7a7b      	ldrb	r3, [r7, #9]
 8005a98:	77bb      	strb	r3, [r7, #30]
  uint8_t shift = offset&7;
 8005a9a:	897b      	ldrh	r3, [r7, #10]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	777b      	strb	r3, [r7, #29]

  uint16_t rval = (p[byte++] & mask) >> shift;
 8005aa4:	7ffb      	ldrb	r3, [r7, #31]
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	77fa      	strb	r2, [r7, #31]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	781a      	ldrb	r2, [r3, #0]
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	461a      	mov	r2, r3
 8005aba:	7f7b      	ldrb	r3, [r7, #29]
 8005abc:	fa42 f303 	asr.w	r3, r2, r3
 8005ac0:	837b      	strh	r3, [r7, #26]
  mask = 0xff;
 8005ac2:	23ff      	movs	r3, #255	; 0xff
 8005ac4:	75fb      	strb	r3, [r7, #23]
  shift = 8-shift;
 8005ac6:	7f7b      	ldrb	r3, [r7, #29]
 8005ac8:	f1c3 0308 	rsb	r3, r3, #8
 8005acc:	777b      	strb	r3, [r7, #29]
  bits -= shift;
 8005ace:	7fba      	ldrb	r2, [r7, #30]
 8005ad0:	7f7b      	ldrb	r3, [r7, #29]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	77bb      	strb	r3, [r7, #30]

  // first byte already contained more bits than we need
  if(shift > size) {
 8005ad6:	7f7a      	ldrb	r2, [r7, #29]
 8005ad8:	7a7b      	ldrb	r3, [r7, #9]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d937      	bls.n	8005b4e <collect_bits+0xe0>
    // mask unused bits
    rval &= (1<<size)-1;
 8005ade:	7a7b      	ldrb	r3, [r7, #9]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	b21a      	sxth	r2, r3
 8005aee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005af2:	4013      	ands	r3, r2
 8005af4:	b21b      	sxth	r3, r3
 8005af6:	837b      	strh	r3, [r7, #26]
 8005af8:	e02c      	b.n	8005b54 <collect_bits+0xe6>
  } else {
    // further bytes if required
    while(bits) {
      mask = (bits<8)?(0xff>>(8-bits)):0xff;
 8005afa:	7fbb      	ldrb	r3, [r7, #30]
 8005afc:	2b07      	cmp	r3, #7
 8005afe:	d807      	bhi.n	8005b10 <collect_bits+0xa2>
 8005b00:	7fbb      	ldrb	r3, [r7, #30]
 8005b02:	f1c3 0308 	rsb	r3, r3, #8
 8005b06:	22ff      	movs	r2, #255	; 0xff
 8005b08:	fa42 f303 	asr.w	r3, r2, r3
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	e000      	b.n	8005b12 <collect_bits+0xa4>
 8005b10:	23ff      	movs	r3, #255	; 0xff
 8005b12:	75fb      	strb	r3, [r7, #23]
      rval += (p[byte++] & mask) << shift;
 8005b14:	7ffb      	ldrb	r3, [r7, #31]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	77fa      	strb	r2, [r7, #31]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	781a      	ldrb	r2, [r3, #0]
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
 8005b24:	4013      	ands	r3, r2
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	7f7b      	ldrb	r3, [r7, #29]
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	8b7b      	ldrh	r3, [r7, #26]
 8005b34:	4413      	add	r3, r2
 8005b36:	837b      	strh	r3, [r7, #26]
      shift += 8;
 8005b38:	7f7b      	ldrb	r3, [r7, #29]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	777b      	strb	r3, [r7, #29]
      bits -= (bits>8)?8:bits;
 8005b3e:	7fbb      	ldrb	r3, [r7, #30]
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	bf28      	it	cs
 8005b44:	2308      	movcs	r3, #8
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	7fba      	ldrb	r2, [r7, #30]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	77bb      	strb	r3, [r7, #30]
    while(bits) {
 8005b4e:	7fbb      	ldrb	r3, [r7, #30]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1d2      	bne.n	8005afa <collect_bits+0x8c>
    }
  }

  if(is_signed) {
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d016      	beq.n	8005b88 <collect_bits+0x11a>
    // do sign expansion
    uint16_t sign_bit = 1<<(size-1);
 8005b5a:	7a7b      	ldrb	r3, [r7, #9]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	2201      	movs	r2, #1
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	833b      	strh	r3, [r7, #24]
    if(rval & sign_bit) {
 8005b66:	8b7a      	ldrh	r2, [r7, #26]
 8005b68:	8b3b      	ldrh	r3, [r7, #24]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <collect_bits+0x11a>
      while(sign_bit) {
 8005b72:	e006      	b.n	8005b82 <collect_bits+0x114>
	rval |= sign_bit;
 8005b74:	8b7a      	ldrh	r2, [r7, #26]
 8005b76:	8b3b      	ldrh	r3, [r7, #24]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	837b      	strh	r3, [r7, #26]
	sign_bit <<= 1;
 8005b7c:	8b3b      	ldrh	r3, [r7, #24]
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	833b      	strh	r3, [r7, #24]
      while(sign_bit) {
 8005b82:	8b3b      	ldrh	r3, [r7, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1f5      	bne.n	8005b74 <collect_bits+0x106>
      }

    }
  }

  return rval;
 8005b88:	8b7b      	ldrh	r3, [r7, #26]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3724      	adds	r7, #36	; 0x24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr

08005b94 <USBH_HID_GamepadInit>:
  *         The function init the HID gamepad.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GamepadInit(USBH_HandleTypeDef *phost)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	f892 2320 	ldrb.w	r2, [r2, #800]	; 0x320
 8005ba8:	3208      	adds	r2, #8
 8005baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bae:	60fb      	str	r3, [r7, #12]
  uint8_t reportSize = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	72fb      	strb	r3, [r7, #11]
  reportSize = HID_Handle->HID_Desc.RptDesc.report_size;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005bba:	72fb      	strb	r3, [r7, #11]





  HID_Handle->length = reportSize;
 8005bbc:	7afb      	ldrb	r3, [r7, #11]
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	831a      	strh	r2, [r3, #24]


  HID_Handle->pData = (uint8_t*) malloc (reportSize *sizeof(uint8_t)); //(uint8_t*)(void *)
 8005bc4:	7afb      	ldrb	r3, [r7, #11]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f002 fcd6 	bl	8008578 <malloc>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	615a      	str	r2, [r3, #20]
  gamepad_report_data = HID_Handle->pData;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	4a0b      	ldr	r2, [pc, #44]	; (8005c08 <USBH_HID_GamepadInit+0x74>)
 8005bda:	6013      	str	r3, [r2, #0]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * reportSize);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f103 0008 	add.w	r0, r3, #8
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 8005be8:	7afb      	ldrb	r3, [r7, #11]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	0092      	lsls	r2, r2, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f7ff fe7a 	bl	80058f0 <USBH_HID_FifoInit>

  return USBH_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	200000cc 	.word	0x200000cc

08005c0c <USBH_HID_GetGamepadInfo>:
  *         The function return gamepad information.
  * @param  phost: Host handle
  * @retval gamepad information
  */
uint8_t *USBH_HID_GetGamepadInfo(USBH_HandleTypeDef *phost)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
	//refresh value of joymap and return value
	if(USBH_HID_GamepadDecode(phost)== USBH_OK)
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f80d 	bl	8005c34 <USBH_HID_GamepadDecode>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <USBH_HID_GetGamepadInfo+0x18>
	{
		return &gamepad_info;
 8005c20:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <USBH_HID_GetGamepadInfo+0x24>)
 8005c22:	e000      	b.n	8005c26 <USBH_HID_GetGamepadInfo+0x1a>
	}
	else
	{
		return NULL;
 8005c24:	2300      	movs	r3, #0
	}
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	200000d0 	.word	0x200000d0

08005c34 <USBH_HID_GamepadDecode>:
  *         The function decode gamepad data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_GamepadDecode(USBH_HandleTypeDef *phost)
{
 8005c34:	b5b0      	push	{r4, r5, r7, lr}
 8005c36:	b098      	sub	sp, #96	; 0x60
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	f892 2320 	ldrb.w	r2, [r2, #800]	; 0x320
 8005c48:	3208      	adds	r2, #8
 8005c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4e:	65bb      	str	r3, [r7, #88]	; 0x58

	  if(HID_Handle->length == 0U)
 8005c50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c52:	8b1b      	ldrh	r3, [r3, #24]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <USBH_HID_GamepadDecode+0x28>
	  {
	    return USBH_FAIL;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e26f      	b.n	800613c <USBH_HID_GamepadDecode+0x508>
	  }

	  if(USBH_HID_FifoRead(&HID_Handle->fifo, gamepad_report_data, HID_Handle->length) ==  HID_Handle->length)
 8005c5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c5e:	f103 0008 	add.w	r0, r3, #8
 8005c62:	4bd2      	ldr	r3, [pc, #840]	; (8005fac <USBH_HID_GamepadDecode+0x378>)
 8005c64:	6819      	ldr	r1, [r3, #0]
 8005c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c68:	8b1b      	ldrh	r3, [r3, #24]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f7ff fe5b 	bl	8005926 <USBH_HID_FifoRead>
 8005c70:	4603      	mov	r3, r0
 8005c72:	461a      	mov	r2, r3
 8005c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c76:	8b1b      	ldrh	r3, [r3, #24]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	f040 825e 	bne.w	800613a <USBH_HID_GamepadDecode+0x506>
	    {


		uint8_t jmap = 0;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		uint8_t btn = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		uint8_t btn_extra = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		int16_t a[2];
		uint8_t i;

		hid_report_t conf = HID_Handle->HID_Desc.RptDesc;
 8005c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c92:	f107 040c 	add.w	r4, r7, #12
 8005c96:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8005c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ca6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005caa:	6020      	str	r0, [r4, #0]
 8005cac:	3404      	adds	r4, #4
 8005cae:	8021      	strh	r1, [r4, #0]

		// skip report id if present
		uint8_t *p = gamepad_report_data+(conf.report_id?1:0);
 8005cb0:	4bbe      	ldr	r3, [pc, #760]	; (8005fac <USBH_HID_GamepadDecode+0x378>)
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	7b7b      	ldrb	r3, [r7, #13]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <USBH_HID_GamepadDecode+0x8a>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <USBH_HID_GamepadDecode+0x8c>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	4413      	add	r3, r2
 8005cc2:	657b      	str	r3, [r7, #84]	; 0x54


		//process axis
		// two axes ...
				for(i=0;i<2;i++) {
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8005cca:	e03d      	b.n	8005d48 <USBH_HID_GamepadDecode+0x114>
					// if logical minimum is > logical maximum then logical minimum
					// is signed. This means that the value itself is also signed
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 8005ccc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005cd8:	4413      	add	r3, r2
 8005cda:	f833 2c50 	ldrh.w	r2, [r3, #-80]
					conf.joystick_mouse.axis[i].logical.max;
 8005cde:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005cea:	440b      	add	r3, r1
 8005cec:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	bf8c      	ite	hi
 8005cf4:	2301      	movhi	r3, #1
 8005cf6:	2300      	movls	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	64bb      	str	r3, [r7, #72]	; 0x48
					a[i] = collect_bits(p, conf.joystick_mouse.axis[i].offset,
 8005cfc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005d00:	3301      	adds	r3, #1
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d08:	4413      	add	r3, r2
 8005d0a:	f833 1c54 	ldrh.w	r1, [r3, #-84]
 8005d0e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005d12:	3301      	adds	r3, #1
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f813 2c52 	ldrb.w	r2, [r3, #-82]
 8005d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d22:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005d24:	f7ff fea3 	bl	8005a6e <collect_bits>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005d30:	b212      	sxth	r2, r2
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005d38:	440b      	add	r3, r1
 8005d3a:	f823 2c1c 	strh.w	r2, [r3, #-28]
				for(i=0;i<2;i++) {
 8005d3e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005d42:	3301      	adds	r3, #1
 8005d44:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8005d48:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d9bd      	bls.n	8005ccc <USBH_HID_GamepadDecode+0x98>
								conf.joystick_mouse.axis[i].size, is_signed);
				}

		//process 4 first buttons
		for(i=0;i<4;i++)
 8005d50:	2300      	movs	r3, #0
 8005d52:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8005d56:	e02a      	b.n	8005dae <USBH_HID_GamepadDecode+0x17a>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8005d58:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d64:	4413      	add	r3, r2
 8005d66:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d6e:	4413      	add	r3, r2
 8005d70:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 8005d72:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005d76:	330c      	adds	r3, #12
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005d7e:	440b      	add	r3, r1
 8005d80:	f813 3c53 	ldrb.w	r3, [r3, #-83]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8005d84:	4013      	ands	r3, r2
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <USBH_HID_GamepadDecode+0x170>
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 8005d8c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005d90:	2201      	movs	r2, #1
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	b25a      	sxtb	r2, r3
 8005d98:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	b25b      	sxtb	r3, r3
 8005da0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		for(i=0;i<4;i++)
 8005da4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005da8:	3301      	adds	r3, #1
 8005daa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8005dae:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d9d0      	bls.n	8005d58 <USBH_HID_GamepadDecode+0x124>

		// ... and the eight extra buttons
		for(i=4;i<12;i++)
 8005db6:	2304      	movs	r3, #4
 8005db8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8005dbc:	e02b      	b.n	8005e16 <USBH_HID_GamepadDecode+0x1e2>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8005dbe:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005dca:	4413      	add	r3, r2
 8005dcc:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd4:	4413      	add	r3, r2
 8005dd6:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8005dd8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005ddc:	330c      	adds	r3, #12
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005de4:	440b      	add	r3, r1
 8005de6:	f813 3c53 	ldrb.w	r3, [r3, #-83]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8005dea:	4013      	ands	r3, r2
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00c      	beq.n	8005e0c <USBH_HID_GamepadDecode+0x1d8>
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8005df2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005df6:	3b04      	subs	r3, #4
 8005df8:	2201      	movs	r2, #1
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	b25a      	sxtb	r2, r3
 8005e00:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8005e04:	4313      	orrs	r3, r2
 8005e06:	b25b      	sxtb	r3, r3
 8005e08:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		for(i=4;i<12;i++)
 8005e0c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005e10:	3301      	adds	r3, #1
 8005e12:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8005e16:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005e1a:	2b0b      	cmp	r3, #11
 8005e1c:	d9cf      	bls.n	8005dbe <USBH_HID_GamepadDecode+0x18a>



	for(i=0;i<2;i++) {
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8005e24:	e14c      	b.n	80060c0 <USBH_HID_GamepadDecode+0x48c>

		int hrange = (conf.joystick_mouse.axis[i].logical.max - abs(conf.joystick_mouse.axis[i].logical.min)) / 2;
 8005e26:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005e32:	4413      	add	r3, r2
 8005e34:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005e3e:	3301      	adds	r3, #1
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005e46:	440b      	add	r3, r1
 8005e48:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	0fda      	lsrs	r2, r3, #31
 8005e50:	4413      	add	r3, r2
 8005e52:	105b      	asrs	r3, r3, #1
 8005e54:	653b      	str	r3, [r7, #80]	; 0x50
		int dead = hrange/63;
 8005e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e58:	4a55      	ldr	r2, [pc, #340]	; (8005fb0 <USBH_HID_GamepadDecode+0x37c>)
 8005e5a:	fb82 1203 	smull	r1, r2, r2, r3
 8005e5e:	441a      	add	r2, r3
 8005e60:	1152      	asrs	r2, r2, #5
 8005e62:	17db      	asrs	r3, r3, #31
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (a[i] < conf.joystick_mouse.axis[i].logical.min) a[i] = conf.joystick_mouse.axis[i].logical.min;
 8005e68:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005e72:	4413      	add	r3, r2
 8005e74:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005e7e:	3301      	adds	r3, #1
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005e86:	440b      	add	r3, r1
 8005e88:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	da12      	bge.n	8005eb6 <USBH_HID_GamepadDecode+0x282>
 8005e90:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005e94:	3301      	adds	r3, #1
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f833 2c50 	ldrh.w	r2, [r3, #-80]
 8005ea2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005ea6:	b212      	sxth	r2, r2
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005eae:	440b      	add	r3, r1
 8005eb0:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8005eb4:	e025      	b.n	8005f02 <USBH_HID_GamepadDecode+0x2ce>
		else if (a[i] > conf.joystick_mouse.axis[i].logical.max) a[i] = conf.joystick_mouse.axis[i].logical.max;
 8005eb6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005ecc:	3301      	adds	r3, #1
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005ed4:	440b      	add	r3, r1
 8005ed6:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	dd11      	ble.n	8005f02 <USBH_HID_GamepadDecode+0x2ce>
 8005ede:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005eea:	4413      	add	r3, r2
 8005eec:	f833 2c4e 	ldrh.w	r2, [r3, #-78]
 8005ef0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005ef4:	b212      	sxth	r2, r2
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005efc:	440b      	add	r3, r1
 8005efe:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i] = a[i] - (abs(conf.joystick_mouse.axis[i].logical.min) + conf.joystick_mouse.axis[i].logical.max) / 2;
 8005f02:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005f18:	3301      	adds	r3, #1
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005f20:	440b      	add	r3, r1
 8005f22:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8005f26:	4619      	mov	r1, r3
 8005f28:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8005f34:	4403      	add	r3, r0
 8005f36:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8005f3a:	440b      	add	r3, r1
 8005f3c:	0fd9      	lsrs	r1, r3, #31
 8005f3e:	440b      	add	r3, r1
 8005f40:	105b      	asrs	r3, r3, #1
 8005f42:	425b      	negs	r3, r3
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005f4e:	b212      	sxth	r2, r2
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005f56:	440b      	add	r3, r1
 8005f58:	f823 2c1c 	strh.w	r2, [r3, #-28]

		hrange -= dead;
 8005f5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	653b      	str	r3, [r7, #80]	; 0x50
		if (a[i] < -dead) a[i] += dead;
 8005f64:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f6e:	4413      	add	r3, r2
 8005f70:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8005f74:	461a      	mov	r2, r3
 8005f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f78:	425b      	negs	r3, r3
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	da1a      	bge.n	8005fb4 <USBH_HID_GamepadDecode+0x380>
 8005f7e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f88:	4413      	add	r3, r2
 8005f8a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	4413      	add	r3, r2
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005f9c:	b212      	sxth	r2, r2
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005fa4:	440b      	add	r3, r1
 8005fa6:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8005faa:	e02f      	b.n	800600c <USBH_HID_GamepadDecode+0x3d8>
 8005fac:	200000cc 	.word	0x200000cc
 8005fb0:	82082083 	.word	0x82082083
		else if (a[i] > dead) a[i] -= dead;
 8005fb4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	da16      	bge.n	8005ffa <USBH_HID_GamepadDecode+0x3c6>
 8005fcc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005fea:	b212      	sxth	r2, r2
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005ff2:	440b      	add	r3, r1
 8005ff4:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8005ff8:	e008      	b.n	800600c <USBH_HID_GamepadDecode+0x3d8>
		else a[i] = 0;
 8005ffa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006004:	4413      	add	r3, r2
 8006006:	2200      	movs	r2, #0
 8006008:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i] = (a[i] * 127) / hrange;
 800600c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006016:	4413      	add	r3, r2
 8006018:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 800601c:	461a      	mov	r2, r3
 800601e:	4613      	mov	r3, r2
 8006020:	01db      	lsls	r3, r3, #7
 8006022:	1a9a      	subs	r2, r3, r2
 8006024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006026:	fb92 f2f3 	sdiv	r2, r2, r3
 800602a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800602e:	b212      	sxth	r2, r2
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006036:	440b      	add	r3, r1
 8006038:	f823 2c1c 	strh.w	r2, [r3, #-28]

		if (a[i] < -127) a[i] = -127;
 800603c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006046:	4413      	add	r3, r2
 8006048:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 800604c:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8006050:	da0a      	bge.n	8006068 <USBH_HID_GamepadDecode+0x434>
 8006052:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800605c:	4413      	add	r3, r2
 800605e:	f64f 7281 	movw	r2, #65409	; 0xff81
 8006062:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8006066:	e012      	b.n	800608e <USBH_HID_GamepadDecode+0x45a>
		else if (a[i] > 127) a[i] = 127;
 8006068:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006072:	4413      	add	r3, r2
 8006074:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8006078:	2b7f      	cmp	r3, #127	; 0x7f
 800607a:	dd08      	ble.n	800608e <USBH_HID_GamepadDecode+0x45a>
 800607c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006086:	4413      	add	r3, r2
 8006088:	227f      	movs	r2, #127	; 0x7f
 800608a:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i]=a[i]+127; // mist wants a value in the range [0..255]
 800608e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006098:	4413      	add	r3, r2
 800609a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	337f      	adds	r3, #127	; 0x7f
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80060a8:	b212      	sxth	r2, r2
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80060b0:	440b      	add	r3, r1
 80060b2:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for(i=0;i<2;i++) {
 80060b6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80060ba:	3301      	adds	r3, #1
 80060bc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80060c0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	f67f aeae 	bls.w	8005e26 <USBH_HID_GamepadDecode+0x1f2>
	}

				if(a[0] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_LEFT;
 80060ca:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80060ce:	2b3f      	cmp	r3, #63	; 0x3f
 80060d0:	dc05      	bgt.n	80060de <USBH_HID_GamepadDecode+0x4aa>
 80060d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060d6:	f043 0302 	orr.w	r3, r3, #2
 80060da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[0] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_RIGHT;
 80060de:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80060e2:	2bc0      	cmp	r3, #192	; 0xc0
 80060e4:	dd05      	ble.n	80060f2 <USBH_HID_GamepadDecode+0x4be>
 80060e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[1] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_UP;
 80060f2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80060f6:	2b3f      	cmp	r3, #63	; 0x3f
 80060f8:	dc05      	bgt.n	8006106 <USBH_HID_GamepadDecode+0x4d2>
 80060fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060fe:	f043 0308 	orr.w	r3, r3, #8
 8006102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[1] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_DOWN;
 8006106:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800610a:	2bc0      	cmp	r3, #192	; 0xc0
 800610c:	dd05      	ble.n	800611a <USBH_HID_GamepadDecode+0x4e6>
 800610e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006112:	f043 0304 	orr.w	r3, r3, #4
 8006116:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				jmap |= btn << JOY_BTN_SHIFT;      // add buttons
 800611a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	b25a      	sxtb	r2, r3
 8006122:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006126:	4313      	orrs	r3, r2
 8006128:	b25b      	sxtb	r3, r3
 800612a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

				gamepad_info = jmap;
 800612e:	4a05      	ldr	r2, [pc, #20]	; (8006144 <USBH_HID_GamepadDecode+0x510>)
 8006130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006134:	7013      	strb	r3, [r2, #0]

		  return USBH_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	e000      	b.n	800613c <USBH_HID_GamepadDecode+0x508>
	    }



	  return USBH_FAIL;
 800613a:	2302      	movs	r3, #2

}
 800613c:	4618      	mov	r0, r3
 800613e:	3760      	adds	r7, #96	; 0x60
 8006140:	46bd      	mov	sp, r7
 8006142:	bdb0      	pop	{r4, r5, r7, pc}
 8006144:	200000d0 	.word	0x200000d0

08006148 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	f892 2320 	ldrb.w	r2, [r2, #800]	; 0x320
 800615c:	3208      	adds	r2, #8
 800615e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006162:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl=keybd_info.lshift = 0U;
 8006164:	4b21      	ldr	r3, [pc, #132]	; (80061ec <USBH_HID_KeybdInit+0xa4>)
 8006166:	2200      	movs	r2, #0
 8006168:	709a      	strb	r2, [r3, #2]
 800616a:	4b20      	ldr	r3, [pc, #128]	; (80061ec <USBH_HID_KeybdInit+0xa4>)
 800616c:	789a      	ldrb	r2, [r3, #2]
 800616e:	4b1f      	ldr	r3, [pc, #124]	; (80061ec <USBH_HID_KeybdInit+0xa4>)
 8006170:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt=keybd_info.lgui = 0U;
 8006172:	4b1e      	ldr	r3, [pc, #120]	; (80061ec <USBH_HID_KeybdInit+0xa4>)
 8006174:	2200      	movs	r2, #0
 8006176:	711a      	strb	r2, [r3, #4]
 8006178:	4b1c      	ldr	r3, [pc, #112]	; (80061ec <USBH_HID_KeybdInit+0xa4>)
 800617a:	791a      	ldrb	r2, [r3, #4]
 800617c:	4b1b      	ldr	r3, [pc, #108]	; (80061ec <USBH_HID_KeybdInit+0xa4>)
 800617e:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl=keybd_info.rshift = 0U;
 8006180:	4b1a      	ldr	r3, [pc, #104]	; (80061ec <USBH_HID_KeybdInit+0xa4>)
 8006182:	2200      	movs	r2, #0
 8006184:	719a      	strb	r2, [r3, #6]
 8006186:	4b19      	ldr	r3, [pc, #100]	; (80061ec <USBH_HID_KeybdInit+0xa4>)
 8006188:	799a      	ldrb	r2, [r3, #6]
 800618a:	4b18      	ldr	r3, [pc, #96]	; (80061ec <USBH_HID_KeybdInit+0xa4>)
 800618c:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt=keybd_info.rgui = 0U;
 800618e:	4b17      	ldr	r3, [pc, #92]	; (80061ec <USBH_HID_KeybdInit+0xa4>)
 8006190:	2200      	movs	r2, #0
 8006192:	721a      	strb	r2, [r3, #8]
 8006194:	4b15      	ldr	r3, [pc, #84]	; (80061ec <USBH_HID_KeybdInit+0xa4>)
 8006196:	7a1a      	ldrb	r2, [r3, #8]
 8006198:	4b14      	ldr	r3, [pc, #80]	; (80061ec <USBH_HID_KeybdInit+0xa4>)
 800619a:	71da      	strb	r2, [r3, #7]


  for(x = 0U; x < (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	e007      	b.n	80061b2 <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 80061a2:	4a13      	ldr	r2, [pc, #76]	; (80061f0 <USBH_HID_KeybdInit+0xa8>)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2100      	movs	r1, #0
 80061a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(x = 0U; x < (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3301      	adds	r3, #1
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d9f4      	bls.n	80061a2 <USBH_HID_KeybdInit+0x5a>
  }

  if(HID_Handle->length > (sizeof(keybd_report_data)/sizeof(uint32_t)))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	8b1b      	ldrh	r3, [r3, #24]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d902      	bls.n	80061c6 <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data)/sizeof(uint32_t));
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2202      	movs	r2, #2
 80061c4:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t*)(void *)keybd_report_data;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	4a09      	ldr	r2, [pc, #36]	; (80061f0 <USBH_HID_KeybdInit+0xa8>)
 80061ca:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f103 0008 	add.w	r0, r3, #8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80061d8:	2250      	movs	r2, #80	; 0x50
 80061da:	4619      	mov	r1, r3
 80061dc:	f7ff fb88 	bl	80058f0 <USBH_HID_FifoInit>

  return USBH_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20000168 	.word	0x20000168
 80061f0:	20000160 	.word	0x20000160

080061f4 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	f892 2320 	ldrb.w	r2, [r2, #800]	; 0x320
 8006208:	3208      	adds	r2, #8
 800620a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620e:	60fb      	str	r3, [r7, #12]
  uint8_t reportSize = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	72fb      	strb	r3, [r7, #11]
  reportSize = HID_Handle->HID_Desc.RptDesc.report_size;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800621a:	72fb      	strb	r3, [r7, #11]

  mouse_info.x = 0U;
 800621c:	4b19      	ldr	r3, [pc, #100]	; (8006284 <USBH_HID_MouseInit+0x90>)
 800621e:	2200      	movs	r2, #0
 8006220:	801a      	strh	r2, [r3, #0]
  mouse_info.y = 0U;
 8006222:	4b18      	ldr	r3, [pc, #96]	; (8006284 <USBH_HID_MouseInit+0x90>)
 8006224:	2200      	movs	r2, #0
 8006226:	805a      	strh	r2, [r3, #2]
  mouse_info.buttons[0] = 0U;
 8006228:	4b16      	ldr	r3, [pc, #88]	; (8006284 <USBH_HID_MouseInit+0x90>)
 800622a:	2200      	movs	r2, #0
 800622c:	711a      	strb	r2, [r3, #4]
  mouse_info.buttons[1] = 0U;
 800622e:	4b15      	ldr	r3, [pc, #84]	; (8006284 <USBH_HID_MouseInit+0x90>)
 8006230:	2200      	movs	r2, #0
 8006232:	715a      	strb	r2, [r3, #5]
  mouse_info.buttons[2] = 0U;
 8006234:	4b13      	ldr	r3, [pc, #76]	; (8006284 <USBH_HID_MouseInit+0x90>)
 8006236:	2200      	movs	r2, #0
 8006238:	719a      	strb	r2, [r3, #6]


  HID_Handle->length = reportSize;
 800623a:	7afb      	ldrb	r3, [r7, #11]
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	831a      	strh	r2, [r3, #24]


  HID_Handle->pData = (uint8_t*) malloc (reportSize *sizeof(uint8_t)); //(uint8_t*)(void *)
 8006242:	7afb      	ldrb	r3, [r7, #11]
 8006244:	4618      	mov	r0, r3
 8006246:	f002 f997 	bl	8008578 <malloc>
 800624a:	4603      	mov	r3, r0
 800624c:	461a      	mov	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	615a      	str	r2, [r3, #20]
  mouse_report_data = HID_Handle->pData;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	4a0c      	ldr	r2, [pc, #48]	; (8006288 <USBH_HID_MouseInit+0x94>)
 8006258:	6013      	str	r3, [r2, #0]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * reportSize);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f103 0008 	add.w	r0, r3, #8
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 8006266:	7afb      	ldrb	r3, [r7, #11]
 8006268:	b29b      	uxth	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	0092      	lsls	r2, r2, #2
 800626e:	4413      	add	r3, r2
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	b29b      	uxth	r3, r3
 8006274:	461a      	mov	r2, r3
 8006276:	f7ff fb3b 	bl	80058f0 <USBH_HID_FifoInit>

  return USBH_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20000178 	.word	0x20000178
 8006288:	20000180 	.word	0x20000180

0800628c <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 if(USBH_HID_MouseDecode(phost)== USBH_OK)
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f8a1 	bl	80063dc <USBH_HID_MouseDecode>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <USBH_HID_GetMouseInfo+0x18>
 {
  return &mouse_info;
 80062a0:	4b03      	ldr	r3, [pc, #12]	; (80062b0 <USBH_HID_GetMouseInfo+0x24>)
 80062a2:	e000      	b.n	80062a6 <USBH_HID_GetMouseInfo+0x1a>
 }
 else
 {
  return NULL;
 80062a4:	2300      	movs	r3, #0
 }
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000178 	.word	0x20000178

080062b4 <collect_bits>:


static uint16_t collect_bits(uint8_t *p, uint16_t offset, uint8_t size, int is_signed) {
 80062b4:	b480      	push	{r7}
 80062b6:	b089      	sub	sp, #36	; 0x24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	607b      	str	r3, [r7, #4]
 80062be:	460b      	mov	r3, r1
 80062c0:	817b      	strh	r3, [r7, #10]
 80062c2:	4613      	mov	r3, r2
 80062c4:	727b      	strb	r3, [r7, #9]
  // mask unused bits of first byte
  uint8_t mask = 0xff << (offset&7);
 80062c6:	897b      	ldrh	r3, [r7, #10]
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	22ff      	movs	r2, #255	; 0xff
 80062ce:	fa02 f303 	lsl.w	r3, r2, r3
 80062d2:	75fb      	strb	r3, [r7, #23]
  uint8_t byte = offset/8;
 80062d4:	897b      	ldrh	r3, [r7, #10]
 80062d6:	08db      	lsrs	r3, r3, #3
 80062d8:	b29b      	uxth	r3, r3
 80062da:	77fb      	strb	r3, [r7, #31]
  uint8_t bits = size;
 80062dc:	7a7b      	ldrb	r3, [r7, #9]
 80062de:	77bb      	strb	r3, [r7, #30]
  uint8_t shift = offset&7;
 80062e0:	897b      	ldrh	r3, [r7, #10]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	777b      	strb	r3, [r7, #29]

  //  iprintf("0 m:%x by:%d bi=%d sh=%d ->", mask, byte, bits, shift);
  uint16_t rval = (p[byte++] & mask) >> shift;
 80062ea:	7ffb      	ldrb	r3, [r7, #31]
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	77fa      	strb	r2, [r7, #31]
 80062f0:	461a      	mov	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	781a      	ldrb	r2, [r3, #0]
 80062f8:	7dfb      	ldrb	r3, [r7, #23]
 80062fa:	4013      	ands	r3, r2
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	7f7b      	ldrb	r3, [r7, #29]
 8006302:	fa42 f303 	asr.w	r3, r2, r3
 8006306:	837b      	strh	r3, [r7, #26]
  //  iprintf("%d\n", (int16_t)rval);
  mask = 0xff;
 8006308:	23ff      	movs	r3, #255	; 0xff
 800630a:	75fb      	strb	r3, [r7, #23]
  shift = 8-shift;
 800630c:	7f7b      	ldrb	r3, [r7, #29]
 800630e:	f1c3 0308 	rsb	r3, r3, #8
 8006312:	777b      	strb	r3, [r7, #29]
  bits -= shift;
 8006314:	7fba      	ldrb	r2, [r7, #30]
 8006316:	7f7b      	ldrb	r3, [r7, #29]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	77bb      	strb	r3, [r7, #30]

  // first byte already contained more bits than we need
  if(shift > size) {
 800631c:	7f7a      	ldrb	r2, [r7, #29]
 800631e:	7a7b      	ldrb	r3, [r7, #9]
 8006320:	429a      	cmp	r2, r3
 8006322:	d937      	bls.n	8006394 <collect_bits+0xe0>
    //    iprintf("  too many bits, masked %x ->", (1<<size)-1);
    // mask unused bits
    rval &= (1<<size)-1;
 8006324:	7a7b      	ldrb	r3, [r7, #9]
 8006326:	2201      	movs	r2, #1
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	b29b      	uxth	r3, r3
 800632e:	3b01      	subs	r3, #1
 8006330:	b29b      	uxth	r3, r3
 8006332:	b21a      	sxth	r2, r3
 8006334:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006338:	4013      	ands	r3, r2
 800633a:	b21b      	sxth	r3, r3
 800633c:	837b      	strh	r3, [r7, #26]
 800633e:	e02c      	b.n	800639a <collect_bits+0xe6>
    //    iprintf("%d\n", (int16_t)rval);
  } else {
    // further bytes if required
    while(bits) {
      mask = (bits<8)?(0xff>>(8-bits)):0xff;
 8006340:	7fbb      	ldrb	r3, [r7, #30]
 8006342:	2b07      	cmp	r3, #7
 8006344:	d807      	bhi.n	8006356 <collect_bits+0xa2>
 8006346:	7fbb      	ldrb	r3, [r7, #30]
 8006348:	f1c3 0308 	rsb	r3, r3, #8
 800634c:	22ff      	movs	r2, #255	; 0xff
 800634e:	fa42 f303 	asr.w	r3, r2, r3
 8006352:	b2db      	uxtb	r3, r3
 8006354:	e000      	b.n	8006358 <collect_bits+0xa4>
 8006356:	23ff      	movs	r3, #255	; 0xff
 8006358:	75fb      	strb	r3, [r7, #23]
      //      iprintf("+ m:%x by:%d bi=%d sh=%d ->", mask, byte, bits, shift);
      rval += (p[byte++] & mask) << shift;
 800635a:	7ffb      	ldrb	r3, [r7, #31]
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	77fa      	strb	r2, [r7, #31]
 8006360:	461a      	mov	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4413      	add	r3, r2
 8006366:	781a      	ldrb	r2, [r3, #0]
 8006368:	7dfb      	ldrb	r3, [r7, #23]
 800636a:	4013      	ands	r3, r2
 800636c:	b2db      	uxtb	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	7f7b      	ldrb	r3, [r7, #29]
 8006372:	fa02 f303 	lsl.w	r3, r2, r3
 8006376:	b29a      	uxth	r2, r3
 8006378:	8b7b      	ldrh	r3, [r7, #26]
 800637a:	4413      	add	r3, r2
 800637c:	837b      	strh	r3, [r7, #26]
      //      iprintf("%d\n", (int16_t)rval);
      shift += 8;
 800637e:	7f7b      	ldrb	r3, [r7, #29]
 8006380:	3308      	adds	r3, #8
 8006382:	777b      	strb	r3, [r7, #29]
      bits -= (bits>8)?8:bits;
 8006384:	7fbb      	ldrb	r3, [r7, #30]
 8006386:	2b08      	cmp	r3, #8
 8006388:	bf28      	it	cs
 800638a:	2308      	movcs	r3, #8
 800638c:	b2db      	uxtb	r3, r3
 800638e:	7fba      	ldrb	r2, [r7, #30]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	77bb      	strb	r3, [r7, #30]
    while(bits) {
 8006394:	7fbb      	ldrb	r3, [r7, #30]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1d2      	bne.n	8006340 <collect_bits+0x8c>
    }
  }

  if(is_signed) {
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d016      	beq.n	80063ce <collect_bits+0x11a>
    // do sign expansion
    uint16_t sign_bit = 1<<(size-1);
 80063a0:	7a7b      	ldrb	r3, [r7, #9]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	2201      	movs	r2, #1
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	833b      	strh	r3, [r7, #24]
    if(rval & sign_bit) {
 80063ac:	8b7a      	ldrh	r2, [r7, #26]
 80063ae:	8b3b      	ldrh	r3, [r7, #24]
 80063b0:	4013      	ands	r3, r2
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <collect_bits+0x11a>
      while(sign_bit) {
 80063b8:	e006      	b.n	80063c8 <collect_bits+0x114>
	rval |= sign_bit;
 80063ba:	8b7a      	ldrh	r2, [r7, #26]
 80063bc:	8b3b      	ldrh	r3, [r7, #24]
 80063be:	4313      	orrs	r3, r2
 80063c0:	837b      	strh	r3, [r7, #26]
	sign_bit <<= 1;
 80063c2:	8b3b      	ldrh	r3, [r7, #24]
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	833b      	strh	r3, [r7, #24]
      while(sign_bit) {
 80063c8:	8b3b      	ldrh	r3, [r7, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1f5      	bne.n	80063ba <collect_bits+0x106>
      }
      //      iprintf(" is negative -> sign expand to %d\n", (int16_t)rval);
    }
  }

  return rval;
 80063ce:	8b7b      	ldrh	r3, [r7, #26]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3724      	adds	r7, #36	; 0x24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr
	...

080063dc <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	f892 2320 	ldrb.w	r2, [r2, #800]	; 0x320
 80063f0:	3208      	adds	r2, #8
 80063f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f6:	61bb      	str	r3, [r7, #24]

  if(HID_Handle->length == 0U)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	8b1b      	ldrh	r3, [r3, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <USBH_HID_MouseDecode+0x28>
  {
    return USBH_FAIL;
 8006400:	2302      	movs	r3, #2
 8006402:	e0fd      	b.n	8006600 <USBH_HID_MouseDecode+0x224>
  }
  /*Fill report */
  if(USBH_HID_FifoRead(&HID_Handle->fifo, mouse_report_data, HID_Handle->length) ==  HID_Handle->length)
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	f103 0008 	add.w	r0, r3, #8
 800640a:	4b7f      	ldr	r3, [pc, #508]	; (8006608 <USBH_HID_MouseDecode+0x22c>)
 800640c:	6819      	ldr	r1, [r3, #0]
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	8b1b      	ldrh	r3, [r3, #24]
 8006412:	461a      	mov	r2, r3
 8006414:	f7ff fa87 	bl	8005926 <USBH_HID_FifoRead>
 8006418:	4603      	mov	r3, r0
 800641a:	461a      	mov	r2, r3
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	8b1b      	ldrh	r3, [r3, #24]
 8006420:	429a      	cmp	r2, r3
 8006422:	f040 80ec 	bne.w	80065fe <USBH_HID_MouseDecode+0x222>
  {

	  uint8_t btn = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	77fb      	strb	r3, [r7, #31]
	  uint8_t btn_extra = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	77bb      	strb	r3, [r7, #30]
	  uint8_t i;



	  // skip report id if present
	  uint8_t *p = mouse_report_data+(HID_Handle->HID_Desc.RptDesc.report_id?1:0);
 800642e:	4b76      	ldr	r3, [pc, #472]	; (8006608 <USBH_HID_MouseDecode+0x22c>)
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <USBH_HID_MouseDecode+0x64>
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <USBH_HID_MouseDecode+0x66>
 8006440:	2300      	movs	r3, #0
 8006442:	4413      	add	r3, r2
 8006444:	617b      	str	r3, [r7, #20]


	  //process axis
	  // two axes ...
	  		for(i=0;i<2;i++) {
 8006446:	2300      	movs	r3, #0
 8006448:	777b      	strb	r3, [r7, #29]
 800644a:	e02e      	b.n	80064aa <USBH_HID_MouseDecode+0xce>
	  			// if logical minimum is > logical maximum then logical minimum
	  			// is signed. This means that the value itself is also signed
	  			int is_signed = HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.min >
 800644c:	7f7b      	ldrb	r3, [r7, #29]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	3306      	adds	r3, #6
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	4413      	add	r3, r2
 8006456:	899a      	ldrh	r2, [r3, #12]
	  				HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.max;
 8006458:	7f7b      	ldrb	r3, [r7, #29]
 800645a:	69b9      	ldr	r1, [r7, #24]
 800645c:	3306      	adds	r3, #6
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	440b      	add	r3, r1
 8006462:	89db      	ldrh	r3, [r3, #14]
	  			int is_signed = HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.min >
 8006464:	429a      	cmp	r2, r3
 8006466:	bf8c      	ite	hi
 8006468:	2301      	movhi	r3, #1
 800646a:	2300      	movls	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	613b      	str	r3, [r7, #16]
	  			a[i] = collect_bits(p, HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].offset,
 8006470:	7f7b      	ldrb	r3, [r7, #29]
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	3306      	adds	r3, #6
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	4413      	add	r3, r2
 800647a:	8919      	ldrh	r1, [r3, #8]
 800647c:	7f7b      	ldrb	r3, [r7, #29]
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	3306      	adds	r3, #6
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	4413      	add	r3, r2
 8006486:	7a9a      	ldrb	r2, [r3, #10]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6978      	ldr	r0, [r7, #20]
 800648c:	f7ff ff12 	bl	80062b4 <collect_bits>
 8006490:	4603      	mov	r3, r0
 8006492:	461a      	mov	r2, r3
 8006494:	7f7b      	ldrb	r3, [r7, #29]
 8006496:	b212      	sxth	r2, r2
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	f107 0120 	add.w	r1, r7, #32
 800649e:	440b      	add	r3, r1
 80064a0:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		for(i=0;i<2;i++) {
 80064a4:	7f7b      	ldrb	r3, [r7, #29]
 80064a6:	3301      	adds	r3, #1
 80064a8:	777b      	strb	r3, [r7, #29]
 80064aa:	7f7b      	ldrb	r3, [r7, #29]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d9cd      	bls.n	800644c <USBH_HID_MouseDecode+0x70>
	  					HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].size, is_signed);
	  		}

	  //process 4 first buttons
	  for(i=0;i<4;i++)
 80064b0:	2300      	movs	r3, #0
 80064b2:	777b      	strb	r3, [r7, #29]
 80064b4:	e020      	b.n	80064f8 <USBH_HID_MouseDecode+0x11c>
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 80064b6:	7f7b      	ldrb	r3, [r7, #29]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	3320      	adds	r3, #32
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	4413      	add	r3, r2
 80064c0:	7a1b      	ldrb	r3, [r3, #8]
 80064c2:	461a      	mov	r2, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	4413      	add	r3, r2
 80064c8:	781a      	ldrb	r2, [r3, #0]
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 80064ca:	7f7b      	ldrb	r3, [r7, #29]
 80064cc:	69b9      	ldr	r1, [r7, #24]
 80064ce:	3320      	adds	r3, #32
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	440b      	add	r3, r1
 80064d4:	7a5b      	ldrb	r3, [r3, #9]
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 80064d6:	4013      	ands	r3, r2
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <USBH_HID_MouseDecode+0x116>
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 80064de:	7f7b      	ldrb	r3, [r7, #29]
 80064e0:	2201      	movs	r2, #1
 80064e2:	fa02 f303 	lsl.w	r3, r2, r3
 80064e6:	b25a      	sxtb	r2, r3
 80064e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	b25b      	sxtb	r3, r3
 80064f0:	77fb      	strb	r3, [r7, #31]
	  for(i=0;i<4;i++)
 80064f2:	7f7b      	ldrb	r3, [r7, #29]
 80064f4:	3301      	adds	r3, #1
 80064f6:	777b      	strb	r3, [r7, #29]
 80064f8:	7f7b      	ldrb	r3, [r7, #29]
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d9db      	bls.n	80064b6 <USBH_HID_MouseDecode+0xda>

	  // ... and the eight extra buttons
	  for(i=4;i<12;i++)
 80064fe:	2304      	movs	r3, #4
 8006500:	777b      	strb	r3, [r7, #29]
 8006502:	e021      	b.n	8006548 <USBH_HID_MouseDecode+0x16c>
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 8006504:	7f7b      	ldrb	r3, [r7, #29]
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	3320      	adds	r3, #32
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	4413      	add	r3, r2
 800650e:	7a1b      	ldrb	r3, [r3, #8]
 8006510:	461a      	mov	r2, r3
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	4413      	add	r3, r2
 8006516:	781a      	ldrb	r2, [r3, #0]
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8006518:	7f7b      	ldrb	r3, [r7, #29]
 800651a:	69b9      	ldr	r1, [r7, #24]
 800651c:	3320      	adds	r3, #32
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	440b      	add	r3, r1
 8006522:	7a5b      	ldrb	r3, [r3, #9]
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 8006524:	4013      	ands	r3, r2
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <USBH_HID_MouseDecode+0x166>
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800652c:	7f7b      	ldrb	r3, [r7, #29]
 800652e:	3b04      	subs	r3, #4
 8006530:	2201      	movs	r2, #1
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	b25a      	sxtb	r2, r3
 8006538:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800653c:	4313      	orrs	r3, r2
 800653e:	b25b      	sxtb	r3, r3
 8006540:	77bb      	strb	r3, [r7, #30]
	  for(i=4;i<12;i++)
 8006542:	7f7b      	ldrb	r3, [r7, #29]
 8006544:	3301      	adds	r3, #1
 8006546:	777b      	strb	r3, [r7, #29]
 8006548:	7f7b      	ldrb	r3, [r7, #29]
 800654a:	2b0b      	cmp	r3, #11
 800654c:	d9da      	bls.n	8006504 <USBH_HID_MouseDecode+0x128>

	  //process mouse
	  if(HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE) {
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006554:	f003 0303 	and.w	r3, r3, #3
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b01      	cmp	r3, #1
 800655c:	d14d      	bne.n	80065fa <USBH_HID_MouseDecode+0x21e>
	  		// iprintf("mouse %d %d %x\n", (int16_t)a[0], (int16_t)a[1], btn);
	  		// limit mouse movement to +/- 128
	  		for(i=0;i<2;i++) {
 800655e:	2300      	movs	r3, #0
 8006560:	777b      	strb	r3, [r7, #29]
 8006562:	e026      	b.n	80065b2 <USBH_HID_MouseDecode+0x1d6>
	  		if((int16_t)a[i] >  127) a[i] =  127;
 8006564:	7f7b      	ldrb	r3, [r7, #29]
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	f107 0220 	add.w	r2, r7, #32
 800656c:	4413      	add	r3, r2
 800656e:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8006572:	2b7f      	cmp	r3, #127	; 0x7f
 8006574:	dd07      	ble.n	8006586 <USBH_HID_MouseDecode+0x1aa>
 8006576:	7f7b      	ldrb	r3, [r7, #29]
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	f107 0220 	add.w	r2, r7, #32
 800657e:	4413      	add	r3, r2
 8006580:	227f      	movs	r2, #127	; 0x7f
 8006582:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		if((int16_t)a[i] < -128) a[i] = -128;
 8006586:	7f7b      	ldrb	r3, [r7, #29]
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	f107 0220 	add.w	r2, r7, #32
 800658e:	4413      	add	r3, r2
 8006590:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8006594:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8006598:	da08      	bge.n	80065ac <USBH_HID_MouseDecode+0x1d0>
 800659a:	7f7b      	ldrb	r3, [r7, #29]
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	f107 0220 	add.w	r2, r7, #32
 80065a2:	4413      	add	r3, r2
 80065a4:	f64f 7280 	movw	r2, #65408	; 0xff80
 80065a8:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		for(i=0;i<2;i++) {
 80065ac:	7f7b      	ldrb	r3, [r7, #29]
 80065ae:	3301      	adds	r3, #1
 80065b0:	777b      	strb	r3, [r7, #29]
 80065b2:	7f7b      	ldrb	r3, [r7, #29]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d9d5      	bls.n	8006564 <USBH_HID_MouseDecode+0x188>
	  		}
	  		//btn
	  	  mouse_info.x = a[0];
 80065b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80065bc:	4b13      	ldr	r3, [pc, #76]	; (800660c <USBH_HID_MouseDecode+0x230>)
 80065be:	801a      	strh	r2, [r3, #0]
	  	  mouse_info.y = a[1];
 80065c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80065c4:	4b11      	ldr	r3, [pc, #68]	; (800660c <USBH_HID_MouseDecode+0x230>)
 80065c6:	805a      	strh	r2, [r3, #2]
	  	  mouse_info.buttons[0] = btn&0x1;
 80065c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	b25a      	sxtb	r2, r3
 80065d2:	4b0e      	ldr	r3, [pc, #56]	; (800660c <USBH_HID_MouseDecode+0x230>)
 80065d4:	711a      	strb	r2, [r3, #4]
	  	  mouse_info.buttons[1] = (btn>>1)&0x1;
 80065d6:	7ffb      	ldrb	r3, [r7, #31]
 80065d8:	085b      	lsrs	r3, r3, #1
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	b25b      	sxtb	r3, r3
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	b25a      	sxtb	r2, r3
 80065e4:	4b09      	ldr	r3, [pc, #36]	; (800660c <USBH_HID_MouseDecode+0x230>)
 80065e6:	715a      	strb	r2, [r3, #5]
	  	  mouse_info.buttons[2] = (btn>>2)&0x1;
 80065e8:	7ffb      	ldrb	r3, [r7, #31]
 80065ea:	089b      	lsrs	r3, r3, #2
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	b25b      	sxtb	r3, r3
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	b25a      	sxtb	r2, r3
 80065f6:	4b05      	ldr	r3, [pc, #20]	; (800660c <USBH_HID_MouseDecode+0x230>)
 80065f8:	719a      	strb	r2, [r3, #6]
	  	}

    return USBH_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	e000      	b.n	8006600 <USBH_HID_MouseDecode+0x224>
  }
  return   USBH_FAIL;
 80065fe:	2302      	movs	r3, #2
}
 8006600:	4618      	mov	r0, r3
 8006602:	3720      	adds	r7, #32
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	20000180 	.word	0x20000180
 800660c:	20000178 	.word	0x20000178

08006610 <report_is_usable>:
  uint8_t bType: 2;
  uint8_t bTag: 4;
} __attribute__((packed)) item_t;


int report_is_usable(uint16_t bit_count, uint8_t report_complete, hid_report_t *conf) {
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	4603      	mov	r3, r0
 8006618:	603a      	str	r2, [r7, #0]
 800661a:	80fb      	strh	r3, [r7, #6]
 800661c:	460b      	mov	r3, r1
 800661e:	717b      	strb	r3, [r7, #5]
// hidp_debugf("  - total bit count: %d (%d bytes, %d bits)",
//	      bit_count, bit_count/8, bit_count%8);

  conf->report_size = bit_count/8;
 8006620:	88fb      	ldrh	r3, [r7, #6]
 8006622:	08db      	lsrs	r3, r3, #3
 8006624:	b29b      	uxth	r3, r3
 8006626:	b2da      	uxtb	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	709a      	strb	r2, [r3, #2]

  // check if something useful was detected
  if( ((conf->type == REPORT_TYPE_JOYSTICK) && ((report_complete & JOYSTICK_COMPLETE) == JOYSTICK_COMPLETE)) ||
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b03      	cmp	r3, #3
 8006638:	d104      	bne.n	8006644 <report_is_usable+0x34>
 800663a:	797b      	ldrb	r3, [r7, #5]
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	2b07      	cmp	r3, #7
 8006642:	d012      	beq.n	800666a <report_is_usable+0x5a>
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f003 0303 	and.w	r3, r3, #3
 800664c:	b2db      	uxtb	r3, r3
  if( ((conf->type == REPORT_TYPE_JOYSTICK) && ((report_complete & JOYSTICK_COMPLETE) == JOYSTICK_COMPLETE)) ||
 800664e:	2b01      	cmp	r3, #1
 8006650:	d104      	bne.n	800665c <report_is_usable+0x4c>
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 8006652:	797b      	ldrb	r3, [r7, #5]
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	2b0f      	cmp	r3, #15
 800665a:	d006      	beq.n	800666a <report_is_usable+0x5a>
      ((conf->type == REPORT_TYPE_KEYBOARD))) {
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	b2db      	uxtb	r3, r3
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 8006666:	2b02      	cmp	r3, #2
 8006668:	d101      	bne.n	800666e <report_is_usable+0x5e>
 //   hidp_debugf("  - report %d is usable", conf->report_id);
    return 1;
 800666a:	2301      	movs	r3, #1
 800666c:	e000      	b.n	8006670 <report_is_usable+0x60>
  }

//  hidp_debugf("  - unusable report %d", conf->report_id);
  return 0;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	bc80      	pop	{r7}
 8006678:	4770      	bx	lr
	...

0800667c <parse_report_descriptor>:



int parse_report_descriptor(uint8_t *rep, uint16_t rep_size,hid_report_t *conf) {
 800667c:	b580      	push	{r7, lr}
 800667e:	b08e      	sub	sp, #56	; 0x38
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	460b      	mov	r3, r1
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	817b      	strh	r3, [r7, #10]
  int8_t app_collection = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int8_t phys_log_collection = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint8_t skip_collection = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  int8_t generic_desktop = -1;   // depth at which first gen_desk was found
 800669c:	23ff      	movs	r3, #255	; 0xff
 800669e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  uint8_t collection_depth = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  uint8_t i;

  //
  uint8_t report_size, report_count;
  uint16_t bit_count = 0, usage_count = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80066ac:	2300      	movs	r3, #0
 80066ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t logical_minimum=0, logical_maximum=0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80066b4:	2300      	movs	r3, #0
 80066b6:	853b      	strh	r3, [r7, #40]	; 0x28

  // mask used to check of all required components have been found, so
  // that e.g. both axes and the button of a joystick are ready to be used
  uint8_t report_complete = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  // joystick/mouse components
  int8_t axis[2] = { -1, -1};
 80066be:	4b7c      	ldr	r3, [pc, #496]	; (80068b0 <parse_report_descriptor+0x234>)
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	823b      	strh	r3, [r7, #16]
  uint8_t btns = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  int8_t hat = -1;
 80066ca:	23ff      	movs	r3, #255	; 0xff
 80066cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


  while(rep_size) {
 80066d0:	e2ce      	b.n	8006c70 <parse_report_descriptor+0x5f4>
    // extract short item
    uint8_t tag = ((item_t*)rep)->bTag;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	777b      	strb	r3, [r7, #29]
    uint8_t type = ((item_t*)rep)->bType;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	773b      	strb	r3, [r7, #28]
    uint8_t size = ((item_t*)rep)->bSize;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	76fb      	strb	r3, [r7, #27]

    rep++;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3301      	adds	r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]
    rep_size--;   // one byte consumed
 80066fc:	897b      	ldrh	r3, [r7, #10]
 80066fe:	3b01      	subs	r3, #1
 8006700:	817b      	strh	r3, [r7, #10]



    uint32_t value = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	623b      	str	r3, [r7, #32]
     if(size) {      // size 1/2/3
 8006706:	7efb      	ldrb	r3, [r7, #27]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d007      	beq.n	800671c <parse_report_descriptor+0xa0>
       value = *rep++;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	60fa      	str	r2, [r7, #12]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	623b      	str	r3, [r7, #32]
       rep_size--;
 8006716:	897b      	ldrh	r3, [r7, #10]
 8006718:	3b01      	subs	r3, #1
 800671a:	817b      	strh	r3, [r7, #10]
     }

     if(size > 1) {  // size 2/3
 800671c:	7efb      	ldrb	r3, [r7, #27]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d90b      	bls.n	800673a <parse_report_descriptor+0xbe>
       value = (value & 0xff) + ((uint32_t)(*rep++)<<8);
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	b2da      	uxtb	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	1c59      	adds	r1, r3, #1
 800672a:	60f9      	str	r1, [r7, #12]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	021b      	lsls	r3, r3, #8
 8006730:	4413      	add	r3, r2
 8006732:	623b      	str	r3, [r7, #32]
       rep_size--;
 8006734:	897b      	ldrh	r3, [r7, #10]
 8006736:	3b01      	subs	r3, #1
 8006738:	817b      	strh	r3, [r7, #10]
     }

     if(size > 2) {  // size 3
 800673a:	7efb      	ldrb	r3, [r7, #27]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d915      	bls.n	800676c <parse_report_descriptor+0xf0>
       value &= 0xffff;
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	b29b      	uxth	r3, r3
 8006744:	623b      	str	r3, [r7, #32]
       value |= ((uint32_t)(*rep++)<<16);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	60fa      	str	r2, [r7, #12]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	041b      	lsls	r3, r3, #16
 8006750:	6a3a      	ldr	r2, [r7, #32]
 8006752:	4313      	orrs	r3, r2
 8006754:	623b      	str	r3, [r7, #32]
       value |= ((uint32_t)(*rep++)<<24);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	60fa      	str	r2, [r7, #12]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	061b      	lsls	r3, r3, #24
 8006760:	6a3a      	ldr	r2, [r7, #32]
 8006762:	4313      	orrs	r3, r2
 8006764:	623b      	str	r3, [r7, #32]
       rep_size-=2;
 8006766:	897b      	ldrh	r3, [r7, #10]
 8006768:	3b02      	subs	r3, #2
 800676a:	817b      	strh	r3, [r7, #10]
     }


       // we are currently skipping an unknown/unsupported collection)
           if(skip_collection) {
 800676c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006770:	2b00      	cmp	r3, #0
 8006772:	d029      	beq.n	80067c8 <parse_report_descriptor+0x14c>
             if(!type) {  // main item
 8006774:	7f3b      	ldrb	r3, [r7, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f040 827a 	bne.w	8006c70 <parse_report_descriptor+0x5f4>
       				// any new collection increases the depth of collections to skip
       				if(tag == 10) {
 800677c:	7f7b      	ldrb	r3, [r7, #29]
 800677e:	2b0a      	cmp	r3, #10
 8006780:	d109      	bne.n	8006796 <parse_report_descriptor+0x11a>
       					skip_collection++;
 8006782:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006786:	3301      	adds	r3, #1
 8006788:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
       					collection_depth++;
 800678c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006790:	3301      	adds	r3, #1
 8006792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
       				}

       				// any end collection decreases it
       				if(tag == 12) {
 8006796:	7f7b      	ldrb	r3, [r7, #29]
 8006798:	2b0c      	cmp	r3, #12
 800679a:	f040 8269 	bne.w	8006c70 <parse_report_descriptor+0x5f4>
       					skip_collection--;
 800679e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80067a2:	3b01      	subs	r3, #1
 80067a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
       					collection_depth--;
 80067a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067ac:	3b01      	subs	r3, #1
 80067ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

       					// leaving the depth the generic desktop was valid for
       					if(generic_desktop > collection_depth)
 80067b2:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 80067b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067ba:	429a      	cmp	r2, r3
 80067bc:	f340 8258 	ble.w	8006c70 <parse_report_descriptor+0x5f4>
       						generic_desktop = -1;
 80067c0:	23ff      	movs	r3, #255	; 0xff
 80067c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80067c6:	e253      	b.n	8006c70 <parse_report_descriptor+0x5f4>
             }

           } else {


                 switch(type) {
 80067c8:	7f3b      	ldrb	r3, [r7, #28]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	f000 8178 	beq.w	8006ac0 <parse_report_descriptor+0x444>
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	f000 81c6 	beq.w	8006b62 <parse_report_descriptor+0x4e6>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f040 8249 	bne.w	8006c6e <parse_report_descriptor+0x5f2>
                 case 0:
           	// main item

           	switch(tag) {
 80067dc:	7f7b      	ldrb	r3, [r7, #29]
 80067de:	3b08      	subs	r3, #8
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	f200 8169 	bhi.w	8006ab8 <parse_report_descriptor+0x43c>
 80067e6:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <parse_report_descriptor+0x170>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	08006801 	.word	0x08006801
 80067f0:	08006abd 	.word	0x08006abd
 80067f4:	080069eb 	.word	0x080069eb
 80067f8:	08006abd 	.word	0x08006abd
 80067fc:	08006a47 	.word	0x08006a47
           	case 8:
           	  // handle found buttons
           	  if(btns) {
 8006800:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006804:	2b00      	cmp	r3, #0
 8006806:	d050      	beq.n	80068aa <parse_report_descriptor+0x22e>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) ||
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	f003 0303 	and.w	r3, r3, #3
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b03      	cmp	r3, #3
 8006814:	d006      	beq.n	8006824 <parse_report_descriptor+0x1a8>
           	       (conf->type == REPORT_TYPE_MOUSE)) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	b2db      	uxtb	r3, r3
           	    if((conf->type == REPORT_TYPE_JOYSTICK) ||
 8006820:	2b01      	cmp	r3, #1
 8006822:	d142      	bne.n	80068aa <parse_report_descriptor+0x22e>
           	      // scan for up to four buttons
           	      char b;
           	      for(b=0;b<12;b++) {
 8006824:	2300      	movs	r3, #0
 8006826:	77fb      	strb	r3, [r7, #31]
 8006828:	e02c      	b.n	8006884 <parse_report_descriptor+0x208>
           		if(report_count > b) {
 800682a:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800682e:	7ffb      	ldrb	r3, [r7, #31]
 8006830:	429a      	cmp	r2, r3
 8006832:	d91a      	bls.n	800686a <parse_report_descriptor+0x1ee>
           		  uint16_t this_bit = bit_count+b;
 8006834:	7ffb      	ldrb	r3, [r7, #31]
 8006836:	b29a      	uxth	r2, r3
 8006838:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800683a:	4413      	add	r3, r2
 800683c:	833b      	strh	r3, [r7, #24]

           		  conf->joystick_mouse.button[b].byte_offset = this_bit/8;
 800683e:	8b3b      	ldrh	r3, [r7, #24]
 8006840:	08db      	lsrs	r3, r3, #3
 8006842:	b29b      	uxth	r3, r3
 8006844:	7ffa      	ldrb	r2, [r7, #31]
 8006846:	b2d9      	uxtb	r1, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	320c      	adds	r2, #12
 800684c:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
           		  conf->joystick_mouse.button[b].bitmask = 1 << (this_bit%8);
 8006850:	8b3b      	ldrh	r3, [r7, #24]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	2201      	movs	r2, #1
 8006858:	409a      	lsls	r2, r3
 800685a:	7ffb      	ldrb	r3, [r7, #31]
 800685c:	b2d1      	uxtb	r1, r2
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	330c      	adds	r3, #12
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	4413      	add	r3, r2
 8006866:	460a      	mov	r2, r1
 8006868:	705a      	strb	r2, [r3, #1]
           		}
           					conf->joystick_mouse.button_count = report_count * report_size;
 800686a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800686e:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8006872:	fb02 f303 	mul.w	r3, r2, r3
 8006876:	b2da      	uxtb	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
           	      for(b=0;b<12;b++) {
 800687e:	7ffb      	ldrb	r3, [r7, #31]
 8006880:	3301      	adds	r3, #1
 8006882:	77fb      	strb	r3, [r7, #31]
 8006884:	7ffb      	ldrb	r3, [r7, #31]
 8006886:	2b0b      	cmp	r3, #11
 8006888:	d9cf      	bls.n	800682a <parse_report_descriptor+0x1ae>
           	      }

           	      // we found at least one button which is all we want to accept this as a valid
           	      // joystick
           	      report_complete |= JOY_MOUSE_REQ_BTN_0;
 800688a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800688e:	f043 0304 	orr.w	r3, r3, #4
 8006892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	      if(report_count > 1) report_complete |= JOY_MOUSE_REQ_BTN_1;
 8006896:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800689a:	2b01      	cmp	r3, #1
 800689c:	d905      	bls.n	80068aa <parse_report_descriptor+0x22e>
 800689e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068a2:	f043 0308 	orr.w	r3, r3, #8
 80068a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	    }
           	  }

           	  // handle found axes
           	  char c;
           	  for(c=0;c<2;c++) {
 80068aa:	2300      	movs	r3, #0
 80068ac:	77bb      	strb	r3, [r7, #30]
 80068ae:	e060      	b.n	8006972 <parse_report_descriptor+0x2f6>
 80068b0:	08008754 	.word	0x08008754
           	    if(axis[c] >= 0) {
 80068b4:	7fbb      	ldrb	r3, [r7, #30]
 80068b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80068ba:	4413      	add	r3, r2
 80068bc:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	db53      	blt.n	800696c <parse_report_descriptor+0x2f0>
           	      uint16_t cnt = bit_count + report_size * axis[c];
 80068c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	7fba      	ldrb	r2, [r7, #30]
 80068cc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80068d0:	440a      	add	r2, r1
 80068d2:	f912 2c28 	ldrsb.w	r2, [r2, #-40]
 80068d6:	b292      	uxth	r2, r2
 80068d8:	fb02 f303 	mul.w	r3, r2, r3
 80068dc:	b29a      	uxth	r2, r3
 80068de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068e0:	4413      	add	r3, r2
 80068e2:	82bb      	strh	r3, [r7, #20]

           	      if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d006      	beq.n	8006900 <parse_report_descriptor+0x284>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d135      	bne.n	800696c <parse_report_descriptor+0x2f0>
           		// save in joystick report
           		conf->joystick_mouse.axis[c].offset = cnt;
 8006900:	7fba      	ldrb	r2, [r7, #30]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3201      	adds	r2, #1
 8006906:	8ab9      	ldrh	r1, [r7, #20]
 8006908:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
           		conf->joystick_mouse.axis[c].size = report_size;
 800690c:	7fbb      	ldrb	r3, [r7, #30]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	3301      	adds	r3, #1
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	4413      	add	r3, r2
 8006916:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800691a:	709a      	strb	r2, [r3, #2]
           		conf->joystick_mouse.axis[c].logical.min = logical_minimum;
 800691c:	7fbb      	ldrb	r3, [r7, #30]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	3301      	adds	r3, #1
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	4413      	add	r3, r2
 8006926:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006928:	809a      	strh	r2, [r3, #4]
           		conf->joystick_mouse.axis[c].logical.max = logical_maximum;
 800692a:	7fbb      	ldrb	r3, [r7, #30]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	3301      	adds	r3, #1
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	4413      	add	r3, r2
 8006934:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006936:	80da      	strh	r2, [r3, #6]
           		conf->joystick_mouse.axis[c].size = report_size;
 8006938:	7fbb      	ldrb	r3, [r7, #30]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	3301      	adds	r3, #1
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4413      	add	r3, r2
 8006942:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8006946:	709a      	strb	r2, [r3, #2]
           		if(c==0) report_complete |= JOY_MOUSE_REQ_AXIS_X;
 8006948:	7fbb      	ldrb	r3, [r7, #30]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d105      	bne.n	800695a <parse_report_descriptor+0x2de>
 800694e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006952:	f043 0301 	orr.w	r3, r3, #1
 8006956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           		if(c==1) report_complete |= JOY_MOUSE_REQ_AXIS_Y;
 800695a:	7fbb      	ldrb	r3, [r7, #30]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d105      	bne.n	800696c <parse_report_descriptor+0x2f0>
 8006960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006964:	f043 0302 	orr.w	r3, r3, #2
 8006968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	  for(c=0;c<2;c++) {
 800696c:	7fbb      	ldrb	r3, [r7, #30]
 800696e:	3301      	adds	r3, #1
 8006970:	77bb      	strb	r3, [r7, #30]
 8006972:	7fbb      	ldrb	r3, [r7, #30]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d99d      	bls.n	80068b4 <parse_report_descriptor+0x238>
           	      }
           	    }
           	  }

           	  // handle found hat
           	  if(hat >= 0) {
 8006978:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800697c:	2b00      	cmp	r3, #0
 800697e:	db1a      	blt.n	80069b6 <parse_report_descriptor+0x33a>
           	    uint16_t cnt = bit_count + report_size * hat;
 8006980:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006984:	b29b      	uxth	r3, r3
 8006986:	f997 2025 	ldrsb.w	r2, [r7, #37]	; 0x25
 800698a:	b292      	uxth	r2, r2
 800698c:	fb02 f303 	mul.w	r3, r2, r3
 8006990:	b29a      	uxth	r2, r3
 8006992:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006994:	4413      	add	r3, r2
 8006996:	82fb      	strh	r3, [r7, #22]
           	    if(conf->type == REPORT_TYPE_JOYSTICK) {
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d107      	bne.n	80069b6 <parse_report_descriptor+0x33a>
           	      conf->joystick_mouse.hat.offset = cnt;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8afa      	ldrh	r2, [r7, #22]
 80069aa:	861a      	strh	r2, [r3, #48]	; 0x30
           	      conf->joystick_mouse.hat.size = report_size;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80069b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
           	    }
           	  }


           	  // reset for next inputs
           	  bit_count += report_count * report_size;
 80069b6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80069c0:	b292      	uxth	r2, r2
 80069c2:	fb02 f303 	mul.w	r3, r2, r3
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069ca:	4413      	add	r3, r2
 80069cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
           	  usage_count = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  btns = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
           	  axis[0] = axis[1] = -1;
 80069d8:	23ff      	movs	r3, #255	; 0xff
 80069da:	747b      	strb	r3, [r7, #17]
 80069dc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80069e0:	743b      	strb	r3, [r7, #16]
           	  hat = -1;
 80069e2:	23ff      	movs	r3, #255	; 0xff
 80069e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
           	  break;
 80069e8:	e069      	b.n	8006abe <parse_report_descriptor+0x442>

           	case 11:
           	  break;

           	case 10:
           	  collection_depth++;
 80069ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80069ee:	3301      	adds	r3, #1
 80069f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
           	  usage_count = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	85bb      	strh	r3, [r7, #44]	; 0x2c

           	  if(value == 1) {	   // app collection
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d107      	bne.n	8006a0e <parse_report_descriptor+0x392>
           	    app_collection++;
 80069fe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	3301      	adds	r3, #1
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
           	  } else if(value == 2) {  // logical collection
           	    phys_log_collection++;
           	  } else {
           	    skip_collection++;
           	  }
           	  break;
 8006a0c:	e057      	b.n	8006abe <parse_report_descriptor+0x442>
           	  } else if(value == 0) {  // physical collection
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d107      	bne.n	8006a24 <parse_report_descriptor+0x3a8>
           	    phys_log_collection++;
 8006a14:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	  break;
 8006a22:	e04c      	b.n	8006abe <parse_report_descriptor+0x442>
           	  } else if(value == 2) {  // logical collection
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d107      	bne.n	8006a3a <parse_report_descriptor+0x3be>
           	    phys_log_collection++;
 8006a2a:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	3301      	adds	r3, #1
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	  break;
 8006a38:	e041      	b.n	8006abe <parse_report_descriptor+0x442>
           	    skip_collection++;
 8006a3a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006a3e:	3301      	adds	r3, #1
 8006a40:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
           	  break;
 8006a44:	e03b      	b.n	8006abe <parse_report_descriptor+0x442>

           	case 12:
           	  collection_depth--;
 8006a46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

           	  // leaving the depth the generic desktop was valid for
           	  if(generic_desktop > collection_depth)
 8006a50:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 8006a54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	dd02      	ble.n	8006a62 <parse_report_descriptor+0x3e6>
           	    generic_desktop = -1;
 8006a5c:	23ff      	movs	r3, #255	; 0xff
 8006a5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

           	  if(phys_log_collection) {
 8006a62:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d007      	beq.n	8006a7a <parse_report_descriptor+0x3fe>

           	    phys_log_collection--;
 8006a6a:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	    }

           	  } else {
           	    return 0;
           	  }
           	  break;
 8006a78:	e021      	b.n	8006abe <parse_report_descriptor+0x442>
           	  } else if(app_collection) {
 8006a7a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d018      	beq.n	8006ab4 <parse_report_descriptor+0x438>
           	    app_collection--;
 8006a82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
           	     if(report_is_usable(bit_count, report_complete, conf))
 8006a90:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8006a94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff fdb9 	bl	8006610 <report_is_usable>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <parse_report_descriptor+0x42c>
           	      return 1;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e0e8      	b.n	8006c7a <parse_report_descriptor+0x5fe>
           	      bit_count = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
           	      report_complete = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	  break;
 8006ab2:	e004      	b.n	8006abe <parse_report_descriptor+0x442>
           	    return 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	e0e0      	b.n	8006c7a <parse_report_descriptor+0x5fe>

           	default:
           	  return 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	e0de      	b.n	8006c7a <parse_report_descriptor+0x5fe>
           	  break;
 8006abc:	bf00      	nop
           	  break;
           	}
           	break;
 8006abe:	e0d7      	b.n	8006c70 <parse_report_descriptor+0x5f4>

                 case 1:
           	// global item
           	switch(tag) {
 8006ac0:	7f7b      	ldrb	r3, [r7, #29]
 8006ac2:	2b09      	cmp	r3, #9
 8006ac4:	d847      	bhi.n	8006b56 <parse_report_descriptor+0x4da>
 8006ac6:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <parse_report_descriptor+0x450>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006af5 	.word	0x08006af5
 8006ad0:	08006b31 	.word	0x08006b31
 8006ad4:	08006b37 	.word	0x08006b37
 8006ad8:	08006b5b 	.word	0x08006b5b
 8006adc:	08006b5b 	.word	0x08006b5b
 8006ae0:	08006b5b 	.word	0x08006b5b
 8006ae4:	08006b5b 	.word	0x08006b5b
 8006ae8:	08006b3d 	.word	0x08006b3d
 8006aec:	08006b45 	.word	0x08006b45
 8006af0:	08006b4f 	.word	0x08006b4f
           	case 0:

           	  if(value == USAGE_PAGE_KEYBOARD) {
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	2b07      	cmp	r3, #7
 8006af8:	d01a      	beq.n	8006b30 <parse_report_descriptor+0x4b4>
           	  } else if(value == USAGE_PAGE_GAMING) {
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	2b05      	cmp	r3, #5
 8006afe:	d017      	beq.n	8006b30 <parse_report_descriptor+0x4b4>
           	  } else if(value == USAGE_PAGE_LEDS) {
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d014      	beq.n	8006b30 <parse_report_descriptor+0x4b4>
           	  } else if(value == USAGE_PAGE_CONSUMER) {
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	2b0c      	cmp	r3, #12
 8006b0a:	d011      	beq.n	8006b30 <parse_report_descriptor+0x4b4>
           	  } else if(value == USAGE_PAGE_BUTTON) {
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	2b09      	cmp	r3, #9
 8006b10:	d103      	bne.n	8006b1a <parse_report_descriptor+0x49e>
           	    btns = 1;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b18:	e00a      	b.n	8006b30 <parse_report_descriptor+0x4b4>
           	  } else if(value == USAGE_PAGE_GENERIC_DESKTOP) {
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d11e      	bne.n	8006b5e <parse_report_descriptor+0x4e2>
           	    if(generic_desktop < 0)
 8006b20:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	da03      	bge.n	8006b30 <parse_report_descriptor+0x4b4>
           	      generic_desktop = collection_depth;
 8006b28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b2c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
           	  } else

           	  break;

           	case 1:
           	  logical_minimum = value;
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	857b      	strh	r3, [r7, #42]	; 0x2a
           	  break;
 8006b34:	e014      	b.n	8006b60 <parse_report_descriptor+0x4e4>

           	case 2:
           	  logical_maximum = value;
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	853b      	strh	r3, [r7, #40]	; 0x28
           	  break;
 8006b3a:	e011      	b.n	8006b60 <parse_report_descriptor+0x4e4>

           	case 6:
           	  break;

           	case 7:
           	  report_size = value;
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
           		break;
 8006b42:	e00d      	b.n	8006b60 <parse_report_descriptor+0x4e4>

           	case 8:
           	  conf->report_id = value;
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	705a      	strb	r2, [r3, #1]
           	  break;
 8006b4c:	e008      	b.n	8006b60 <parse_report_descriptor+0x4e4>

           	case 9:
           		report_count = value;
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
           	  break;
 8006b54:	e004      	b.n	8006b60 <parse_report_descriptor+0x4e4>

           	default:
           	  return 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	e08f      	b.n	8006c7a <parse_report_descriptor+0x5fe>
           	  break;
 8006b5a:	bf00      	nop
 8006b5c:	e088      	b.n	8006c70 <parse_report_descriptor+0x5f4>
           	  break;
 8006b5e:	bf00      	nop
           	  break;
           	}
           	break;
 8006b60:	e086      	b.n	8006c70 <parse_report_descriptor+0x5f4>

                 case 2:
           	// local item
           	switch(tag) {
 8006b62:	7f7b      	ldrb	r3, [r7, #29]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d073      	beq.n	8006c50 <parse_report_descriptor+0x5d4>
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d079      	beq.n	8006c60 <parse_report_descriptor+0x5e4>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d000      	beq.n	8006b72 <parse_report_descriptor+0x4f6>
           	  usage_count += value;
           	  break;

           	default:

           	  break;
 8006b70:	e07c      	b.n	8006c6c <parse_report_descriptor+0x5f0>
           	  if( !collection_depth && (value == USAGE_KEYBOARD)) {
 8006b72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <parse_report_descriptor+0x512>
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	2b06      	cmp	r3, #6
 8006b7e:	d106      	bne.n	8006b8e <parse_report_descriptor+0x512>
           	    conf->type = REPORT_TYPE_KEYBOARD;
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	7813      	ldrb	r3, [r2, #0]
 8006b84:	2102      	movs	r1, #2
 8006b86:	f361 0301 	bfi	r3, r1, #0, #2
 8006b8a:	7013      	strb	r3, [r2, #0]
 8006b8c:	e05c      	b.n	8006c48 <parse_report_descriptor+0x5cc>
           	  } else if(!collection_depth && (value == USAGE_MOUSE)) {
 8006b8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <parse_report_descriptor+0x52e>
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d106      	bne.n	8006baa <parse_report_descriptor+0x52e>
           	    conf->type = REPORT_TYPE_MOUSE;
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	7813      	ldrb	r3, [r2, #0]
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	f361 0301 	bfi	r3, r1, #0, #2
 8006ba6:	7013      	strb	r3, [r2, #0]
 8006ba8:	e04e      	b.n	8006c48 <parse_report_descriptor+0x5cc>
           	  } else if(!collection_depth &&
 8006baa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10b      	bne.n	8006bca <parse_report_descriptor+0x54e>
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	2b05      	cmp	r3, #5
 8006bb6:	d002      	beq.n	8006bbe <parse_report_descriptor+0x542>
           		    ((value == USAGE_GAMEPAD) || (value == USAGE_JOYSTICK))) {
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d105      	bne.n	8006bca <parse_report_descriptor+0x54e>
           	    conf->type = REPORT_TYPE_JOYSTICK;
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	7813      	ldrb	r3, [r2, #0]
 8006bc2:	f043 0303 	orr.w	r3, r3, #3
 8006bc6:	7013      	strb	r3, [r2, #0]
 8006bc8:	e03e      	b.n	8006c48 <parse_report_descriptor+0x5cc>
           	  } else if(value == USAGE_POINTER && app_collection) {
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d103      	bne.n	8006bd8 <parse_report_descriptor+0x55c>
 8006bd0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d137      	bne.n	8006c48 <parse_report_descriptor+0x5cc>
           	  } else if((value == USAGE_X || value == USAGE_Y) && app_collection) {
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	2b30      	cmp	r3, #48	; 0x30
 8006bdc:	d002      	beq.n	8006be4 <parse_report_descriptor+0x568>
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	2b31      	cmp	r3, #49	; 0x31
 8006be2:	d11e      	bne.n	8006c22 <parse_report_descriptor+0x5a6>
 8006be4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d01a      	beq.n	8006c22 <parse_report_descriptor+0x5a6>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d006      	beq.n	8006c08 <parse_report_descriptor+0x58c>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d11e      	bne.n	8006c46 <parse_report_descriptor+0x5ca>
           	      if(value == USAGE_X) {
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	2b30      	cmp	r3, #48	; 0x30
 8006c0c:	d102      	bne.n	8006c14 <parse_report_descriptor+0x598>
           		axis[0] = usage_count;
 8006c0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c10:	b25b      	sxtb	r3, r3
 8006c12:	743b      	strb	r3, [r7, #16]
           	      if(value == USAGE_Y) {
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	2b31      	cmp	r3, #49	; 0x31
 8006c18:	d115      	bne.n	8006c46 <parse_report_descriptor+0x5ca>
           		axis[1] = usage_count;
 8006c1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c1c:	b25b      	sxtb	r3, r3
 8006c1e:	747b      	strb	r3, [r7, #17]
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8006c20:	e011      	b.n	8006c46 <parse_report_descriptor+0x5ca>
           	  } else if((value == USAGE_HAT) && app_collection) {
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	2b39      	cmp	r3, #57	; 0x39
 8006c26:	d10f      	bne.n	8006c48 <parse_report_descriptor+0x5cc>
 8006c28:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00b      	beq.n	8006c48 <parse_report_descriptor+0x5cc>
           	    if(conf->type == REPORT_TYPE_JOYSTICK) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	f003 0303 	and.w	r3, r3, #3
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d104      	bne.n	8006c48 <parse_report_descriptor+0x5cc>
           	      hat = usage_count;
 8006c3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006c44:	e000      	b.n	8006c48 <parse_report_descriptor+0x5cc>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8006c46:	bf00      	nop
           	  usage_count++;
 8006c48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8006c4e:	e00d      	b.n	8006c6c <parse_report_descriptor+0x5f0>
           	  usage_count -= (value-1);
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8006c5e:	e005      	b.n	8006c6c <parse_report_descriptor+0x5f0>
           	  usage_count += value;
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c66:	4413      	add	r3, r2
 8006c68:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8006c6a:	bf00      	nop
           	}
           	break;
 8006c6c:	e000      	b.n	8006c70 <parse_report_descriptor+0x5f4>

                 default:
           	// reserved

           	break;
 8006c6e:	bf00      	nop
  while(rep_size) {
 8006c70:	897b      	ldrh	r3, [r7, #10]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f47f ad2d 	bne.w	80066d2 <parse_report_descriptor+0x56>
                 }
               }
             }

             // if we get here then no usable setup was found
             return 0;
 8006c78:	2300      	movs	r3, #0
           }
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3738      	adds	r7, #56	; 0x38
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop

08006c84 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e019      	b.n	8006cd0 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	79fa      	ldrb	r2, [r7, #7]
 8006ca0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 f80f 	bl	8006cd8 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f001 fa99 	bl	8008200 <USBH_LL_Init>

  return USBH_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006ce4:	e008      	b.n	8006cf8 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	32e0      	adds	r2, #224	; 0xe0
 8006cec:	2100      	movs	r1, #0
 8006cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b0e      	cmp	r3, #14
 8006cfc:	d9f3      	bls.n	8006ce6 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	e009      	b.n	8006d18 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d0e:	2200      	movs	r2, #0
 8006d10:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3301      	adds	r3, #1
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1e:	d3f1      	bcc.n	8006d04 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2240      	movs	r2, #64	; 0x40
 8006d44:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d017      	beq.n	8006dac <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10f      	bne.n	8006da6 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d8c:	1c59      	adds	r1, r3, #1
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	33dc      	adds	r3, #220	; 0xdc
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	73fb      	strb	r3, [r7, #15]
 8006da4:	e004      	b.n	8006db0 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006da6:	2302      	movs	r3, #2
 8006da8:	73fb      	strb	r3, [r7, #15]
 8006daa:	e001      	b.n	8006db0 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006dac:	2302      	movs	r3, #2
 8006dae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bc80      	pop	{r7}
 8006dba:	4770      	bx	lr

08006dbc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006dd2:	78fa      	ldrb	r2, [r7, #3]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d204      	bcs.n	8006de2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	78fa      	ldrb	r2, [r7, #3]
 8006ddc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006de0:	e001      	b.n	8006de6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006de2:	2302      	movs	r3, #2
 8006de4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr

08006df2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 fa36 	bl	800826c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006e00:	2101      	movs	r1, #1
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 fb3a 	bl	800847c <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af04      	add	r7, sp, #16
 8006e1a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	737b      	strb	r3, [r7, #13]
  uint8_t idx = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 faed 	bl	8007404 <USBH_IsPortEnabled>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10c      	bne.n	8006e4a <USBH_Process+0x36>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d007      	beq.n	8006e4a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d002      	beq.n	8006e4a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2203      	movs	r2, #3
 8006e48:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b0b      	cmp	r3, #11
 8006e52:	f200 8151 	bhi.w	80070f8 <USBH_Process+0x2e4>
 8006e56:	a201      	add	r2, pc, #4	; (adr r2, 8006e5c <USBH_Process+0x48>)
 8006e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5c:	08006e8d 	.word	0x08006e8d
 8006e60:	08006eaf 	.word	0x08006eaf
 8006e64:	08006ec3 	.word	0x08006ec3
 8006e68:	080070d3 	.word	0x080070d3
 8006e6c:	080070f9 	.word	0x080070f9
 8006e70:	08006f51 	.word	0x08006f51
 8006e74:	08007089 	.word	0x08007089
 8006e78:	08006f81 	.word	0x08006f81
 8006e7c:	08006fa1 	.word	0x08006fa1
 8006e80:	08006fc1 	.word	0x08006fc1
 8006e84:	08006fef 	.word	0x08006fef
 8006e88:	080070bb 	.word	0x080070bb
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8131 	beq.w	80070fc <USBH_Process+0x2e8>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006ea0:	20c8      	movs	r0, #200	; 0xc8
 8006ea2:	f001 fb2b 	bl	80084fc <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 fa3b 	bl	8008322 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006eac:	e126      	b.n	80070fc <USBH_Process+0x2e8>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	f040 8123 	bne.w	8007100 <USBH_Process+0x2ec>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006ec0:	e11e      	b.n	8007100 <USBH_Process+0x2ec>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006ec2:	2064      	movs	r0, #100	; 0x64
 8006ec4:	f001 fb1a 	bl	80084fc <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 fa05 	bl	80082d8 <USBH_LL_GetSpeed>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2205      	movs	r2, #5
 8006edc:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006ede:	2100      	movs	r1, #0
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 f84a 	bl	8007f7a <USBH_AllocPipe>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	461a      	mov	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006eee:	2180      	movs	r1, #128	; 0x80
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 f842 	bl	8007f7a <USBH_AllocPipe>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	461a      	mov	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	7919      	ldrb	r1, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006f12:	b292      	uxth	r2, r2
 8006f14:	9202      	str	r2, [sp, #8]
 8006f16:	2200      	movs	r2, #0
 8006f18:	9201      	str	r2, [sp, #4]
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2280      	movs	r2, #128	; 0x80
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fffb 	bl	8007f1c <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	7959      	ldrb	r1, [r3, #5]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006f3a:	b292      	uxth	r2, r2
 8006f3c:	9202      	str	r2, [sp, #8]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	9201      	str	r2, [sp, #4]
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	4603      	mov	r3, r0
 8006f46:	2200      	movs	r2, #0
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 ffe7 	bl	8007f1c <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006f4e:	e0e8      	b.n	8007122 <USBH_Process+0x30e>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f8eb 	bl	800712c <USBH_HandleEnum>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f040 80d3 	bne.w	8007104 <USBH_Process+0x2f0>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d103      	bne.n	8006f78 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2208      	movs	r2, #8
 8006f74:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006f76:	e0c5      	b.n	8007104 <USBH_Process+0x2f0>
        phost->gState  = HOST_INPUT;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2207      	movs	r2, #7
 8006f7c:	701a      	strb	r2, [r3, #0]
    break;
 8006f7e:	e0c1      	b.n	8007104 <USBH_Process+0x2f0>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 80be 	beq.w	8007108 <USBH_Process+0x2f4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f92:	2101      	movs	r1, #1
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2208      	movs	r2, #8
 8006f9c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006f9e:	e0b3      	b.n	8007108 <USBH_Process+0x2f4>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fb63 	bl	8007676 <USBH_SetCfg>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f040 80aa 	bne.w	800710c <USBH_Process+0x2f8>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2209      	movs	r2, #9
 8006fbc:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006fbe:	e0a5      	b.n	800710c <USBH_Process+0x2f8>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00b      	beq.n	8006fe6 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006fce:	2101      	movs	r1, #1
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fb73 	bl	80076bc <USBH_SetFeature>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f040 8099 	bne.w	8007110 <USBH_Process+0x2fc>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	220a      	movs	r2, #10
 8006fe2:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006fe4:	e094      	b.n	8007110 <USBH_Process+0x2fc>
      phost->gState  = HOST_CHECK_CLASS;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	220a      	movs	r2, #10
 8006fea:	701a      	strb	r2, [r3, #0]
    break;
 8006fec:	e090      	b.n	8007110 <USBH_Process+0x2fc>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 808d 	beq.w	8007114 <USBH_Process+0x300>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007002:	2300      	movs	r3, #0
 8007004:	73fb      	strb	r3, [r7, #15]
 8007006:	e017      	b.n	8007038 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	33dc      	adds	r3, #220	; 0xdc
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	791a      	ldrb	r2, [r3, #4]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800701c:	429a      	cmp	r2, r3
 800701e:	d108      	bne.n	8007032 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	33dc      	adds	r3, #220	; 0xdc
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	3301      	adds	r3, #1
 8007036:	73fb      	strb	r3, [r7, #15]
 8007038:	7bfb      	ldrb	r3, [r7, #15]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0e4      	beq.n	8007008 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01b      	beq.n	8007080 <USBH_Process+0x26c>
      {

    	USBH_StatusTypeDef init_status = phost->pActiveClass->Init(phost);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	4798      	blx	r3
 8007054:	4603      	mov	r3, r0
 8007056:	73bb      	strb	r3, [r7, #14]

        if(init_status== USBH_OK)
 8007058:	7bbb      	ldrb	r3, [r7, #14]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d109      	bne.n	8007072 <USBH_Process+0x25e>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2206      	movs	r2, #6
 8007062:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800706a:	2103      	movs	r1, #3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007070:	e050      	b.n	8007114 <USBH_Process+0x300>
        else if (init_status!= USBH_BUSY)
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d04d      	beq.n	8007114 <USBH_Process+0x300>
          phost->gState  = HOST_ABORT_STATE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	220d      	movs	r2, #13
 800707c:	701a      	strb	r2, [r3, #0]
    break;
 800707e:	e049      	b.n	8007114 <USBH_Process+0x300>
        phost->gState  = HOST_ABORT_STATE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	220d      	movs	r2, #13
 8007084:	701a      	strb	r2, [r3, #0]
    break;
 8007086:	e045      	b.n	8007114 <USBH_Process+0x300>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00f      	beq.n	80070b2 <USBH_Process+0x29e>
    {
      status = phost->pActiveClass->Requests(phost);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
 800709e:	4603      	mov	r3, r0
 80070a0:	737b      	strb	r3, [r7, #13]

      if(status == USBH_OK)
 80070a2:	7b7b      	ldrb	r3, [r7, #13]
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d136      	bne.n	8007118 <USBH_Process+0x304>
      {
        phost->gState  = HOST_CLASS;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	220b      	movs	r2, #11
 80070ae:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80070b0:	e032      	b.n	8007118 <USBH_Process+0x304>
      phost->gState  = HOST_ABORT_STATE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	220d      	movs	r2, #13
 80070b6:	701a      	strb	r2, [r3, #0]
    break;
 80070b8:	e02e      	b.n	8007118 <USBH_Process+0x304>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d02b      	beq.n	800711c <USBH_Process+0x308>
    {
      phost->pActiveClass->BgndProcess(phost);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	4798      	blx	r3
    }
    break;
 80070d0:	e024      	b.n	800711c <USBH_Process+0x308>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff fe00 	bl	8006cd8 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01e      	beq.n	8007120 <USBH_Process+0x30c>
    {
      phost->pActiveClass->DeInit(phost);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80070f6:	e013      	b.n	8007120 <USBH_Process+0x30c>

  case HOST_ABORT_STATE:
  default :
    break;
 80070f8:	bf00      	nop
 80070fa:	e012      	b.n	8007122 <USBH_Process+0x30e>
    break;
 80070fc:	bf00      	nop
 80070fe:	e010      	b.n	8007122 <USBH_Process+0x30e>
    break;
 8007100:	bf00      	nop
 8007102:	e00e      	b.n	8007122 <USBH_Process+0x30e>
    break;
 8007104:	bf00      	nop
 8007106:	e00c      	b.n	8007122 <USBH_Process+0x30e>
    break;
 8007108:	bf00      	nop
 800710a:	e00a      	b.n	8007122 <USBH_Process+0x30e>
    break;
 800710c:	bf00      	nop
 800710e:	e008      	b.n	8007122 <USBH_Process+0x30e>
    break;
 8007110:	bf00      	nop
 8007112:	e006      	b.n	8007122 <USBH_Process+0x30e>
    break;
 8007114:	bf00      	nop
 8007116:	e004      	b.n	8007122 <USBH_Process+0x30e>
    break;
 8007118:	bf00      	nop
 800711a:	e002      	b.n	8007122 <USBH_Process+0x30e>
    break;
 800711c:	bf00      	nop
 800711e:	e000      	b.n	8007122 <USBH_Process+0x30e>
    break;
 8007120:	bf00      	nop
  }
 return USBH_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af04      	add	r7, sp, #16
 8007132:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007134:	2301      	movs	r3, #1
 8007136:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	785b      	ldrb	r3, [r3, #1]
 800713c:	2b07      	cmp	r3, #7
 800713e:	f200 80f8 	bhi.w	8007332 <USBH_HandleEnum+0x206>
 8007142:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <USBH_HandleEnum+0x1c>)
 8007144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007148:	08007169 	.word	0x08007169
 800714c:	080071db 	.word	0x080071db
 8007150:	080071f3 	.word	0x080071f3
 8007154:	08007269 	.word	0x08007269
 8007158:	0800727f 	.word	0x0800727f
 800715c:	0800729b 	.word	0x0800729b
 8007160:	080072cf 	.word	0x080072cf
 8007164:	08007303 	.word	0x08007303
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007168:	2108      	movs	r1, #8
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f9a9 	bl	80074c2 <USBH_Get_DevDesc>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	f040 80df 	bne.w	8007336 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	7919      	ldrb	r1, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800719c:	b292      	uxth	r2, r2
 800719e:	9202      	str	r2, [sp, #8]
 80071a0:	2200      	movs	r2, #0
 80071a2:	9201      	str	r2, [sp, #4]
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	4603      	mov	r3, r0
 80071a8:	2280      	movs	r2, #128	; 0x80
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 feb6 	bl	8007f1c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	7959      	ldrb	r1, [r3, #5]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80071c4:	b292      	uxth	r2, r2
 80071c6:	9202      	str	r2, [sp, #8]
 80071c8:	2200      	movs	r2, #0
 80071ca:	9201      	str	r2, [sp, #4]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	4603      	mov	r3, r0
 80071d0:	2200      	movs	r2, #0
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fea2 	bl	8007f1c <USBH_OpenPipe>

    }
    break;
 80071d8:	e0ad      	b.n	8007336 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80071da:	2112      	movs	r1, #18
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f970 	bl	80074c2 <USBH_Get_DevDesc>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f040 80a8 	bne.w	800733a <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2202      	movs	r2, #2
 80071ee:	705a      	strb	r2, [r3, #1]

    }
    break;
 80071f0:	e0a3      	b.n	800733a <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80071f2:	2101      	movs	r1, #1
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fa1a 	bl	800762e <USBH_SetAddress>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f040 809e 	bne.w	800733e <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8007202:	2002      	movs	r0, #2
 8007204:	f001 f97a 	bl	80084fc <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2203      	movs	r2, #3
 8007214:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7919      	ldrb	r1, [r3, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800722a:	b292      	uxth	r2, r2
 800722c:	9202      	str	r2, [sp, #8]
 800722e:	2200      	movs	r2, #0
 8007230:	9201      	str	r2, [sp, #4]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	4603      	mov	r3, r0
 8007236:	2280      	movs	r2, #128	; 0x80
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fe6f 	bl	8007f1c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	7959      	ldrb	r1, [r3, #5]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007252:	b292      	uxth	r2, r2
 8007254:	9202      	str	r2, [sp, #8]
 8007256:	2200      	movs	r2, #0
 8007258:	9201      	str	r2, [sp, #4]
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	4603      	mov	r3, r0
 800725e:	2200      	movs	r2, #0
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fe5b 	bl	8007f1c <USBH_OpenPipe>
    }
    break;
 8007266:	e06a      	b.n	800733e <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007268:	2109      	movs	r1, #9
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f952 	bl	8007514 <USBH_Get_CfgDesc>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d165      	bne.n	8007342 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2204      	movs	r2, #4
 800727a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800727c:	e061      	b.n	8007342 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f944 	bl	8007514 <USBH_Get_CfgDesc>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d159      	bne.n	8007346 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2205      	movs	r2, #5
 8007296:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007298:	e055      	b.n	8007346 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d010      	beq.n	80072c6 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80072b0:	23ff      	movs	r3, #255	; 0xff
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f954 	bl	8007560 <USBH_Get_StringDesc>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d145      	bne.n	800734a <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2206      	movs	r2, #6
 80072c2:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80072c4:	e041      	b.n	800734a <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2206      	movs	r2, #6
 80072ca:	705a      	strb	r2, [r3, #1]
    break;
 80072cc:	e03d      	b.n	800734a <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d010      	beq.n	80072fa <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80072e4:	23ff      	movs	r3, #255	; 0xff
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f93a 	bl	8007560 <USBH_Get_StringDesc>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d12d      	bne.n	800734e <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2207      	movs	r2, #7
 80072f6:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80072f8:	e029      	b.n	800734e <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2207      	movs	r2, #7
 80072fe:	705a      	strb	r2, [r3, #1]
    break;
 8007300:	e025      	b.n	800734e <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00f      	beq.n	800732c <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007318:	23ff      	movs	r3, #255	; 0xff
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f920 	bl	8007560 <USBH_Get_StringDesc>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d115      	bne.n	8007352 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800732a:	e012      	b.n	8007352 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73fb      	strb	r3, [r7, #15]
    break;
 8007330:	e00f      	b.n	8007352 <USBH_HandleEnum+0x226>

  default:
    break;
 8007332:	bf00      	nop
 8007334:	e00e      	b.n	8007354 <USBH_HandleEnum+0x228>
    break;
 8007336:	bf00      	nop
 8007338:	e00c      	b.n	8007354 <USBH_HandleEnum+0x228>
    break;
 800733a:	bf00      	nop
 800733c:	e00a      	b.n	8007354 <USBH_HandleEnum+0x228>
    break;
 800733e:	bf00      	nop
 8007340:	e008      	b.n	8007354 <USBH_HandleEnum+0x228>
    break;
 8007342:	bf00      	nop
 8007344:	e006      	b.n	8007354 <USBH_HandleEnum+0x228>
    break;
 8007346:	bf00      	nop
 8007348:	e004      	b.n	8007354 <USBH_HandleEnum+0x228>
    break;
 800734a:	bf00      	nop
 800734c:	e002      	b.n	8007354 <USBH_HandleEnum+0x228>
    break;
 800734e:	bf00      	nop
 8007350:	e000      	b.n	8007354 <USBH_HandleEnum+0x228>
    break;
 8007352:	bf00      	nop
  }
  return Status;
 8007354:	7bfb      	ldrb	r3, [r7, #15]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop

08007360 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007372:	bf00      	nop
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	bc80      	pop	{r7}
 800737a:	4770      	bx	lr

0800737c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f804 	bl	80073a0 <USBH_HandleSof>
}
 8007398:	bf00      	nop
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b0b      	cmp	r3, #11
 80073b0:	d10a      	bne.n	80073c8 <USBH_HandleSof+0x28>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	4798      	blx	r3
  }
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80073e0:	bf00      	nop
}
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr

080073ea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80073fa:	bf00      	nop
}
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	bc80      	pop	{r7}
 8007402:	4770      	bx	lr

08007404 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	bc80      	pop	{r7}
 800741a:	4770      	bx	lr

0800741c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10f      	bne.n	800744e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00e      	beq.n	800745e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007446:	2104      	movs	r1, #4
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	4798      	blx	r3
 800744c:	e007      	b.n	800745e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007454:	2b01      	cmp	r3, #1
 8007456:	d102      	bne.n	800745e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 ff16 	bl	80082a2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	791b      	ldrb	r3, [r3, #4]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fd9a 	bl	8007fb6 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	795b      	ldrb	r3, [r3, #5]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fd94 	bl	8007fb6 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074a6:	2105      	movs	r1, #5
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fedd 	bl	800826c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2203      	movs	r2, #3
 80074b6:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b086      	sub	sp, #24
 80074c6:	af02      	add	r7, sp, #8
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	70fb      	strb	r3, [r7, #3]

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
								  0U,
                                  phost->device.Data,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	b292      	uxth	r2, r2
 80074d8:	9201      	str	r2, [sp, #4]
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	2300      	movs	r3, #0
 80074de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074e2:	2100      	movs	r1, #0
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f868 	bl	80075ba <USBH_GetDescriptor>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <USBH_Get_DevDesc+0x48>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f203 3022 	addw	r0, r3, #802	; 0x322
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007500:	78fa      	ldrb	r2, [r7, #3]
 8007502:	b292      	uxth	r2, r2
 8007504:	4619      	mov	r1, r3
 8007506:	f000 f921 	bl	800774c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af02      	add	r7, sp, #8
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	331c      	adds	r3, #28
 8007524:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007526:	887b      	ldrh	r3, [r7, #2]
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	2300      	movs	r3, #0
 8007530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007534:	2100      	movs	r1, #0
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f83f 	bl	80075ba <USBH_GetDescriptor>
 800753c:	4603      	mov	r3, r0
 800753e:	72fb      	strb	r3, [r7, #11]
 8007540:	7afb      	ldrb	r3, [r7, #11]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d107      	bne.n	8007556 <USBH_Get_CfgDesc+0x42>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800754c:	887a      	ldrh	r2, [r7, #2]
 800754e:	68f9      	ldr	r1, [r7, #12]
 8007550:	4618      	mov	r0, r3
 8007552:	f000 f96a 	bl	800782a <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007556:	7afb      	ldrb	r3, [r7, #11]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b088      	sub	sp, #32
 8007564:	af02      	add	r7, sp, #8
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	607a      	str	r2, [r7, #4]
 800756a:	461a      	mov	r2, r3
 800756c:	460b      	mov	r3, r1
 800756e:	72fb      	strb	r3, [r7, #11]
 8007570:	4613      	mov	r3, r2
 8007572:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	b29b      	uxth	r3, r3
 8007578:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800757c:	b299      	uxth	r1, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
								  0U,
                                  phost->device.Data,
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007584:	893a      	ldrh	r2, [r7, #8]
 8007586:	9201      	str	r2, [sp, #4]
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	2300      	movs	r3, #0
 800758c:	460a      	mov	r2, r1
 800758e:	2100      	movs	r1, #0
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 f812 	bl	80075ba <USBH_GetDescriptor>
 8007596:	4603      	mov	r3, r0
 8007598:	75fb      	strb	r3, [r7, #23]
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d107      	bne.n	80075b0 <USBH_Get_StringDesc+0x50>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075a6:	893a      	ldrh	r2, [r7, #8]
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fa39 	bl	8007a22 <USBH_ParseStringDesc>
  }
  return status;
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBH_GetDescriptor>:
                               uint8_t  req_type,
                               uint16_t value_idx,
							   uint8_t iface_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	4608      	mov	r0, r1
 80075c4:	4611      	mov	r1, r2
 80075c6:	461a      	mov	r2, r3
 80075c8:	4603      	mov	r3, r0
 80075ca:	70fb      	strb	r3, [r7, #3]
 80075cc:	460b      	mov	r3, r1
 80075ce:	803b      	strh	r3, [r7, #0]
 80075d0:	4613      	mov	r3, r2
 80075d2:	70bb      	strb	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	789b      	ldrb	r3, [r3, #2]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d11d      	bne.n	8007618 <USBH_GetDescriptor+0x5e>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2206      	movs	r2, #6
 80075ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	883a      	ldrh	r2, [r7, #0]
 80075f2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80075f4:	883b      	ldrh	r3, [r7, #0]
 80075f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075fe:	d104      	bne.n	800760a <USBH_GetDescriptor+0x50>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f240 4209 	movw	r2, #1033	; 0x409
 8007606:	829a      	strh	r2, [r3, #20]
 8007608:	e003      	b.n	8007612 <USBH_GetDescriptor+0x58>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = iface_idx;
 800760a:	78bb      	ldrb	r3, [r7, #2]
 800760c:	b29a      	uxth	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	8aba      	ldrh	r2, [r7, #20]
 8007616:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007618:	8abb      	ldrh	r3, [r7, #20]
 800761a:	461a      	mov	r2, r3
 800761c:	6939      	ldr	r1, [r7, #16]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fa4b 	bl	8007aba <USBH_CtlReq>
 8007624:	4603      	mov	r3, r0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b082      	sub	sp, #8
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	460b      	mov	r3, r1
 8007638:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	789b      	ldrb	r3, [r3, #2]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d10f      	bne.n	8007662 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2205      	movs	r2, #5
 800764c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	b29a      	uxth	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007662:	2200      	movs	r2, #0
 8007664:	2100      	movs	r1, #0
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa27 	bl	8007aba <USBH_CtlReq>
 800766c:	4603      	mov	r3, r0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	460b      	mov	r3, r1
 8007680:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	789b      	ldrb	r3, [r3, #2]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d10e      	bne.n	80076a8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2209      	movs	r2, #9
 8007694:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	887a      	ldrh	r2, [r7, #2]
 800769a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80076a8:	2200      	movs	r2, #0
 80076aa:	2100      	movs	r1, #0
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fa04 	bl	8007aba <USBH_CtlReq>
 80076b2:	4603      	mov	r3, r0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	789b      	ldrb	r3, [r3, #2]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d10f      	bne.n	80076f0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2203      	movs	r2, #3
 80076da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	b29a      	uxth	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80076f0:	2200      	movs	r2, #0
 80076f2:	2100      	movs	r1, #0
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f9e0 	bl	8007aba <USBH_CtlReq>
 80076fa:	4603      	mov	r3, r0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	789b      	ldrb	r3, [r3, #2]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d10f      	bne.n	8007738 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	b29a      	uxth	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007738:	2200      	movs	r2, #0
 800773a:	2100      	movs	r1, #0
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f9bc 	bl	8007aba <USBH_CtlReq>
 8007742:	4603      	mov	r3, r0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	4613      	mov	r3, r2
 8007758:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	781a      	ldrb	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	785a      	ldrb	r2, [r3, #1]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	3302      	adds	r3, #2
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	b29a      	uxth	r2, r3
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	3303      	adds	r3, #3
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	b29b      	uxth	r3, r3
 800777a:	021b      	lsls	r3, r3, #8
 800777c:	b29b      	uxth	r3, r3
 800777e:	4313      	orrs	r3, r2
 8007780:	b29a      	uxth	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	791a      	ldrb	r2, [r3, #4]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	795a      	ldrb	r2, [r3, #5]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	799a      	ldrb	r2, [r3, #6]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	79da      	ldrb	r2, [r3, #7]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80077a6:	88fb      	ldrh	r3, [r7, #6]
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d939      	bls.n	8007820 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	3308      	adds	r3, #8
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	3309      	adds	r3, #9
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	021b      	lsls	r3, r3, #8
 80077be:	b29b      	uxth	r3, r3
 80077c0:	4313      	orrs	r3, r2
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	330a      	adds	r3, #10
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	330b      	adds	r3, #11
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	021b      	lsls	r3, r3, #8
 80077da:	b29b      	uxth	r3, r3
 80077dc:	4313      	orrs	r3, r2
 80077de:	b29a      	uxth	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	330c      	adds	r3, #12
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	330d      	adds	r3, #13
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	4313      	orrs	r3, r2
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	7b9a      	ldrb	r2, [r3, #14]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	7bda      	ldrb	r2, [r3, #15]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	7c1a      	ldrb	r2, [r3, #16]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	7c5a      	ldrb	r2, [r3, #17]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	745a      	strb	r2, [r3, #17]
  }
}
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr

0800782a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b08a      	sub	sp, #40	; 0x28
 800782e:	af00      	add	r7, sp, #0
 8007830:	60f8      	str	r0, [r7, #12]
 8007832:	60b9      	str	r1, [r7, #8]
 8007834:	4613      	mov	r3, r2
 8007836:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	781a      	ldrb	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	785a      	ldrb	r2, [r3, #1]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	3302      	adds	r3, #2
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	b29a      	uxth	r2, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	3303      	adds	r3, #3
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	b29b      	uxth	r3, r3
 8007870:	4313      	orrs	r3, r2
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	791a      	ldrb	r2, [r3, #4]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	795a      	ldrb	r2, [r3, #5]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	799a      	ldrb	r2, [r3, #6]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	79da      	ldrb	r2, [r3, #7]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	7a1a      	ldrb	r2, [r3, #8]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078a0:	88fb      	ldrh	r3, [r7, #6]
 80078a2:	2b09      	cmp	r3, #9
 80078a4:	d95f      	bls.n	8007966 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80078a6:	2309      	movs	r3, #9
 80078a8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078ae:	e051      	b.n	8007954 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078b0:	f107 0316 	add.w	r3, r7, #22
 80078b4:	4619      	mov	r1, r3
 80078b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078b8:	f000 f8e5 	bl	8007a86 <USBH_GetNextDesc>
 80078bc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	785b      	ldrb	r3, [r3, #1]
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	d146      	bne.n	8007954 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80078c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078ca:	221a      	movs	r2, #26
 80078cc:	fb02 f303 	mul.w	r3, r2, r3
 80078d0:	3308      	adds	r3, #8
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4413      	add	r3, r2
 80078d6:	3302      	adds	r3, #2
 80078d8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80078da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078dc:	69f8      	ldr	r0, [r7, #28]
 80078de:	f000 f846 	bl	800796e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80078ec:	e022      	b.n	8007934 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80078ee:	f107 0316 	add.w	r3, r7, #22
 80078f2:	4619      	mov	r1, r3
 80078f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078f6:	f000 f8c6 	bl	8007a86 <USBH_GetNextDesc>
 80078fa:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	785b      	ldrb	r3, [r3, #1]
 8007900:	2b05      	cmp	r3, #5
 8007902:	d117      	bne.n	8007934 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007904:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007908:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800790c:	3201      	adds	r2, #1
 800790e:	00d2      	lsls	r2, r2, #3
 8007910:	211a      	movs	r1, #26
 8007912:	fb01 f303 	mul.w	r3, r1, r3
 8007916:	4413      	add	r3, r2
 8007918:	3308      	adds	r3, #8
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	4413      	add	r3, r2
 800791e:	3304      	adds	r3, #4
 8007920:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007924:	69b8      	ldr	r0, [r7, #24]
 8007926:	f000 f850 	bl	80079ca <USBH_ParseEPDesc>
            ep_ix++;
 800792a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800792e:	3301      	adds	r3, #1
 8007930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	791b      	ldrb	r3, [r3, #4]
 8007938:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800793c:	429a      	cmp	r2, r3
 800793e:	d204      	bcs.n	800794a <USBH_ParseCfgDesc+0x120>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	885a      	ldrh	r2, [r3, #2]
 8007944:	8afb      	ldrh	r3, [r7, #22]
 8007946:	429a      	cmp	r2, r3
 8007948:	d8d1      	bhi.n	80078ee <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800794a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800794e:	3301      	adds	r3, #1
 8007950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007958:	2b01      	cmp	r3, #1
 800795a:	d804      	bhi.n	8007966 <USBH_ParseCfgDesc+0x13c>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	885a      	ldrh	r2, [r3, #2]
 8007960:	8afb      	ldrh	r3, [r7, #22]
 8007962:	429a      	cmp	r2, r3
 8007964:	d8a4      	bhi.n	80078b0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007966:	bf00      	nop
 8007968:	3728      	adds	r7, #40	; 0x28
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781a      	ldrb	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	785a      	ldrb	r2, [r3, #1]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	789a      	ldrb	r2, [r3, #2]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	78da      	ldrb	r2, [r3, #3]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	791a      	ldrb	r2, [r3, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	795a      	ldrb	r2, [r3, #5]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	799a      	ldrb	r2, [r3, #6]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	79da      	ldrb	r2, [r3, #7]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	7a1a      	ldrb	r2, [r3, #8]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	721a      	strb	r2, [r3, #8]
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr

080079ca <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781a      	ldrb	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	785a      	ldrb	r2, [r3, #1]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	789a      	ldrb	r2, [r3, #2]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	78da      	ldrb	r2, [r3, #3]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	3304      	adds	r3, #4
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	3305      	adds	r3, #5
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	021b      	lsls	r3, r3, #8
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	799a      	ldrb	r2, [r3, #6]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	719a      	strb	r2, [r3, #6]
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc80      	pop	{r7}
 8007a20:	4770      	bx	lr

08007a22 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b087      	sub	sp, #28
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3301      	adds	r3, #1
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d120      	bne.n	8007a7c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	1e9a      	subs	r2, r3, #2
 8007a40:	88fb      	ldrh	r3, [r7, #6]
 8007a42:	4293      	cmp	r3, r2
 8007a44:	bf28      	it	cs
 8007a46:	4613      	movcs	r3, r2
 8007a48:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007a50:	2300      	movs	r3, #0
 8007a52:	82fb      	strh	r3, [r7, #22]
 8007a54:	e00b      	b.n	8007a6e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007a56:	8afb      	ldrh	r3, [r7, #22]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	781a      	ldrb	r2, [r3, #0]
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	3301      	adds	r3, #1
 8007a66:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007a68:	8afb      	ldrh	r3, [r7, #22]
 8007a6a:	3302      	adds	r3, #2
 8007a6c:	82fb      	strh	r3, [r7, #22]
 8007a6e:	8afa      	ldrh	r2, [r7, #22]
 8007a70:	8abb      	ldrh	r3, [r7, #20]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d3ef      	bcc.n	8007a56 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	701a      	strb	r2, [r3, #0]
  }
}
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bc80      	pop	{r7}
 8007a84:	4770      	bx	lr

08007a86 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b085      	sub	sp, #20
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	881a      	ldrh	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	4413      	add	r3, r2
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4413      	add	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8007aae:	68fb      	ldr	r3, [r7, #12]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	4770      	bx	lr

08007aba <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b086      	sub	sp, #24
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	60b9      	str	r1, [r7, #8]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	789b      	ldrb	r3, [r3, #2]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d002      	beq.n	8007ada <USBH_CtlReq+0x20>
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d00f      	beq.n	8007af8 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007ad8:	e034      	b.n	8007b44 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	88fa      	ldrh	r2, [r7, #6]
 8007ae4:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2202      	movs	r2, #2
 8007af0:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007af2:	2301      	movs	r3, #1
 8007af4:	75fb      	strb	r3, [r7, #23]
    break;
 8007af6:	e025      	b.n	8007b44 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 f829 	bl	8007b50 <USBH_HandleControl>
 8007afe:	4603      	mov	r3, r0
 8007b00:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d108      	bne.n	8007b1a <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	75fb      	strb	r3, [r7, #23]
    break;
 8007b18:	e013      	b.n	8007b42 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	d108      	bne.n	8007b32 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	75fb      	strb	r3, [r7, #23]
    break;
 8007b30:	e007      	b.n	8007b42 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d104      	bne.n	8007b42 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007b3e:	2302      	movs	r3, #2
 8007b40:	75fb      	strb	r3, [r7, #23]
    break;
 8007b42:	bf00      	nop
  }
  return status;
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	7e1b      	ldrb	r3, [r3, #24]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	2b0a      	cmp	r3, #10
 8007b68:	f200 814c 	bhi.w	8007e04 <USBH_HandleControl+0x2b4>
 8007b6c:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <USBH_HandleControl+0x24>)
 8007b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b72:	bf00      	nop
 8007b74:	08007ba1 	.word	0x08007ba1
 8007b78:	08007bbb 	.word	0x08007bbb
 8007b7c:	08007c25 	.word	0x08007c25
 8007b80:	08007c4b 	.word	0x08007c4b
 8007b84:	08007c83 	.word	0x08007c83
 8007b88:	08007caf 	.word	0x08007caf
 8007b8c:	08007d01 	.word	0x08007d01
 8007b90:	08007d23 	.word	0x08007d23
 8007b94:	08007d5f 	.word	0x08007d5f
 8007b98:	08007d87 	.word	0x08007d87
 8007b9c:	08007dc5 	.word	0x08007dc5
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f103 0110 	add.w	r1, r3, #16
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	795b      	ldrb	r3, [r3, #5]
 8007baa:	461a      	mov	r2, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f939 	bl	8007e24 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	761a      	strb	r2, [r3, #24]
    break;
 8007bb8:	e12f      	b.n	8007e1a <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	795b      	ldrb	r3, [r3, #5]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fc48 	bl	8008456 <USBH_LL_GetURBState>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d11e      	bne.n	8007c0e <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	7c1b      	ldrb	r3, [r3, #16]
 8007bd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bd8:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	8adb      	ldrh	r3, [r3, #22]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007be2:	7b7b      	ldrb	r3, [r7, #13]
 8007be4:	2b80      	cmp	r3, #128	; 0x80
 8007be6:	d103      	bne.n	8007bf0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2203      	movs	r2, #3
 8007bec:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007bee:	e10b      	b.n	8007e08 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2205      	movs	r2, #5
 8007bf4:	761a      	strb	r2, [r3, #24]
    break;
 8007bf6:	e107      	b.n	8007e08 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007bf8:	7b7b      	ldrb	r3, [r7, #13]
 8007bfa:	2b80      	cmp	r3, #128	; 0x80
 8007bfc:	d103      	bne.n	8007c06 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2209      	movs	r2, #9
 8007c02:	761a      	strb	r2, [r3, #24]
    break;
 8007c04:	e100      	b.n	8007e08 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2207      	movs	r2, #7
 8007c0a:	761a      	strb	r2, [r3, #24]
    break;
 8007c0c:	e0fc      	b.n	8007e08 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d003      	beq.n	8007c1c <USBH_HandleControl+0xcc>
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	f040 80f6 	bne.w	8007e08 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	220b      	movs	r2, #11
 8007c20:	761a      	strb	r2, [r3, #24]
    break;
 8007c22:	e0f1      	b.n	8007e08 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6899      	ldr	r1, [r3, #8]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	899a      	ldrh	r2, [r3, #12]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	791b      	ldrb	r3, [r3, #4]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f930 	bl	8007ea2 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2204      	movs	r2, #4
 8007c46:	761a      	strb	r2, [r3, #24]
    break;
 8007c48:	e0e7      	b.n	8007e1a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	791b      	ldrb	r3, [r3, #4]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fc00 	bl	8008456 <USBH_LL_GetURBState>
 8007c56:	4603      	mov	r3, r0
 8007c58:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007c5a:	7bbb      	ldrb	r3, [r7, #14]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d102      	bne.n	8007c66 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2209      	movs	r2, #9
 8007c64:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	2b05      	cmp	r3, #5
 8007c6a:	d102      	bne.n	8007c72 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007c70:	e0cc      	b.n	8007e0c <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	f040 80c9 	bne.w	8007e0c <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	220b      	movs	r2, #11
 8007c7e:	761a      	strb	r2, [r3, #24]
    break;
 8007c80:	e0c4      	b.n	8007e0c <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6899      	ldr	r1, [r3, #8]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	899a      	ldrh	r2, [r3, #12]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	7958      	ldrb	r0, [r3, #5]
 8007c8e:	2301      	movs	r3, #1
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	4603      	mov	r3, r0
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f8df 	bl	8007e58 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2206      	movs	r2, #6
 8007caa:	761a      	strb	r2, [r3, #24]
    break;
 8007cac:	e0b5      	b.n	8007e1a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	795b      	ldrb	r3, [r3, #5]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fbce 	bl	8008456 <USBH_LL_GetURBState>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d103      	bne.n	8007ccc <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2207      	movs	r2, #7
 8007cc8:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007cca:	e0a1      	b.n	8007e10 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	2b05      	cmp	r3, #5
 8007cd0:	d105      	bne.n	8007cde <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	220c      	movs	r2, #12
 8007cd6:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	73fb      	strb	r3, [r7, #15]
    break;
 8007cdc:	e098      	b.n	8007e10 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d103      	bne.n	8007cec <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2205      	movs	r2, #5
 8007ce8:	761a      	strb	r2, [r3, #24]
    break;
 8007cea:	e091      	b.n	8007e10 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	f040 808e 	bne.w	8007e10 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	220b      	movs	r2, #11
 8007cf8:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	73fb      	strb	r3, [r7, #15]
    break;
 8007cfe:	e087      	b.n	8007e10 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	791b      	ldrb	r3, [r3, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	2100      	movs	r1, #0
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f8ca 	bl	8007ea2 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2208      	movs	r2, #8
 8007d1e:	761a      	strb	r2, [r3, #24]

    break;
 8007d20:	e07b      	b.n	8007e1a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	791b      	ldrb	r3, [r3, #4]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fb94 	bl	8008456 <USBH_LL_GetURBState>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d105      	bne.n	8007d44 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	220d      	movs	r2, #13
 8007d3c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007d42:	e067      	b.n	8007e14 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d103      	bne.n	8007d52 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	220b      	movs	r2, #11
 8007d4e:	761a      	strb	r2, [r3, #24]
    break;
 8007d50:	e060      	b.n	8007e14 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
 8007d54:	2b05      	cmp	r3, #5
 8007d56:	d15d      	bne.n	8007e14 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d5c:	e05a      	b.n	8007e14 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	795a      	ldrb	r2, [r3, #5]
 8007d62:	2301      	movs	r3, #1
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	4613      	mov	r3, r2
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f873 	bl	8007e58 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	220a      	movs	r2, #10
 8007d82:	761a      	strb	r2, [r3, #24]
    break;
 8007d84:	e049      	b.n	8007e1a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	795b      	ldrb	r3, [r3, #5]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fb62 	bl	8008456 <USBH_LL_GetURBState>
 8007d92:	4603      	mov	r3, r0
 8007d94:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d105      	bne.n	8007da8 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	220d      	movs	r2, #13
 8007da4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007da6:	e037      	b.n	8007e18 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d103      	bne.n	8007db6 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2209      	movs	r2, #9
 8007db2:	761a      	strb	r2, [r3, #24]
    break;
 8007db4:	e030      	b.n	8007e18 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d12d      	bne.n	8007e18 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	220b      	movs	r2, #11
 8007dc0:	761a      	strb	r2, [r3, #24]
    break;
 8007dc2:	e029      	b.n	8007e18 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	7e5b      	ldrb	r3, [r3, #25]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	765a      	strb	r2, [r3, #25]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	7e5b      	ldrb	r3, [r3, #25]
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d809      	bhi.n	8007dec <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fa62 	bl	80082a2 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007dea:	e016      	b.n	8007e1a <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007df2:	2106      	movs	r1, #6
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007dfe:	2302      	movs	r3, #2
 8007e00:	73fb      	strb	r3, [r7, #15]
    break;
 8007e02:	e00a      	b.n	8007e1a <USBH_HandleControl+0x2ca>

  default:
    break;
 8007e04:	bf00      	nop
 8007e06:	e008      	b.n	8007e1a <USBH_HandleControl+0x2ca>
    break;
 8007e08:	bf00      	nop
 8007e0a:	e006      	b.n	8007e1a <USBH_HandleControl+0x2ca>
    break;
 8007e0c:	bf00      	nop
 8007e0e:	e004      	b.n	8007e1a <USBH_HandleControl+0x2ca>
    break;
 8007e10:	bf00      	nop
 8007e12:	e002      	b.n	8007e1a <USBH_HandleControl+0x2ca>
    break;
 8007e14:	bf00      	nop
 8007e16:	e000      	b.n	8007e1a <USBH_HandleControl+0x2ca>
    break;
 8007e18:	bf00      	nop
  }
  return status;
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af04      	add	r7, sp, #16
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007e32:	79f9      	ldrb	r1, [r7, #7]
 8007e34:	2300      	movs	r3, #0
 8007e36:	9303      	str	r3, [sp, #12]
 8007e38:	2308      	movs	r3, #8
 8007e3a:	9302      	str	r3, [sp, #8]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	2300      	movs	r3, #0
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	2300      	movs	r3, #0
 8007e46:	2200      	movs	r2, #0
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 fad3 	bl	80083f4 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af04      	add	r7, sp, #16
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4611      	mov	r1, r2
 8007e64:	461a      	mov	r2, r3
 8007e66:	460b      	mov	r3, r1
 8007e68:	80fb      	strh	r3, [r7, #6]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007e7c:	7979      	ldrb	r1, [r7, #5]
 8007e7e:	7e3b      	ldrb	r3, [r7, #24]
 8007e80:	9303      	str	r3, [sp, #12]
 8007e82:	88fb      	ldrh	r3, [r7, #6]
 8007e84:	9302      	str	r3, [sp, #8]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	2200      	movs	r2, #0
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 faae 	bl	80083f4 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b088      	sub	sp, #32
 8007ea6:	af04      	add	r7, sp, #16
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	4611      	mov	r1, r2
 8007eae:	461a      	mov	r2, r3
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	80fb      	strh	r3, [r7, #6]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007eb8:	7979      	ldrb	r1, [r7, #5]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	88fb      	ldrh	r3, [r7, #6]
 8007ec0:	9302      	str	r3, [sp, #8]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2201      	movs	r2, #1
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fa90 	bl	80083f4 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ed4:	2300      	movs	r3, #0

}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t length,
                                uint8_t pipe_num)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b088      	sub	sp, #32
 8007ee2:	af04      	add	r7, sp, #16
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	4611      	mov	r1, r2
 8007eea:	461a      	mov	r2, r3
 8007eec:	460b      	mov	r3, r1
 8007eee:	71fb      	strb	r3, [r7, #7]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007ef4:	79fb      	ldrb	r3, [r7, #7]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	79b9      	ldrb	r1, [r7, #6]
 8007efa:	2200      	movs	r2, #0
 8007efc:	9203      	str	r2, [sp, #12]
 8007efe:	9302      	str	r3, [sp, #8]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	2301      	movs	r3, #1
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	2303      	movs	r3, #3
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 fa71 	bl	80083f4 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af04      	add	r7, sp, #16
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	4608      	mov	r0, r1
 8007f26:	4611      	mov	r1, r2
 8007f28:	461a      	mov	r2, r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	70fb      	strb	r3, [r7, #3]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70bb      	strb	r3, [r7, #2]
 8007f32:	4613      	mov	r3, r2
 8007f34:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007f36:	7878      	ldrb	r0, [r7, #1]
 8007f38:	78ba      	ldrb	r2, [r7, #2]
 8007f3a:	78f9      	ldrb	r1, [r7, #3]
 8007f3c:	8b3b      	ldrh	r3, [r7, #24]
 8007f3e:	9302      	str	r3, [sp, #8]
 8007f40:	7d3b      	ldrb	r3, [r7, #20]
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	7c3b      	ldrb	r3, [r7, #16]
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	4603      	mov	r3, r0
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fa04 	bl	8008358 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007f50:	2300      	movs	r3, #0

}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	460b      	mov	r3, r1
 8007f64:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007f66:	78fb      	ldrb	r3, [r7, #3]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa23 	bl	80083b6 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007f70:	2300      	movs	r3, #0

}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	460b      	mov	r3, r1
 8007f84:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f830 	bl	8007fec <USBH_GetFreePipe>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007f90:	89fb      	ldrh	r3, [r7, #14]
 8007f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d007      	beq.n	8007faa <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	89fa      	ldrh	r2, [r7, #14]
 8007f9e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	32e0      	adds	r2, #224	; 0xe0
 8007fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007faa:	89fb      	ldrh	r3, [r7, #14]
 8007fac:	b2db      	uxtb	r3, r3
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007fc2:	78fb      	ldrb	r3, [r7, #3]
 8007fc4:	2b0a      	cmp	r3, #10
 8007fc6:	d80b      	bhi.n	8007fe0 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007fc8:	78fa      	ldrb	r2, [r7, #3]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	32e0      	adds	r2, #224	; 0xe0
 8007fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd2:	78fa      	ldrb	r2, [r7, #3]
 8007fd4:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	32e0      	adds	r2, #224	; 0xe0
 8007fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bc80      	pop	{r7}
 8007fea:	4770      	bx	lr

08007fec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73fb      	strb	r3, [r7, #15]
 8007ffc:	e00e      	b.n	800801c <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007ffe:	7bfa      	ldrb	r2, [r7, #15]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	32e0      	adds	r2, #224	; 0xe0
 8008004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d102      	bne.n	8008016 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	b29b      	uxth	r3, r3
 8008014:	e007      	b.n	8008026 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	3301      	adds	r3, #1
 800801a:	73fb      	strb	r3, [r7, #15]
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	2b0a      	cmp	r3, #10
 8008020:	d9ed      	bls.n	8007ffe <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8008022:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008026:	4618      	mov	r0, r3
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	bc80      	pop	{r7}
 800802e:	4770      	bx	lr

08008030 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008034:	2201      	movs	r2, #1
 8008036:	490e      	ldr	r1, [pc, #56]	; (8008070 <MX_USB_HOST_Init+0x40>)
 8008038:	480e      	ldr	r0, [pc, #56]	; (8008074 <MX_USB_HOST_Init+0x44>)
 800803a:	f7fe fe23 	bl	8006c84 <USBH_Init>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008044:	f7f8 fed4 	bl	8000df0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8008048:	490b      	ldr	r1, [pc, #44]	; (8008078 <MX_USB_HOST_Init+0x48>)
 800804a:	480a      	ldr	r0, [pc, #40]	; (8008074 <MX_USB_HOST_Init+0x44>)
 800804c:	f7fe fe8c 	bl	8006d68 <USBH_RegisterClass>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008056:	f7f8 fecb 	bl	8000df0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800805a:	4806      	ldr	r0, [pc, #24]	; (8008074 <MX_USB_HOST_Init+0x44>)
 800805c:	f7fe fec9 	bl	8006df2 <USBH_Start>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008066:	f7f8 fec3 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800806a:	bf00      	nop
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	08008091 	.word	0x08008091
 8008074:	20000184 	.word	0x20000184
 8008078:	20000010 	.word	0x20000010

0800807c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008080:	4802      	ldr	r0, [pc, #8]	; (800808c <MX_USB_HOST_Process+0x10>)
 8008082:	f7fe fec7 	bl	8006e14 <USBH_Process>
}
 8008086:	bf00      	nop
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000184 	.word	0x20000184

08008090 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800809c:	78fb      	ldrb	r3, [r7, #3]
 800809e:	3b01      	subs	r3, #1
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d819      	bhi.n	80080d8 <USBH_UserProcess+0x48>
 80080a4:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <USBH_UserProcess+0x1c>)
 80080a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080aa:	bf00      	nop
 80080ac:	080080d9 	.word	0x080080d9
 80080b0:	080080c9 	.word	0x080080c9
 80080b4:	080080d9 	.word	0x080080d9
 80080b8:	080080d1 	.word	0x080080d1
 80080bc:	080080c1 	.word	0x080080c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80080c0:	4b08      	ldr	r3, [pc, #32]	; (80080e4 <USBH_UserProcess+0x54>)
 80080c2:	2203      	movs	r2, #3
 80080c4:	701a      	strb	r2, [r3, #0]
  break;
 80080c6:	e008      	b.n	80080da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80080c8:	4b06      	ldr	r3, [pc, #24]	; (80080e4 <USBH_UserProcess+0x54>)
 80080ca:	2202      	movs	r2, #2
 80080cc:	701a      	strb	r2, [r3, #0]
  break;
 80080ce:	e004      	b.n	80080da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80080d0:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <USBH_UserProcess+0x54>)
 80080d2:	2201      	movs	r2, #1
 80080d4:	701a      	strb	r2, [r3, #0]
  break;
 80080d6:	e000      	b.n	80080da <USBH_UserProcess+0x4a>

  default:
  break;
 80080d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80080da:	bf00      	nop
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	4770      	bx	lr
 80080e4:	200000d1 	.word	0x200000d1

080080e8 <USBH_ApplicationState>:

/**
  * @}
  */
ApplicationTypeDef USBH_ApplicationState(void)
{
 80080e8:	b480      	push	{r7}
 80080ea:	af00      	add	r7, sp, #0
	return Appli_state;
 80080ec:	4b02      	ldr	r3, [pc, #8]	; (80080f8 <USBH_ApplicationState+0x10>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr
 80080f8:	200000d1 	.word	0x200000d1

080080fc <USBH_GetHost>:

USBH_HandleTypeDef * USBH_GetHost(void)
{
 80080fc:	b480      	push	{r7}
 80080fe:	af00      	add	r7, sp, #0
	return &hUsbHostFS;
 8008100:	4b02      	ldr	r3, [pc, #8]	; (800810c <USBH_GetHost+0x10>)
}
 8008102:	4618      	mov	r0, r3
 8008104:	46bd      	mov	sp, r7
 8008106:	bc80      	pop	{r7}
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	20000184 	.word	0x20000184

08008110 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008120:	d113      	bne.n	800814a <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008122:	4b0c      	ldr	r3, [pc, #48]	; (8008154 <HAL_HCD_MspInit+0x44>)
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	4a0b      	ldr	r2, [pc, #44]	; (8008154 <HAL_HCD_MspInit+0x44>)
 8008128:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800812c:	6153      	str	r3, [r2, #20]
 800812e:	4b09      	ldr	r3, [pc, #36]	; (8008154 <HAL_HCD_MspInit+0x44>)
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800813a:	2200      	movs	r2, #0
 800813c:	2100      	movs	r1, #0
 800813e:	2043      	movs	r0, #67	; 0x43
 8008140:	f7f9 f8ff 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008144:	2043      	movs	r0, #67	; 0x43
 8008146:	f7f9 f918 	bl	800137a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800814a:	bf00      	nop
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	40021000 	.word	0x40021000

08008158 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008166:	4618      	mov	r0, r3
 8008168:	f7ff f908 	bl	800737c <USBH_LL_IncTimer>
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008182:	4618      	mov	r0, r3
 8008184:	f7ff f94a 	bl	800741c <USBH_LL_Connect>
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff f962 	bl	8007468 <USBH_LL_Disconnect>
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	70fb      	strb	r3, [r7, #3]
 80081b8:	4613      	mov	r3, r2
 80081ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bc80      	pop	{r7}
 80081c4:	4770      	bx	lr

080081c6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff f8fb 	bl	80073d0 <USBH_LL_PortEnabled>
} 
 80081da:	bf00      	nop
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7ff f8fa 	bl	80073ea <USBH_LL_PortDisabled>
} 
 80081f6:	bf00      	nop
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800820e:	2b01      	cmp	r3, #1
 8008210:	d124      	bne.n	800825c <USBH_LL_Init+0x5c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008212:	4a15      	ldr	r2, [pc, #84]	; (8008268 <USBH_LL_Init+0x68>)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a12      	ldr	r2, [pc, #72]	; (8008268 <USBH_LL_Init+0x68>)
 800821e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008222:	4b11      	ldr	r3, [pc, #68]	; (8008268 <USBH_LL_Init+0x68>)
 8008224:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008228:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800822a:	4b0f      	ldr	r3, [pc, #60]	; (8008268 <USBH_LL_Init+0x68>)
 800822c:	2208      	movs	r2, #8
 800822e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008230:	4b0d      	ldr	r3, [pc, #52]	; (8008268 <USBH_LL_Init+0x68>)
 8008232:	2201      	movs	r2, #1
 8008234:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008236:	4b0c      	ldr	r3, [pc, #48]	; (8008268 <USBH_LL_Init+0x68>)
 8008238:	2200      	movs	r2, #0
 800823a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800823c:	480a      	ldr	r0, [pc, #40]	; (8008268 <USBH_LL_Init+0x68>)
 800823e:	f7f9 fa29 	bl	8001694 <HAL_HCD_Init>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <USBH_LL_Init+0x4c>
  {
    Error_Handler( );
 8008248:	f7f8 fdd2 	bl	8000df0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800824c:	4806      	ldr	r0, [pc, #24]	; (8008268 <USBH_LL_Init+0x68>)
 800824e:	f7f9 fe13 	bl	8001e78 <HAL_HCD_GetCurrentFrame>
 8008252:	4603      	mov	r3, r0
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff f882 	bl	8007360 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000550 	.word	0x20000550

0800826c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008282:	4618      	mov	r0, r3
 8008284:	f7f9 fd96 	bl	8001db4 <HAL_HCD_Start>
 8008288:	4603      	mov	r3, r0
 800828a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800828c:	7bfb      	ldrb	r3, [r7, #15]
 800828e:	4618      	mov	r0, r3
 8008290:	f000 f940 	bl	8008514 <USBH_Get_USB_Status>
 8008294:	4603      	mov	r3, r0
 8008296:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008298:	7bbb      	ldrb	r3, [r7, #14]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7f9 fd9e 	bl	8001dfa <HAL_HCD_Stop>
 80082be:	4603      	mov	r3, r0
 80082c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 f925 	bl	8008514 <USBH_Get_USB_Status>
 80082ca:	4603      	mov	r3, r0
 80082cc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80082e0:	2301      	movs	r3, #1
 80082e2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7f9 fdd2 	bl	8001e94 <HAL_HCD_GetCurrentSpeed>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d007      	beq.n	8008306 <USBH_LL_GetSpeed+0x2e>
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d302      	bcc.n	8008300 <USBH_LL_GetSpeed+0x28>
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d006      	beq.n	800830c <USBH_LL_GetSpeed+0x34>
 80082fe:	e008      	b.n	8008312 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
    break;
 8008304:	e008      	b.n	8008318 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008306:	2301      	movs	r3, #1
 8008308:	73fb      	strb	r3, [r7, #15]
    break;
 800830a:	e005      	b.n	8008318 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800830c:	2302      	movs	r3, #2
 800830e:	73fb      	strb	r3, [r7, #15]
    break;
 8008310:	e002      	b.n	8008318 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008312:	2301      	movs	r3, #1
 8008314:	73fb      	strb	r3, [r7, #15]
    break;
 8008316:	bf00      	nop
  }
  return  speed;
 8008318:	7bfb      	ldrb	r3, [r7, #15]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008338:	4618      	mov	r0, r3
 800833a:	f7f9 fd7b 	bl	8001e34 <HAL_HCD_ResetPort>
 800833e:	4603      	mov	r3, r0
 8008340:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	4618      	mov	r0, r3
 8008346:	f000 f8e5 	bl	8008514 <USBH_Get_USB_Status>
 800834a:	4603      	mov	r3, r0
 800834c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800834e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008358:	b590      	push	{r4, r7, lr}
 800835a:	b089      	sub	sp, #36	; 0x24
 800835c:	af04      	add	r7, sp, #16
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	4608      	mov	r0, r1
 8008362:	4611      	mov	r1, r2
 8008364:	461a      	mov	r2, r3
 8008366:	4603      	mov	r3, r0
 8008368:	70fb      	strb	r3, [r7, #3]
 800836a:	460b      	mov	r3, r1
 800836c:	70bb      	strb	r3, [r7, #2]
 800836e:	4613      	mov	r3, r2
 8008370:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008380:	787c      	ldrb	r4, [r7, #1]
 8008382:	78ba      	ldrb	r2, [r7, #2]
 8008384:	78f9      	ldrb	r1, [r7, #3]
 8008386:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008388:	9302      	str	r3, [sp, #8]
 800838a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800838e:	9301      	str	r3, [sp, #4]
 8008390:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	4623      	mov	r3, r4
 8008398:	f7f9 f9de 	bl	8001758 <HAL_HCD_HC_Init>
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 f8b6 	bl	8008514 <USBH_Get_USB_Status>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd90      	pop	{r4, r7, pc}

080083b6 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083d0:	78fa      	ldrb	r2, [r7, #3]
 80083d2:	4611      	mov	r1, r2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7f9 fa57 	bl	8001888 <HAL_HCD_HC_Halt>
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 f897 	bl	8008514 <USBH_Get_USB_Status>
 80083e6:	4603      	mov	r3, r0
 80083e8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80083f4:	b590      	push	{r4, r7, lr}
 80083f6:	b089      	sub	sp, #36	; 0x24
 80083f8:	af04      	add	r7, sp, #16
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	4608      	mov	r0, r1
 80083fe:	4611      	mov	r1, r2
 8008400:	461a      	mov	r2, r3
 8008402:	4603      	mov	r3, r0
 8008404:	70fb      	strb	r3, [r7, #3]
 8008406:	460b      	mov	r3, r1
 8008408:	70bb      	strb	r3, [r7, #2]
 800840a:	4613      	mov	r3, r2
 800840c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800841c:	787c      	ldrb	r4, [r7, #1]
 800841e:	78ba      	ldrb	r2, [r7, #2]
 8008420:	78f9      	ldrb	r1, [r7, #3]
 8008422:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008426:	9303      	str	r3, [sp, #12]
 8008428:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800842a:	9302      	str	r3, [sp, #8]
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	4623      	mov	r3, r4
 8008438:	f7f9 fa4a 	bl	80018d0 <HAL_HCD_HC_SubmitRequest>
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	4618      	mov	r0, r3
 8008444:	f000 f866 	bl	8008514 <USBH_Get_USB_Status>
 8008448:	4603      	mov	r3, r0
 800844a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800844c:	7bbb      	ldrb	r3, [r7, #14]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	bd90      	pop	{r4, r7, pc}

08008456 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	460b      	mov	r3, r1
 8008460:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008468:	78fa      	ldrb	r2, [r7, #3]
 800846a:	4611      	mov	r1, r2
 800846c:	4618      	mov	r0, r3
 800846e:	f7f9 fcef 	bl	8001e50 <HAL_HCD_HC_GetURBState>
 8008472:	4603      	mov	r3, r0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8008488:	20c8      	movs	r0, #200	; 0xc8
 800848a:	f7f8 fe61 	bl	8001150 <HAL_Delay>
  return USBH_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
 80084a4:	4613      	mov	r3, r2
 80084a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80084b0:	78fa      	ldrb	r2, [r7, #3]
 80084b2:	68f9      	ldr	r1, [r7, #12]
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	00db      	lsls	r3, r3, #3
 80084bc:	440b      	add	r3, r1
 80084be:	333b      	adds	r3, #59	; 0x3b
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00a      	beq.n	80084dc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80084c6:	78fa      	ldrb	r2, [r7, #3]
 80084c8:	68f9      	ldr	r1, [r7, #12]
 80084ca:	4613      	mov	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	440b      	add	r3, r1
 80084d4:	3350      	adds	r3, #80	; 0x50
 80084d6:	78ba      	ldrb	r2, [r7, #2]
 80084d8:	701a      	strb	r2, [r3, #0]
 80084da:	e009      	b.n	80084f0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80084dc:	78fa      	ldrb	r2, [r7, #3]
 80084de:	68f9      	ldr	r1, [r7, #12]
 80084e0:	4613      	mov	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	00db      	lsls	r3, r3, #3
 80084e8:	440b      	add	r3, r1
 80084ea:	3351      	adds	r3, #81	; 0x51
 80084ec:	78ba      	ldrb	r2, [r7, #2]
 80084ee:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bc80      	pop	{r7}
 80084fa:	4770      	bx	lr

080084fc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7f8 fe23 	bl	8001150 <HAL_Delay>
}
 800850a:	bf00      	nop
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
	...

08008514 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	2b03      	cmp	r3, #3
 8008526:	d817      	bhi.n	8008558 <USBH_Get_USB_Status+0x44>
 8008528:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <USBH_Get_USB_Status+0x1c>)
 800852a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852e:	bf00      	nop
 8008530:	08008541 	.word	0x08008541
 8008534:	08008547 	.word	0x08008547
 8008538:	0800854d 	.word	0x0800854d
 800853c:	08008553 	.word	0x08008553
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]
    break;
 8008544:	e00b      	b.n	800855e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008546:	2302      	movs	r3, #2
 8008548:	73fb      	strb	r3, [r7, #15]
    break;
 800854a:	e008      	b.n	800855e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800854c:	2301      	movs	r3, #1
 800854e:	73fb      	strb	r3, [r7, #15]
    break;
 8008550:	e005      	b.n	800855e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008552:	2302      	movs	r3, #2
 8008554:	73fb      	strb	r3, [r7, #15]
    break;
 8008556:	e002      	b.n	800855e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008558:	2302      	movs	r3, #2
 800855a:	73fb      	strb	r3, [r7, #15]
    break;
 800855c:	bf00      	nop
  }
  return usb_status;
 800855e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	bc80      	pop	{r7}
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop

0800856c <__errno>:
 800856c:	4b01      	ldr	r3, [pc, #4]	; (8008574 <__errno+0x8>)
 800856e:	6818      	ldr	r0, [r3, #0]
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20000038 	.word	0x20000038

08008578 <malloc>:
 8008578:	4b02      	ldr	r3, [pc, #8]	; (8008584 <malloc+0xc>)
 800857a:	4601      	mov	r1, r0
 800857c:	6818      	ldr	r0, [r3, #0]
 800857e:	f000 b85f 	b.w	8008640 <_malloc_r>
 8008582:	bf00      	nop
 8008584:	20000038 	.word	0x20000038

08008588 <free>:
 8008588:	4b02      	ldr	r3, [pc, #8]	; (8008594 <free+0xc>)
 800858a:	4601      	mov	r1, r0
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	f000 b80b 	b.w	80085a8 <_free_r>
 8008592:	bf00      	nop
 8008594:	20000038 	.word	0x20000038

08008598 <memset>:
 8008598:	4603      	mov	r3, r0
 800859a:	4402      	add	r2, r0
 800859c:	4293      	cmp	r3, r2
 800859e:	d100      	bne.n	80085a2 <memset+0xa>
 80085a0:	4770      	bx	lr
 80085a2:	f803 1b01 	strb.w	r1, [r3], #1
 80085a6:	e7f9      	b.n	800859c <memset+0x4>

080085a8 <_free_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4605      	mov	r5, r0
 80085ac:	2900      	cmp	r1, #0
 80085ae:	d043      	beq.n	8008638 <_free_r+0x90>
 80085b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085b4:	1f0c      	subs	r4, r1, #4
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	bfb8      	it	lt
 80085ba:	18e4      	addlt	r4, r4, r3
 80085bc:	f000 f8aa 	bl	8008714 <__malloc_lock>
 80085c0:	4a1e      	ldr	r2, [pc, #120]	; (800863c <_free_r+0x94>)
 80085c2:	6813      	ldr	r3, [r2, #0]
 80085c4:	4610      	mov	r0, r2
 80085c6:	b933      	cbnz	r3, 80085d6 <_free_r+0x2e>
 80085c8:	6063      	str	r3, [r4, #4]
 80085ca:	6014      	str	r4, [r2, #0]
 80085cc:	4628      	mov	r0, r5
 80085ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085d2:	f000 b8a0 	b.w	8008716 <__malloc_unlock>
 80085d6:	42a3      	cmp	r3, r4
 80085d8:	d90b      	bls.n	80085f2 <_free_r+0x4a>
 80085da:	6821      	ldr	r1, [r4, #0]
 80085dc:	1862      	adds	r2, r4, r1
 80085de:	4293      	cmp	r3, r2
 80085e0:	bf01      	itttt	eq
 80085e2:	681a      	ldreq	r2, [r3, #0]
 80085e4:	685b      	ldreq	r3, [r3, #4]
 80085e6:	1852      	addeq	r2, r2, r1
 80085e8:	6022      	streq	r2, [r4, #0]
 80085ea:	6063      	str	r3, [r4, #4]
 80085ec:	6004      	str	r4, [r0, #0]
 80085ee:	e7ed      	b.n	80085cc <_free_r+0x24>
 80085f0:	4613      	mov	r3, r2
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	b10a      	cbz	r2, 80085fa <_free_r+0x52>
 80085f6:	42a2      	cmp	r2, r4
 80085f8:	d9fa      	bls.n	80085f0 <_free_r+0x48>
 80085fa:	6819      	ldr	r1, [r3, #0]
 80085fc:	1858      	adds	r0, r3, r1
 80085fe:	42a0      	cmp	r0, r4
 8008600:	d10b      	bne.n	800861a <_free_r+0x72>
 8008602:	6820      	ldr	r0, [r4, #0]
 8008604:	4401      	add	r1, r0
 8008606:	1858      	adds	r0, r3, r1
 8008608:	4282      	cmp	r2, r0
 800860a:	6019      	str	r1, [r3, #0]
 800860c:	d1de      	bne.n	80085cc <_free_r+0x24>
 800860e:	6810      	ldr	r0, [r2, #0]
 8008610:	6852      	ldr	r2, [r2, #4]
 8008612:	4401      	add	r1, r0
 8008614:	6019      	str	r1, [r3, #0]
 8008616:	605a      	str	r2, [r3, #4]
 8008618:	e7d8      	b.n	80085cc <_free_r+0x24>
 800861a:	d902      	bls.n	8008622 <_free_r+0x7a>
 800861c:	230c      	movs	r3, #12
 800861e:	602b      	str	r3, [r5, #0]
 8008620:	e7d4      	b.n	80085cc <_free_r+0x24>
 8008622:	6820      	ldr	r0, [r4, #0]
 8008624:	1821      	adds	r1, r4, r0
 8008626:	428a      	cmp	r2, r1
 8008628:	bf01      	itttt	eq
 800862a:	6811      	ldreq	r1, [r2, #0]
 800862c:	6852      	ldreq	r2, [r2, #4]
 800862e:	1809      	addeq	r1, r1, r0
 8008630:	6021      	streq	r1, [r4, #0]
 8008632:	6062      	str	r2, [r4, #4]
 8008634:	605c      	str	r4, [r3, #4]
 8008636:	e7c9      	b.n	80085cc <_free_r+0x24>
 8008638:	bd38      	pop	{r3, r4, r5, pc}
 800863a:	bf00      	nop
 800863c:	200000d4 	.word	0x200000d4

08008640 <_malloc_r>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	1ccd      	adds	r5, r1, #3
 8008644:	f025 0503 	bic.w	r5, r5, #3
 8008648:	3508      	adds	r5, #8
 800864a:	2d0c      	cmp	r5, #12
 800864c:	bf38      	it	cc
 800864e:	250c      	movcc	r5, #12
 8008650:	2d00      	cmp	r5, #0
 8008652:	4606      	mov	r6, r0
 8008654:	db01      	blt.n	800865a <_malloc_r+0x1a>
 8008656:	42a9      	cmp	r1, r5
 8008658:	d903      	bls.n	8008662 <_malloc_r+0x22>
 800865a:	230c      	movs	r3, #12
 800865c:	6033      	str	r3, [r6, #0]
 800865e:	2000      	movs	r0, #0
 8008660:	bd70      	pop	{r4, r5, r6, pc}
 8008662:	f000 f857 	bl	8008714 <__malloc_lock>
 8008666:	4a21      	ldr	r2, [pc, #132]	; (80086ec <_malloc_r+0xac>)
 8008668:	6814      	ldr	r4, [r2, #0]
 800866a:	4621      	mov	r1, r4
 800866c:	b991      	cbnz	r1, 8008694 <_malloc_r+0x54>
 800866e:	4c20      	ldr	r4, [pc, #128]	; (80086f0 <_malloc_r+0xb0>)
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	b91b      	cbnz	r3, 800867c <_malloc_r+0x3c>
 8008674:	4630      	mov	r0, r6
 8008676:	f000 f83d 	bl	80086f4 <_sbrk_r>
 800867a:	6020      	str	r0, [r4, #0]
 800867c:	4629      	mov	r1, r5
 800867e:	4630      	mov	r0, r6
 8008680:	f000 f838 	bl	80086f4 <_sbrk_r>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d124      	bne.n	80086d2 <_malloc_r+0x92>
 8008688:	230c      	movs	r3, #12
 800868a:	4630      	mov	r0, r6
 800868c:	6033      	str	r3, [r6, #0]
 800868e:	f000 f842 	bl	8008716 <__malloc_unlock>
 8008692:	e7e4      	b.n	800865e <_malloc_r+0x1e>
 8008694:	680b      	ldr	r3, [r1, #0]
 8008696:	1b5b      	subs	r3, r3, r5
 8008698:	d418      	bmi.n	80086cc <_malloc_r+0x8c>
 800869a:	2b0b      	cmp	r3, #11
 800869c:	d90f      	bls.n	80086be <_malloc_r+0x7e>
 800869e:	600b      	str	r3, [r1, #0]
 80086a0:	18cc      	adds	r4, r1, r3
 80086a2:	50cd      	str	r5, [r1, r3]
 80086a4:	4630      	mov	r0, r6
 80086a6:	f000 f836 	bl	8008716 <__malloc_unlock>
 80086aa:	f104 000b 	add.w	r0, r4, #11
 80086ae:	1d23      	adds	r3, r4, #4
 80086b0:	f020 0007 	bic.w	r0, r0, #7
 80086b4:	1ac3      	subs	r3, r0, r3
 80086b6:	d0d3      	beq.n	8008660 <_malloc_r+0x20>
 80086b8:	425a      	negs	r2, r3
 80086ba:	50e2      	str	r2, [r4, r3]
 80086bc:	e7d0      	b.n	8008660 <_malloc_r+0x20>
 80086be:	684b      	ldr	r3, [r1, #4]
 80086c0:	428c      	cmp	r4, r1
 80086c2:	bf16      	itet	ne
 80086c4:	6063      	strne	r3, [r4, #4]
 80086c6:	6013      	streq	r3, [r2, #0]
 80086c8:	460c      	movne	r4, r1
 80086ca:	e7eb      	b.n	80086a4 <_malloc_r+0x64>
 80086cc:	460c      	mov	r4, r1
 80086ce:	6849      	ldr	r1, [r1, #4]
 80086d0:	e7cc      	b.n	800866c <_malloc_r+0x2c>
 80086d2:	1cc4      	adds	r4, r0, #3
 80086d4:	f024 0403 	bic.w	r4, r4, #3
 80086d8:	42a0      	cmp	r0, r4
 80086da:	d005      	beq.n	80086e8 <_malloc_r+0xa8>
 80086dc:	1a21      	subs	r1, r4, r0
 80086de:	4630      	mov	r0, r6
 80086e0:	f000 f808 	bl	80086f4 <_sbrk_r>
 80086e4:	3001      	adds	r0, #1
 80086e6:	d0cf      	beq.n	8008688 <_malloc_r+0x48>
 80086e8:	6025      	str	r5, [r4, #0]
 80086ea:	e7db      	b.n	80086a4 <_malloc_r+0x64>
 80086ec:	200000d4 	.word	0x200000d4
 80086f0:	200000d8 	.word	0x200000d8

080086f4 <_sbrk_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	2300      	movs	r3, #0
 80086f8:	4c05      	ldr	r4, [pc, #20]	; (8008710 <_sbrk_r+0x1c>)
 80086fa:	4605      	mov	r5, r0
 80086fc:	4608      	mov	r0, r1
 80086fe:	6023      	str	r3, [r4, #0]
 8008700:	f7f8 fc36 	bl	8000f70 <_sbrk>
 8008704:	1c43      	adds	r3, r0, #1
 8008706:	d102      	bne.n	800870e <_sbrk_r+0x1a>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	b103      	cbz	r3, 800870e <_sbrk_r+0x1a>
 800870c:	602b      	str	r3, [r5, #0]
 800870e:	bd38      	pop	{r3, r4, r5, pc}
 8008710:	20000814 	.word	0x20000814

08008714 <__malloc_lock>:
 8008714:	4770      	bx	lr

08008716 <__malloc_unlock>:
 8008716:	4770      	bx	lr

08008718 <_init>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	bf00      	nop
 800871c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871e:	bc08      	pop	{r3}
 8008720:	469e      	mov	lr, r3
 8008722:	4770      	bx	lr

08008724 <_fini>:
 8008724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008726:	bf00      	nop
 8008728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872a:	bc08      	pop	{r3}
 800872c:	469e      	mov	lr, r3
 800872e:	4770      	bx	lr
